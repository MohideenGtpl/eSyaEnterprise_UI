#pragma checksum "D:\eSya Project\Solution\eSyaEnterprise_UI\tags\eSyaEnterprise_UI_v1\eSyaEnterprise_UI\Areas\eSyaPayrollExpat\Views\SalaryPayment\V_4532_00.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "dc5dd235a3a2fec0e3571f163921b5c4a774aa1e"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Areas_eSyaPayrollExpat_Views_SalaryPayment_V_4532_00), @"mvc.1.0.view", @"/Areas/eSyaPayrollExpat/Views/SalaryPayment/V_4532_00.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Areas/eSyaPayrollExpat/Views/SalaryPayment/V_4532_00.cshtml", typeof(AspNetCore.Areas_eSyaPayrollExpat_Views_SalaryPayment_V_4532_00))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"dc5dd235a3a2fec0e3571f163921b5c4a774aa1e", @"/Areas/eSyaPayrollExpat/Views/SalaryPayment/V_4532_00.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"23ac09be4bcfaa7f9829a01d1a134874eaae1f3b", @"/Areas/eSyaPayrollExpat/Views/_ViewImports.cshtml")]
    public class Areas_eSyaPayrollExpat_Views_SalaryPayment_V_4532_00 : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(0, 2, true);
            WriteLiteral("\r\n");
            EndContext();
#line 2 "D:\eSya Project\Solution\eSyaEnterprise_UI\tags\eSyaEnterprise_UI_v1\eSyaEnterprise_UI\Areas\eSyaPayrollExpat\Views\SalaryPayment\V_4532_00.cshtml"
  
    ViewData["Title"] = "V_4532_00";
    Layout = "~/Views/Shared/_Layout.cshtml";

#line default
#line hidden
            BeginContext(196, 124, true);
            WriteLiteral("\r\n<div class=\"row\">\r\n    <div class=\"col-lg-5 col-md-5 col-sm-12 form-group\">\r\n        <label>Business Key</label>\r\n        ");
            EndContext();
            BeginContext(321, 51, false);
#line 13 "D:\eSya Project\Solution\eSyaEnterprise_UI\tags\eSyaEnterprise_UI_v1\eSyaEnterprise_UI\Areas\eSyaPayrollExpat\Views\SalaryPayment\V_4532_00.cshtml"
   Write(await Component.InvokeAsync("UserBusinessLocation"));

#line default
#line hidden
            EndContext();
            BeginContext(372, 234, true);
            WriteLiteral("\r\n    </div>\r\n</div>\r\n<div class=\"row form-group\">\r\n    <div class=\"col-lg-3 col-md-3 col-sm-6 form-group\">\r\n        <label>Bank Name</label>\r\n        <select class=\"selectpicker\" id=\"cboBanks\" onchange=\"fnBank_onChange()\"></select>\r\n");
            EndContext();
            BeginContext(880, 11027, true);
            WriteLiteral(@"    </div>
    <div class=""col-lg-2 col-md-2 col-sm-6 form-group"">
        <label>Salary Currency</label>
        <select class=""selectpicker"" id=""cboBankCurrency"" onchange=""fnBankCurrency_onChange()""></select>
    </div>
    <div class=""col-lg-2 col-md-2 col-sm-12 form-group"">
        <label>Bank Date</label>
        <input type=""text"" name=""name"" id=""dtBankDate"" value="""" class=""form-control datepicker"" />
    </div>
    <div class=""col-lg-3 col-md-3 col-sm-6 form-group text-right "">
        <button class=""mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect mdl-button--accent primary-button"" id=""btnSaveSalaryPayment"" onclick=""fnSaveSalaryPayment()"">
            Process Salary Payment
        </button>
    </div>
</div>

<div class=""row form-group"" style=""margin-right:3px"">
    <div class=""col-lg-12 col-md-12 col-sm-12"">
        <table id=""jqgSalary""></table>
        <div id=""jqpSalary""></div>
    </div>
</div>

<script>

    $(function () {

        fnBusinessLocation_");
            WriteLiteral(@"onChange();

    });

    function fnBusinessLocation_onChange() {

        var s = '<option selected>Select</option>';
        s += '<option value=""C"">Cash</option>';

        $.get(getBaseURL() + '/SalaryPayment/GetBankName', { businessKey: $('#cboBusinessLocation').val() },
            function (data) {
                for (var i = 0; i < data.length; i++) {
                    s += '<option value=' + data[i].BankCode + '>' +
                        data[i].BankName + '</option>';
                }
                $(""#cboBanks"").html(s);
                $(""#cboBanks"").selectpicker('refresh');
            });

        fnBankCurrency_onChange();
    }

    function fnBank_onChange() {

        $(""#jqgSalary"").jqGrid(""clearGridData"", true).trigger(""reloadGrid"");

        if ($('#cboBanks').val() == ""C"") {
            _bankRemittance = ""C"";
            $(""#cboBankCurrency"").html("""");
            var s = '<option>select</option>';
            s += '<option selected value=""KES"">KES<");
            WriteLiteral(@"/option>';

            //$(""#cboBankCurrency"").html('<option selected value=""KES"">KES</option>');
            //$(""#cboBankCurrency"").selectpicker('refresh');

            $(""#cboBankCurrency"").html(s);
            $(""#cboBankCurrency"").selectpicker('refresh');

            fnLoadSalaryGrid();

            //$(""#jqgSalary"").jqGrid(""setGridParam"", { datatype: ""json"" })
            //    .trigger(""reloadGrid"", [{ current: true }]);
        }
        else {
            $.get(getBaseURL() + '/SalaryPayment/GetBankCurrency', { businessKey: $('#cboBusinessLocation').val(), bankCode: $('#cboBanks').val() },
                function (data) {
                    var s = '<option>select</option>';
                    for (var i = 0; i < data.length; i++) {
                        s += '<option value=' + data[i].CurrencyCode + '>' +
                            data[i].CurrencyCode + '</option>';
                    }
                    $(""#cboBankCurrency"").html(s);
                    $(""#cboBan");
            WriteLiteral(@"kCurrency"").selectpicker('refresh');
                });
            _bankRemittance = ""B"";
        }
    }

    var _bankRemittance = ""C"";
    function fnBankCurrency_onChange() {
        //$(""#jqgSalary"").clearGridData();
        //$(""#jqgSalary"").jqGrid(""setGridParam"", { datatype: ""json"" })
        //    .trigger(""reloadGrid"", [{ current: true }]);
       
       // jQuery(""#jqgSalary"").jqGrid('setGridParam', { datatype: 'json' }).trigger('reloadGrid');

        fnLoadSalaryGrid();
    }

    function fnLoadSalaryGrid () {

        $(""#jqgSalary"").jqGrid('GridUnload');
        $(""#jqgSalary"").jqGrid({
            url: getBaseURL() + '/SalaryPayment/GetSalaryDetailForPayment',
            datatype: ""json"",
            contenttype: ""application/json; charset-utf-8"",
            mtype: 'GET',
            postData: {
                businessKey: function () { return $(""#cboBusinessLocation"").val(); },
                bankCode: function () { return $(""#cboBanks"").val(); },
          ");
            WriteLiteral(@"      currency: function () { return $(""#cboBankCurrency"").val(); },
                bankRemittance: function () { return _bankRemittance; },
            },
            ajaxRowOptions: {
                async: false,
            },
            jsonReader: { repeatitems: false, root: ""rows"", page: ""page"", total: ""total"", records: ""records"" },
            colNames: [""EmployeeNumber"", ""Employee Name"", 'Pay Period', 'SerialNumber', 'Amount In local Currency ', 'Bank Charges', 'Account Holder Name', 'Account Number', 'IFSC Code'],
            colModel: [
                { name: ""EmployeeNumber"", width: '100', align: 'left', editable: false, hidden: true },
                { name: ""EmployeeName"", index: 'EmployeeName', width: '200', align: 'left', editable: false, sortable: true, },
                { name: ""PayPeriod"", index: 'PayPeriod', width: '50', align: 'left', editable: false, sortable: true, },
                { name: ""SerialNumber"", index: 'SerialNumber', hidden: true },
                { name:");
            WriteLiteral(@" 'LocalCurrencyAmount', index: 'LocalCurrencyAmount', width: 80, align: ""right"", sorttype: ""float"", formatter: ""number"", formatoptions: { decimalPlaces: 0 } },
                { name: 'BankCharges', index: 'BankCharges', width: 80, align: ""right"", sorttype: ""float"", formatter: ""number"", formatoptions: { decimalPlaces: 0 } },
                { name: 'AccountHolderName', index: 'AccountHolderName', width: 120 },
                { name: 'AccountNumber', index: 'AccountNumber', width: 120 },
                { name: 'IFSCCode', index: 'IFSCCode', width: 120 },
            ],
            rowNum: 100000,
            loadonce: false,
            height: 'auto',
            scroll: true,
            // width: '150',
            autowidth: true,
            shrinkToFit: true,
            forceFit: true,
            cellEdit: true,
            editurl: 'url',
            cellsubmit: 'clientArray',
            footerrow: true,
            multiselect: true,
            loadComplete: function () {
    ");
            WriteLiteral(@"        },
            onSelectAll: function (aRowids, status) {
                var selectedRowsIds = $('#jqgSalary').jqGrid('getGridParam', 'selarrrow');
                var totalEmployee = 0;
                var LocalCurrencyAmount = 0, BankCharges = 0;

                $.each(selectedRowsIds, function (index, selectedRowId) {
                    totalEmployee += 1;
                    LocalCurrencyAmount += parseInt($('#jqgSalary').jqGrid('getCell', selectedRowId, 'LocalCurrencyAmount'));
                    BankCharges += parseInt($('#jqgSalary').jqGrid('getCell', selectedRowId, 'BankCharges'));
                });

                $('#jqgSalary').jqGrid('footerData', 'set', { 'EmployeeName': 'Total No. of Emp. : ' + totalEmployee });

                $('#jqgSalary').jqGrid('footerData', 'set', { 'LocalCurrencyAmount': LocalCurrencyAmount });
                $('#jqgSalary').jqGrid('footerData', 'set', { 'BankCharges': BankCharges });
            },
            onSelectRow: function (rowI");
            WriteLiteral(@"d) {
                var selectedRowsIds = $('#jqgSalary').jqGrid('getGridParam', 'selarrrow');
                var totalEmployee = 0;
                var LocalCurrencyAmount = 0, BankCharges = 0;

                $.each(selectedRowsIds, function (index, selectedRowId) {
                    totalEmployee += 1;
                    LocalCurrencyAmount += parseInt($('#jqgSalary').jqGrid('getCell', selectedRowId, 'LocalCurrencyAmount'));
                    BankCharges += parseInt($('#jqgSalary').jqGrid('getCell', selectedRowId, 'BankCharges'));
                });

                $('#jqgSalary').jqGrid('footerData', 'set', { 'EmployeeName': 'Total No. of Emp. : ' + totalEmployee });

                $('#jqgSalary').jqGrid('footerData', 'set', { 'LocalCurrencyAmount': LocalCurrencyAmount });
                $('#jqgSalary').jqGrid('footerData', 'set', { 'BankCharges': BankCharges });
            }
        });

    };

    function fnSaveSalaryPayment() {

        if (!IsValid())
           ");
            WriteLiteral(@" return;

        try {
            $(""#btnSaveSalaryPayment"").attr('disabled', true);

            var l_pr = [];
            // var ids = jQuery(""#jqgSalaryProcess"").jqGrid('getDataIDs');
            var ids = jQuery(""#jqgSalary"").jqGrid('getGridParam', 'selarrrow');
            for (var i = 0; i < ids.length; i++) {
                var rowId = ids[i];
                var rowData = jQuery('#jqgSalary').jqGrid('getRowData', rowId);
                l_pr.push({
                    BusinessKey: $(""#cboBusinessLocation"").val(),
                    PayPeriod: rowData.PayPeriod,
                    EmployeeNumber: rowData.EmployeeNumber,
                    SerialNumber: rowData.SerialNumber,
                    OrgBankCode: $(""#cboBanks"").val(),
                    OrgBankDate: $(""#dtBankDate"").val()
                });
            }

            var URL = getBaseURL() + '/SalaryPayment/UpdateSalaryPaymentBank';

            $.ajax({
                url: URL,
                type: 'POST',");
            WriteLiteral(@"
                datatype: 'json',
                data: { obj: l_pr },
                async: false,
                success: function (response) {
                    if (response.Status) {
                        $(""#btnSaveSalaryPayment"").attr('disabled', false);
                        toastr.success(""Submitted Successfully"");
                        $(""#jqgSalary"").jqGrid(""setGridParam"", { datatype: ""json"" })
                            .trigger(""reloadGrid"", [{ current: true }]);
                    }
                    else {
                        toastr.error(response.Message);
                    }

                    $(""#btnSaveSalaryPayment"").attr('disabled', false);
                },
                error: function (error) {
                    toastr.error(error.statusText);
                    $(""#btnSaveSalaryPayment"").attr('disabled', false);
                }
            });
        }
        catch
        {
            toastr.error(""error"");
            $(""#bt");
            WriteLiteral(@"nSaveSalaryPayment"").attr('disabled', false);
        }
    }

    function IsValid() {
        if (IsStringNullorEmpty($(""#cboBusinessLocation"").val())) {
            toastr.warning(""Please select the Business location"");
            return false;
        }
        if (IsStringNullorEmpty($(""#cboBanks"").val())) {
            toastr.warning(""Please select the Bank"");
            return false;
        }
        if (IsStringNullorEmpty($(""#cboBankCurrency"").val())) {
            toastr.warning(""Please select the Bank Currency"");
            return false;
        }
        if (IsStringNullorEmpty($(""#dtBankDate"").val())) {
            toastr.warning(""Please enter the Bank Date"");
            return false;
        }

        return true;
    }

</script>
");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
