using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using System.Net.Http;
using eSyaEnterprise_UI.Areas.Config.Models;
using eSyaEnterprise_UI.Models;
using eSyaEnterprise_UI.Utility;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Newtonsoft.Json;
using eSyaEnterprise_UI.Areas.Config.Data;
using eSyaEnterprise_UI.ActionFilter;
using Microsoft.Extensions.Logging;

namespace eSyaEnterprise_UI.Areas.Config.Controllers
{

    public class LocalizationController : Controller
    {


        private readonly IeSyaConfigAPIServices _eSyaConfigAPIServices;
        private readonly ILogger<LocalizationController> _logger;
        public LocalizationController(IeSyaConfigAPIServices eSyaConfigAPIServices, ILogger<LocalizationController> logger)
        {
            _eSyaConfigAPIServices = eSyaConfigAPIServices;
            _logger = logger;

        }

        #region Localization Table Mapping
        /// <summary>
        /// Localization Master
        /// </summary>
        /// <returns></returns>
        /// 
        [Area("eSyaConfig")]
        [ServiceFilter(typeof(ViewBagActionFilter))]
        public IActionResult V_10_00()
        {
            return View();
        }

        /// <summary>
        /// Getting Localization Master Table List for Grid
        /// </summary>
        [HttpPost]
        public async Task<JsonResult> GetLocalizationTableMaster()
        {
            try
            {
                var serviceResponse = await _eSyaConfigAPIServices.HttpClientServices.GetAsync<List<DO_LocalizationMaster>>("Localization/GetLocalizationTableMaster");
                if (serviceResponse.Status)
                {
                    return Json(serviceResponse.Data);
                   
                }
                else
                {
                    _logger.LogError(new Exception(serviceResponse.Message), "UD:GetLocalizationTableMaster");
                    return Json(new { Status = false, StatusCode = "500" });
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:GetLocalizationTableMaster");
                return Json(new DO_ReturnParameter() { Status = false, Message = (ex.InnerException != null) ? ex.InnerException.Message : ex.Message });
            }
        }

        /// <summary>
        /// Insert or Update Localization Master
        /// </summary>
        [HttpPost]
        public async Task<JsonResult> InsertOrUpdateLocalizationTableMaster(DO_LocalizationMaster obj)
        {

            try
            {
                obj.UserID = AppSessionVariables.GetSessionUserID(HttpContext);
                obj.TerminalID = AppSessionVariables.GetIPAddress(HttpContext);
                obj.FormId = AppSessionVariables.GetSessionFormInternalID(HttpContext);

                var serviceResponse = await _eSyaConfigAPIServices.HttpClientServices.PostAsJsonAsync<DO_ReturnParameter>("Localization/InsertOrUpdateLocalizationTableMaster", obj);
                if (serviceResponse.Status)
                    return Json(serviceResponse.Data);
                else
                    return Json(new DO_ReturnParameter() { Status = false, Message = serviceResponse.Message });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:InsertOrUpdateLocalizationTableMaster:params:" + JsonConvert.SerializeObject(obj));
                return Json(new { Status = false, Message = ex.InnerException == null ? ex.Message.ToString() : ex.InnerException.Message });
            }
        }

        #endregion

        #region Language Mapping
        /// <summary>
        /// Localization Language Mapping
        /// </summary>
        /// 
        [Area("eSyaConfig")]
        [ServiceFilter(typeof(ViewBagActionFilter))]
        public async Task<IActionResult> V_11_00()
        {

            try
            {
                var servicetableResponse = await _eSyaConfigAPIServices.HttpClientServices.GetAsync<List<DO_LocalizationMaster>>("Localization/GetLocalizationMaster");

                if (servicetableResponse.Status)
                {
                    
                        ViewBag.TableList = servicetableResponse.Data;
                        return View();
                   
                }
                else
                {
                  
                    _logger.LogError(new Exception(servicetableResponse.Message), "UD:GetLocalizationMaster");
                    return Json(new { Status = false, StatusCode = "500" });
                }



            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:GetLocalizationMaster");
                return Json(new DO_ReturnParameter() { Status = false, Message = (ex.InnerException != null) ? ex.InnerException.Message : ex.Message });
            }
        }

        /// <summary>
        /// Insert or Update Localization Language Mapping
        /// </summary>
        [HttpPost]
        public async Task<JsonResult> InsertOrUpdateLocalizationLanguageMapping(List<DO_LocalizationLanguageMapping> l_obj)
        {

            try
            {
                l_obj.All(c =>
                {
                    c.UserID = AppSessionVariables.GetSessionUserID(HttpContext);
                    c.TerminalID = AppSessionVariables.GetIPAddress(HttpContext);
                    c.FormId = AppSessionVariables.GetSessionFormInternalID(HttpContext);
                    return true;
                });
                var serviceResponse = await _eSyaConfigAPIServices.HttpClientServices.PostAsJsonAsync<DO_ReturnParameter>("Localization/InsertOrUpdateLocalizationLanguageMapping", l_obj);
                if (serviceResponse.Status)
                    return Json(serviceResponse.Data);
                else
                    return Json(new DO_ReturnParameter() { Status = false, Message = serviceResponse.Message });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:InsertOrUpdateLocalizationLanguageMapping:params:" + JsonConvert.SerializeObject(l_obj));
                return Json(new { Status = false, Message = ex.InnerException == null ? ex.Message.ToString() : ex.InnerException.Message });
            }
        }

        /// <summary>
        /// Get Localization Language Mapping Grid
        /// </summary>
        [HttpGet]
        public async Task<JsonResult> GetLocalizationLanguageMapping(string languageCode, int tableCode)
        {
            try
            {
                if (tableCode > 0)
                {
                    var parameter = "?languageCode=" + languageCode + "&tableCode=" + tableCode.ToString();
                    var serviceResponse = await _eSyaConfigAPIServices.HttpClientServices.GetAsync<List<DO_LocalizationLanguageMapping>>("Localization/GetLocalizationLanguageMapping" + parameter);
                    return Json(serviceResponse.Data);
                }
                else
                    return Json(null);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:GetLocalizationLanguageMapping:For languageCode {0} with tableCode entered {1}", languageCode, tableCode);
                return Json(new DO_ReturnParameter() { Status = false, Message = (ex.InnerException != null) ? ex.InnerException.Message : ex.Message });
            }
        }

        #endregion Language Mapping

        #region Language Controller
        [Area("eSyaConfig")]
        [ServiceFilter(typeof(ViewBagActionFilter))]
        public async Task<IActionResult> V_12_00()
        {
            try
            {
                var serviceResponse = await _eSyaConfigAPIServices.HttpClientServices.GetAsync<List<string>>("Localization/GetAllControllers");

                if (serviceResponse.Status)
                {
                    ViewBag.Controllers = serviceResponse.Data;
                    return View();

                }
                else
                {
                    _logger.LogError(new Exception(serviceResponse.Message), "UD:GetAllControllers");
                    return Json(new { Status = false, StatusCode = "500" });
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:GetAllControllers");
                return Json(new DO_ReturnParameter() { Status = false, Message = (ex.InnerException != null) ? ex.InnerException.Message : ex.Message });
            }
        }
        /// <summary>
        /// Get Language Controllers Grid
        /// </summary>
        [HttpPost]
        public async Task<JsonResult> GetLanguageControllersbyResource(string Resource)
        {
            try
            {
                if (!string.IsNullOrEmpty(Resource))
                {
                    var parameter = "?Resource=" + Resource;
                    var serviceResponse =await _eSyaConfigAPIServices.HttpClientServices.GetAsync<List<DO_LanguageController>>("Localization/GetLanguageControllersbyResource" + parameter);
                    return Json(serviceResponse.Data);
                }
                else
                    return Json(null);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:GetLanguageControllersbyResource:For Resource", Resource);

                return Json(new DO_ReturnParameter() { Status = false, Message = (ex.InnerException != null) ? ex.InnerException.Message : ex.Message });
            }
        }

        /// <summary>
        /// Insert or Update Localization Language Controller
        /// </summary>
        [HttpPost]
        public async Task<JsonResult> InsertOrUpdateLanguageController(DO_LanguageController lobj)
        {

            try
            {
                lobj.UserID = AppSessionVariables.GetSessionUserID(HttpContext);
                lobj.TerminalID = AppSessionVariables.GetIPAddress(HttpContext);
                lobj.FormId = AppSessionVariables.GetSessionFormInternalID(HttpContext);

                var serviceResponse =await _eSyaConfigAPIServices.HttpClientServices.PostAsJsonAsync<DO_ReturnParameter>("Localization/InsertOrUpdateLanguageController", lobj);
                if (serviceResponse.Status)
                    return Json(serviceResponse.Data);
                else
                    return Json(new DO_ReturnParameter() { Status = false, Message = serviceResponse.Message });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:InsertMenukeysIntoUserGroup:params:" + JsonConvert.SerializeObject(lobj));
                return Json(new { Status = false, Message = ex.InnerException == null ? ex.Message.ToString() : ex.InnerException.Message });
            }
        }



        #endregion

        #region Language Culture
        [Area("eSyaConfig")]
        [ServiceFilter(typeof(ViewBagActionFilter))]
        public async Task<IActionResult> V_13_00()
        {
            try
            {
                var serviceResponse = await _eSyaConfigAPIServices.HttpClientServices.GetAsync<List<DO_LanguageController>>("Localization/GetResources");
                if (serviceResponse.Status)
                {
                    ViewBag.Resources = serviceResponse.Data;
                    return View();
                }
                else
                {
                    _logger.LogError(new Exception(serviceResponse.Message), "UD:GetResources");
                    return Json(new { Status = false, StatusCode = "500" });
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:GetResources");
                return Json(new DO_ReturnParameter() { Status = false, Message = (ex.InnerException != null) ? ex.InnerException.Message : ex.Message });
            }

        }
        /// <summary>
        /// Get Language Culture Grid
        /// </summary>
        [HttpPost]
        public async Task<JsonResult> GetLanguageCulture(string Culture, string Resource)
        {
            try
            {

                var parameter = "?Resource=" + Resource + "&Culture=" + Culture;
                var serviceResponse =await _eSyaConfigAPIServices.HttpClientServices.GetAsync<List<DO_LanguageCulture>>("Localization/GetLanguageCulture" + parameter);
                if (serviceResponse.Status)
                {
                    return Json(serviceResponse.Data);
                   
                }
                else
                {
                    _logger.LogError(new Exception(serviceResponse.Message), "UD:GetLanguageCulture:For Culture {0} with Resource entered {1}", Culture, Resource);
                    return Json(new { Status = false, StatusCode = "500" });
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:GetLanguageCulture:For Culture {0} with Resource entered {1}", Culture, Resource);
                return Json(new DO_ReturnParameter() { Status = false, Message = (ex.InnerException != null) ? ex.InnerException.Message : ex.Message });
            }
        }

        /// <summary>
        /// Insert or Update Resource Culture
        /// </summary>
        [HttpPost]
        public async Task<JsonResult> InsertOrUpdateLanguageCulture(List<DO_LanguageCulture> obj)
        {

            try
            {
                obj.All(c =>
                {
                    c.UserID = AppSessionVariables.GetSessionUserID(HttpContext);
                    c.TerminalID = AppSessionVariables.GetIPAddress(HttpContext);
                    c.FormId = AppSessionVariables.GetSessionFormInternalID(HttpContext);
                    return true;
                });

                var serviceResponse =await _eSyaConfigAPIServices.HttpClientServices.PostAsJsonAsync<DO_ReturnParameter>("Localization/InsertOrUpdateLanguageCulture", obj);
                if (serviceResponse.Status)
                    return Json(serviceResponse.Data);
                else
                    return Json(new DO_ReturnParameter() { Status = false, Message = serviceResponse.Message });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:InsertOrUpdateLanguageCulture:params:" + JsonConvert.SerializeObject(obj));
                return Json(new { Status = false, Message = ex.InnerException == null ? ex.Message.ToString() : ex.InnerException.Message });
            }
        }
        #endregion

        #region Culture Keys
        [Area("eSyaConfig")]
        [ServiceFilter(typeof(ViewBagActionFilter))]
        public IActionResult V_14_00()
        {
            return View();
        }
        /// <summary>
        /// Get Language Culturekeys for Grid
        /// </summary>
        [HttpPost]
        public async Task<JsonResult> GetDistinictCultureKeys(string Culture)
        {
            try
            {

                var parameter = "?Culture=" + Culture;
                var serviceResponse =await _eSyaConfigAPIServices.HttpClientServices.GetAsync<List<DO_LanguageCulture>>("Localization/GetDistinictCultureKeys" + parameter);
                if (serviceResponse.Status)
                {
                     return Json(serviceResponse.Data);
                   
                }
                else
                {
                    _logger.LogError(new Exception(serviceResponse.Message), "UD:GetDistinictCultureKeys:For Culture", Culture);
                    return Json(new { Status = false, StatusCode = "500" });
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:GetDistinictCultureKeys:For BusinessKey", Culture);
                return Json(new DO_ReturnParameter() { Status = false, Message = (ex.InnerException != null) ? ex.InnerException.Message : ex.Message });
            }
        }

        /// <summary>
        /// Insert or Update Culture Keys
        /// </summary>
        [HttpPost]
        public async Task<JsonResult> InsertOrUpdateCultureKeys(List<DO_LanguageCulture> obj)
        {

            try
            {
                obj.All(c =>
                {
                    c.UserID = AppSessionVariables.GetSessionUserID(HttpContext);
                    c.TerminalID = AppSessionVariables.GetIPAddress(HttpContext);
                    c.FormId = AppSessionVariables.GetSessionFormInternalID(HttpContext);
                    return true;
                });

                var serviceResponse =await _eSyaConfigAPIServices.HttpClientServices.PostAsJsonAsync<DO_ReturnParameter>("Localization/InsertOrUpdateCultureKeys", obj);
                if (serviceResponse.Status)
                    return Json(serviceResponse.Data);
                else
                    return Json(new DO_ReturnParameter() { Status = false, Message = serviceResponse.Message });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:InsertOrUpdateCultureKeys:params:" + JsonConvert.SerializeObject(obj));
                return Json(new DO_ReturnParameter() { Status = false, Message = (ex.InnerException != null) ? ex.InnerException.Message : ex.Message });
            }
        }

        #endregion Culture Keys
    }
}