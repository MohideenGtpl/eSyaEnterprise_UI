using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using System.Net.Http;
using eSyaEnterprise_UI.Areas.eSyaVendor.Models;
using eSyaEnterprise_UI.Utility;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Newtonsoft.Json;
using eSyaEnterprise_UI.Areas.eSyaVendor.Data;

namespace eSyaEnterprise_UI.Areas.eSyaVendor.Controllers
{
    public class VendorController : Controller
    {
        private readonly IeSyaVendorAPIServices _eSyaVendorAPIServices;
        public VendorController(IeSyaVendorAPIServices eSyaVendorAPIServices)
        {
            _eSyaVendorAPIServices = eSyaVendorAPIServices;
        }

        ESyaWebAPI _eSyaWebAPI = new ESyaWebAPI();
        #region Vendor Registration
        [Area("eSyaVendor")]
        public IActionResult Create()
        {
            HttpResponseMessage response = _eSyaVendorAPIServices.GetConfigCSHttpClient(HttpContext.RequestServices.GetRequiredService<IConfiguration>()).GetAsync("ConfigMasterData/GetISDCodes").Result;
            string stringData = response.Content.ReadAsStringAsync().Result;
            var data = JsonConvert.DeserializeObject<List<DO_CountryCodes>>(stringData);
            ViewBag.Isdcodes = data;
            return View();
        } 
        /// <summary>
        ///Get Vendor for Grid
        /// </summary>
        [HttpPost]
        public JsonResult GetVendors(string Alphabet)
        {
            try
            {
                HttpResponseMessage response = _eSyaVendorAPIServices.GetHttpClient().GetAsync("Vendor/GetVendors?Alphabet=" + Alphabet).Result;
                string stringData = response.Content.ReadAsStringAsync().Result;
                var data = JsonConvert.DeserializeObject<List<DO_VendorRegistration>>(stringData);
                return Json(data);
            }
            catch (Exception ex)
            {
                return Json(new DO_ReturnParameter() { Status = false, Message = (ex.InnerException != null) ? ex.InnerException.Message : ex.Message });
            }

        }

        /// <summary>
        /// Insert or Update Vendor.
        /// </summary>
        [HttpPost]
        public JsonResult InsertOrUpdateVendor([FromBody] DO_VendorRegistration vendor)
        {

            try
            {
                vendor.UserID = AppSessionVariables.GetSessionUserID(HttpContext);
                vendor.TerminalID = AppSessionVariables.GetIPAddress(HttpContext);
                vendor.FormId = AppSessionVariables.GetSessionFormID(HttpContext).ToString();
                HttpResponseMessage response = _eSyaVendorAPIServices.GetHttpClient().PostAsJsonAsync("Vendor/InsertOrUpdateVendor", vendor).Result;
                string stringdata = response.Content.ReadAsStringAsync().Result;
                var data = JsonConvert.DeserializeObject<DO_ReturnParameter>(stringdata);
                return Json(data);

            }
            catch (Exception ex)
            {
                return Json(new { Status = false, Message = ex.InnerException == null ? ex.Message.ToString() : ex.InnerException.Message });
            }
        }
        #endregion Vendor Registration

        #region Vendor Location
        /// <summary>
        ///Get Vendor Locationsby Vendor code for Grid
        /// </summary>
        [HttpPost]
        public JsonResult GetVendorLocationsByVendorcode(int vendorcode)
        {
            try
            {
                HttpResponseMessage response = _eSyaVendorAPIServices.GetHttpClient().GetAsync("Vendor/GetVendorLocationsByVendorcode?vendorcode=" + vendorcode).Result;
                string stringData = response.Content.ReadAsStringAsync().Result;
                var data = JsonConvert.DeserializeObject<List<DO_VendorLocation>>(stringData);
                return Json(data);
            }
            catch (Exception ex)
            {
                return Json(new DO_ReturnParameter() { Status = false, Message = (ex.InnerException != null) ? ex.InnerException.Message : ex.Message });
            }

        }

        /// <summary>
        /// Insert or Update Vendor Location.
        /// </summary>
        [HttpPost]
        public JsonResult InsertOrUpdateVendorLocation([FromBody] DO_VendorLocation vendorloc)
        {

            try
            {
                vendorloc.UserID = AppSessionVariables.GetSessionUserID(HttpContext);
                vendorloc.TerminalID = AppSessionVariables.GetIPAddress(HttpContext);
                vendorloc.FormId = AppSessionVariables.GetSessionFormID(HttpContext).ToString();
                HttpResponseMessage response = _eSyaVendorAPIServices.GetHttpClient().PostAsJsonAsync("Vendor/InsertOrUpdateVendorLocation", vendorloc).Result;
                string stringdata = response.Content.ReadAsStringAsync().Result;
                var data = JsonConvert.DeserializeObject<DO_ReturnParameter>(stringdata);
                return Json(data);

            }
            catch (Exception ex)
            {
                return Json(new { Status = false, Message = ex.InnerException == null ? ex.Message.ToString() : ex.InnerException.Message });
            }
        }
        #endregion Vendor Location

        //#region Vendor Business Key
        //[HttpPost]
        //public JsonResult GetBusinessKeysByVendorcode(int vendorcode)
        //{

        //    var client = _eSyaWebAPI.InitializeClient(HttpContext.RequestServices.GetRequiredService<IConfiguration>());
        //    HttpResponseMessage response = client.GetAsync("Vendor/GetBusinessLocation").Result;
        //    string stringData = response.Content.ReadAsStringAsync().Result;
        //    List<DO_BusinessKey> blocations = JsonConvert.DeserializeObject<List<DO_BusinessKey>>(stringData);

        //    var parameter = "?vendorcode=" + vendorcode;
        //    HttpResponseMessage bkeyresponse = client.GetAsync("Vendor/GetBusinessKeysByVendorcode" + parameter).Result;
        //    string bkeyData = bkeyresponse.Content.ReadAsStringAsync().Result;
        //    List<DO_VendorBusinessLink> businesskeydata = JsonConvert.DeserializeObject<List<DO_VendorBusinessLink>>(bkeyData);


        //    HttpResponseMessage resps = client.GetAsync("UserMaster/Get_Locationforcombo").Result;
        //    string stringlocData = resps.Content.ReadAsStringAsync().Result;
        //    List<DO_Location> locdata = JsonConvert.DeserializeObject<List<DO_Location>>(stringlocData);



        //    foreach (var obj in data)
        //    {
        //        if (vendorcode != 0)
        //        {
        //            if (businesskeydata != null)
        //            {


        //                var isBusinessSegment = businesskeydata
        //                      .Where(c => c.VendorCode == vendorcode && c.BusinessKey == obj.BusinessKey).FirstOrDefault();

        //                if (isBusinessSegment != null)
        //                {
        //                    obj.ActiveStatus = true;
        //                }
        //                else
        //                {
        //                    obj.ActiveStatus = false;
        //                }

        //            }
        //        }

        //        var getlocDesc =
        //              locdata.Where(c => c.LocationId == obj.LocationId).FirstOrDefault();

        //        if (getlocDesc != null)
        //        {
        //            obj.BusinessLocation = getlocDesc.LocationDescription;
        //        }
        //        else
        //        {
        //            obj.BusinessLocation = " - ";
        //        }
        //    }

        //    return Json(data);

        //}
        //#endregion Vendor Business Key
    }
}