using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using System.Net.Http;
using eSyaEnterprise_UI.Areas.eSyaVendor.Models;
using eSyaEnterprise_UI.Utility;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Newtonsoft.Json;
using eSyaEnterprise_UI.Areas.eSyaVendor.Data;

namespace eSyaEnterprise_UI.Areas.eSyaVendor.Controllers
{
    public class VendorController : Controller
    {
        private readonly IeSyaVendorAPIServices _eSyaVendorAPIServices;
        public VendorController(IeSyaVendorAPIServices eSyaVendorAPIServices)
        {
            _eSyaVendorAPIServices = eSyaVendorAPIServices;
        }
        #region Vendor Registration
        [Area("eSyaVendor")]
        public IActionResult V_251_00()
        {
            var serviceResponse = _eSyaVendorAPIServices.HttpClientServices.GetAsync<List<DO_CountryCodes>>("Vendor/GetISDCodes").Result;
            ViewBag.Isdcodes = serviceResponse.Data;
            return View();
        } 
        /// <summary>
        ///Get Vendor for Grid
        /// </summary>
        [HttpPost]
        public JsonResult GetVendors(string Alphabet)
        {
            try
            {
                var parameter = "?Alphabet=" + Alphabet;
                var serviceResponse = _eSyaVendorAPIServices.HttpClientServices.GetAsync<List<DO_VendorRegistration>>("Vendor/GetVendors"+ parameter).Result;
                return Json(serviceResponse.Data);
            }
            catch (Exception ex)
            {
                return Json(new DO_ReturnParameter() { Status = false, Message = (ex.InnerException != null) ? ex.InnerException.Message : ex.Message });
            }

        }

        /// <summary>
        /// Insert or Update Vendor.
        /// </summary>
        [HttpPost]
        public JsonResult InsertOrUpdateVendor(DO_VendorRegistration vendor)
        {

            try
            {
                vendor.UserID = AppSessionVariables.GetSessionUserID(HttpContext);
                vendor.TerminalID = AppSessionVariables.GetIPAddress(HttpContext);
                vendor.FormId = AppSessionVariables.GetSessionFormID(HttpContext).ToString();
                var serviceResponse = _eSyaVendorAPIServices.HttpClientServices.PostAsJsonAsync<DO_ReturnParameter>("Vendor/InsertOrUpdateVendor", vendor).Result;
                if (serviceResponse.Status)
                    return Json(serviceResponse.Data);
                else
                    return Json(new DO_ReturnParameter() { Status = false, Message = serviceResponse.Message });
            }
            catch (Exception ex)
            {
                return Json(new { Status = false, Message = ex.InnerException == null ? ex.Message.ToString() : ex.InnerException.Message });
            }
        }
        #endregion Vendor Registration

        #region Vendor Location
        /// <summary>
        ///Get Vendor Locationsby Vendor code for Grid
        /// </summary>
        [HttpPost]
        public JsonResult GetVendorLocationsByVendorcode(int vendorcode)
        {
            try
            {
                var parameter = "?vendorcode=" + vendorcode;
                var serviceResponse = _eSyaVendorAPIServices.HttpClientServices.GetAsync<List<DO_VendorLocation>>("Vendor/GetVendorLocationsByVendorcode" + parameter).Result;
                return Json(serviceResponse.Data);
            }
            catch (Exception ex)
            {
                return Json(new DO_ReturnParameter() { Status = false, Message = (ex.InnerException != null) ? ex.InnerException.Message : ex.Message });
            }

        }

        /// <summary>
        /// Insert or Update Vendor Location.
        /// </summary>
        [HttpPost]
        public JsonResult InsertOrUpdateVendorLocation(DO_VendorLocation vendorloc)
        {

            try
            {
                vendorloc.UserID = AppSessionVariables.GetSessionUserID(HttpContext);
                vendorloc.TerminalID = AppSessionVariables.GetIPAddress(HttpContext);
                vendorloc.FormId = AppSessionVariables.GetSessionFormID(HttpContext).ToString();
                var serviceResponse = _eSyaVendorAPIServices.HttpClientServices.PostAsJsonAsync<DO_ReturnParameter>("Vendor/InsertOrUpdateVendorLocation", vendorloc).Result;
                if (serviceResponse.Status)
                    return Json(serviceResponse.Data);
                else
                    return Json(new DO_ReturnParameter() { Status = false, Message = serviceResponse.Message });

            }
            catch (Exception ex)
            {
                return Json(new { Status = false, Message = ex.InnerException == null ? ex.Message.ToString() : ex.InnerException.Message });
            }
        }
        #endregion Vendor Location

        #region Vendor Business Key
        /// <summary>
        ///Get Vendor BusinessKeysByVendor for Grid
        /// </summary>
        [HttpPost]
        public JsonResult GetBusinessKeysByVendorcode(int vendorcode)
        {

            var serviceResponse = _eSyaVendorAPIServices.HttpClientServices.GetAsync<List<DO_BusinessKey>>("Vendor/GetBusinessLocation").Result;
            List<DO_BusinessKey> blocations = serviceResponse.Data;

            var parameter = "?vendorcode=" + vendorcode;
            var serviceResp = _eSyaVendorAPIServices.HttpClientServices.GetAsync<List<DO_VendorBusinessLink>>("Vendor/GetBusinessKeysByVendorcode" + parameter).Result;
            List<DO_VendorBusinessLink> businesskeydata = serviceResp.Data;
            foreach (var obj in blocations)
            {
                if (vendorcode != 0)
                {
                    if (businesskeydata.Count >0)
                    {


                        var isBusinessSegment = businesskeydata
                              .Where(c => c.VendorCode == vendorcode && c.BusinessKey == obj.BusinessKey).FirstOrDefault();

                        if (isBusinessSegment != null)
                        {
                            obj.ActiveStatus = true;
                        }
                        else
                        {
                            obj.ActiveStatus = false;
                        }

                    }
                }
            }

            return Json(blocations);

        }

        /// <summary>
        /// Insert Business Keys.
        /// </summary>
        [HttpPost]
        public JsonResult InsertBusinesskeyforVendor(DO_VendorBusinessLink bkeys)
        {

            try
            {
                bkeys.UserID = AppSessionVariables.GetSessionUserID(HttpContext);
                bkeys.TerminalID = AppSessionVariables.GetIPAddress(HttpContext);
                bkeys.FormId = AppSessionVariables.GetSessionFormID(HttpContext).ToString();

                var serviceResponse = _eSyaVendorAPIServices.HttpClientServices.PostAsJsonAsync<DO_ReturnParameter>("Vendor/InsertBusinesskeyforVendor", bkeys).Result;
                if (serviceResponse.Status)
                    return Json(serviceResponse.Data);
                else
                    return Json(new DO_ReturnParameter() { Status = false, Message = serviceResponse.Message });

            }
            catch (Exception ex)
            {
                return Json(new { Status = false, Message = ex.InnerException == null ? ex.Message.ToString() : ex.InnerException.Message });
            }
        }
        #endregion Vendor Business Key

        #region Vendor Statutory details
        /// <summary>
        ///Get Vendor Statutory details by Vendor code and LocationId for Grid
        /// </summary>
        [HttpPost]
        public JsonResult GetStatutorydetailsbyVendorcodeAndLocationId(int vendorcode, int locationId)
        {
            try
            {
                var parameter = "?vendorcode=" + vendorcode + "&locationId=" + locationId;
                var serviceResponse = _eSyaVendorAPIServices.HttpClientServices.GetAsync<List<DO_VendorStatutoryDetails>>("Vendor/GetStatutorydetailsbyVendorcodeAndLocationId" + parameter).Result;
                return Json(serviceResponse.Data);
            }
            catch (Exception ex)
            {
                return Json(new DO_ReturnParameter() { Status = false, Message = (ex.InnerException != null) ? ex.InnerException.Message : ex.Message });
            }

        }

        /// <summary>
        /// Insert or Update Vendor Statutory details.
        /// </summary>
        [HttpPost]
        public JsonResult InsertOrUpdateStatutorydetails(DO_VendorStatutoryDetails statutorydetails)
        {

            try
            {
                statutorydetails.UserID = AppSessionVariables.GetSessionUserID(HttpContext);
                statutorydetails.TerminalID = AppSessionVariables.GetIPAddress(HttpContext);
                statutorydetails.FormId = AppSessionVariables.GetSessionFormID(HttpContext).ToString();
                var serviceResponse = _eSyaVendorAPIServices.HttpClientServices.PostAsJsonAsync<DO_ReturnParameter>("Vendor/InsertOrUpdateStatutorydetails", statutorydetails).Result;
                if (serviceResponse.Status)
                    return Json(serviceResponse.Data);
                else
                    return Json(new DO_ReturnParameter() { Status = false, Message = serviceResponse.Message });

            }
            catch (Exception ex)
            {
                return Json(new { Status = false, Message = ex.InnerException == null ? ex.Message.ToString() : ex.InnerException.Message });
            }
        }
        #endregion Vendor Statutory details

        #region Vendor Bank Details
        /// <summary>
        ///Get Vendor Bank Details for Grid
        /// </summary>
        [HttpPost]
        public JsonResult GetVendorBankdetailsByVendorcode(int vendorcode)
        {
            try
            {
                var parameter = "?vendorcode=" + vendorcode;
                var serviceResponse = _eSyaVendorAPIServices.HttpClientServices.GetAsync<List<DO_VendorBankdetails>>("Vendor/GetVendorBankdetailsByVendorcode" + parameter).Result;
                return Json(serviceResponse.Data);
            }
            catch (Exception ex)
            {
                return Json(new DO_ReturnParameter() { Status = false, Message = (ex.InnerException != null) ? ex.InnerException.Message : ex.Message });
            }

        }

        /// <summary>
        /// Insert or Update Vendor Bank details.
        /// </summary>
        [HttpPost]
        public JsonResult InsertOrUpdateVendorBankdetails(DO_VendorBankdetails bankdetails)
        {

            try
            {
                bankdetails.UserID = AppSessionVariables.GetSessionUserID(HttpContext);
                bankdetails.TerminalID = AppSessionVariables.GetIPAddress(HttpContext);
                bankdetails.FormId = AppSessionVariables.GetSessionFormID(HttpContext).ToString();
                if (bankdetails.IsEdit == 1)
                {
                    var serviceResponse = _eSyaVendorAPIServices.HttpClientServices.PostAsJsonAsync<DO_ReturnParameter>("Vendor/UpdateVendorBankdetails", bankdetails).Result;
                    if (serviceResponse.Status)
                        return Json(serviceResponse.Data);
                    else
                        return Json(new DO_ReturnParameter() { Status = false, Message = serviceResponse.Message });
                }
                else
                {
                    var serviceResponse = _eSyaVendorAPIServices.HttpClientServices.PostAsJsonAsync<DO_ReturnParameter>("Vendor/InsertVendorBankdetails", bankdetails).Result;
                    if (serviceResponse.Status)
                        return Json(serviceResponse.Data);
                    else
                        return Json(new DO_ReturnParameter() { Status = false, Message = serviceResponse.Message });
                }

            }
            catch (Exception ex)
            {
                return Json(new { Status = false, Message = ex.InnerException == null ? ex.Message.ToString() : ex.InnerException.Message });
            }
        }
        #endregion Vendor Bank Details
    }
}