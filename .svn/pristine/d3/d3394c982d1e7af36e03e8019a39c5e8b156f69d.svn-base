var isUpdate = 0;
var autoCompleteList = [];
//var Selected_rowID = 0;
//var denominationCurrecyCode;

//  Auto Complete Function
$(document).ready(function () {

    $.each(currency_symbols, function (key, value) {
        $('#txtCurrencyCode').append('<option value=' + key + '>' + key + '</option>');
        $('#txtSymbol').append('<option value=' + value + '>' + value + '</option>');
    });
    $('#txtCurrencyCode').selectpicker('refresh');
    $('#txtSymbol').selectpicker('refresh');

    $("#txtDecimalPlaces").keypress(function (event) {
        return fnIsNumber(event, this);
    });
    fnGridLoadCurrencyMaster;
});

// THE SCRIPT THAT CHECKS IF THE KEY PRESSED IS A NUMERIC OR DECIMAL VALUE.
function fnIsNumber(evt, element) {

    var charCode = (evt.which) ? evt.which : event.keyCode;
    if ((charCode !== 45 || $(element).val().indexOf('-') != -1) && // “-” CHECK MINUS, AND ONLY ONE.
        (charCode !== 46 || $(element).val().indexOf('.') != -1) && // “.” CHECK DOT, AND ONLY ONE.
        (charCode < 48 || charCode > 57))
        return false;
    return true;
}

function fnCurrency_onChange() {
    $('#txtSymbol').val(currency_symbols[$('#txtCurrencyCode').val()]);
    $('#txtSymbol').selectpicker('refresh');
}

$(document).ready(function () {

    $.ajaxSetup({
        async: false
    });

    fnGridLoadCurrencyMaster();
    $('#txtSearchCurrencyName').val('');

    //Auto Complete Function
    $("#txtSearchCurrencyName").autocomplete({

        source: autoCompleteList,
        select: function (event, ui) {

            $('#txtSearchCurrencyName').val(ui.item.value)
            var node = $.grep(autoCompleteList, function (item, j) {
                return (item.value == ui.item.value);
            });
            if (node[0]) {

                var searchPrefix = $("#txtSearchCurrencyName").val();
                var f = { groupOp: "OR", rules: [] };
                f.rules.push({ field: "CurrencyName", op: "cn", data: searchPrefix });
                $("#jqgCurrencyMaster")[0].p.search = f.rules.length > 0;
                $.extend($("#jqgCurrencyMaster")[0].p.postData, { filters: JSON.stringify(f) });
                $("#jqgCurrencyMaster").trigger("reloadGrid", [{ page: 1 }]);
            }
            return false;
        },
        minLength: 2
    })

        .data("ui-autocomplete")._renderItem = function (ul, item) {

            return $("<li>")
                .append("<a>" + item.label + "</a>")
                .appendTo(ul);
        };

    //Filling Currency Master Grid
    $('#txtSearchCurrencyName').on('change focusout', function () {

        var searchPrefix = $("#txtSearchCurrencyName").val();
        var f = { groupOp: "OR", rules: [] };
        f.rules.push({ field: "CurrencyName", op: "cn", data: searchPrefix });
        $("#jqgCurrencyMaster")[0].p.search = f.rules.length > 0;
        $.extend($("#jqgCurrencyMaster")[0].p.postData, { filters: JSON.stringify(f) });
        $("#jqgCurrencyMaster").trigger("reloadGrid", [{ current: true }]);
    });

    $(window).on("resize", function () {

        var $grid = $("#jqgCurrencyMaster"),
            newWidth = $grid.closest(".UserCreationcontainer").parent().width();
        $grid.jqGrid("setGridWidth", newWidth, true);
    });
});

function fnGridLoadCurrencyMaster() {

    $("#jqgCurrencyMaster").jqGrid({
        url: getBaseURL() + '/CurrencyMaster/GetCurrencyMaster',
        datatype: 'json',
        mtype: 'Get',
        ajaxGridOptions: { contentType: 'application/json; charset=utf-8' },
        async: false,
        jsonReader: { repeatitems: false, root: "rows", page: "page", total: "total", records: "records" },
        colNames: ["Currency Code", "Currency Name", "Symbol", "Decimal Places", "Show In Millions", "Symbol Suffix", "Decimal Portion Word", "Status", "Action"],
        colModel: [
            { name: "CurrencyCode", width: 40, align: 'left', editable: true, editoptions: { maxlength: 4 } },
            { name: "CurrencyName", width: 105, editable: true, align: 'left', editoptions: { maxlength: 25 } },
            { name: "Symbol", width: 50, editable: true, align: 'center', editoptions: { maxlength: 50 },hidden:true },
            { name: "DecimalPlaces", width: 40, editable: true, align: 'center', editoptions: { maxlength: 3 }, hidden: true, },
            { name: "ShowInMillions", editable: true, width: 45,hidden:true, align: 'center', resizable: false, edittype: "checkbox", formatter: 'checkbox', editoptions: { value: "true:false" } },
            { name: "SymbolSuffixToAmount", editable: true, width: 75, hidden:true, align: 'center', resizable: false, edittype: "checkbox", formatter: 'checkbox', editoptions: { value: "true:false" } },
            { name: "DecimalPortionWord", width: 55, editable: true, align: 'left', editoptions: { maxlength: 25 },hidden:true },
            { name: "ActiveStatus", editable: true, width: 40, align: 'left', edittype: "select", formatter: 'select', editoptions: { value: "true: Active;false: Inactive" } },
            
            {
                name: 'edit', search: false, align: 'left', width: 90, sortable: false, resizable: false,
                formatter: function (cellValue, options, rowdata, action) {
                    return '<button class="UploadQuotation btn-xs ui-button ui- widget ui-corner-all btn-jqgrid" title="View " onclick="return fnShowPopupCurrencyDenominationInformation(event);"><i class="fa fa-plus"></i> Add Denomination</button>' +
                        ' <button class="btn-xs ui-button ui-widget ui-corner-all btn-jqgrid" title="Edit" onclick="return fnEditCurrencyMaster(event)"><i class="fas fa-pencil-alt"></i> Edit </button>' +
                        '<button class="btn-xs ui-button ui-widget ui-corner-all btn-jqgrid" title="View" onclick="return fnViewCurrencyMaster(event)"><i class="far fa-file-alt"></i> View </button>';
                }
            },
        ],
        datatype: 'json',
        rowNum: 10,
        rowList: [10, 20, 50, 100],
        loadonce: true,
        ignoreCase: true,
        mtype: 'GET',
        multipleSearch: true,
        emptyrecords: "No records to view",
        pager: "#jqpCurrencyMaster",
        viewrecords: true,
        gridview: true,
        rownumbers: true,
        height: 'auto',
        width: 'auto',
        autowidth: false,
        rownumWidth: 40,

        onCellSelect: function (rowId, iCol, content, event) {
            CurrencyCode = $("#jqgCurrencyMaster").jqGrid('getCell', rowId, 'CurrencyCode');
        },
        loadComplete: function (data) {

            autoCompleteList = [];
            $(this).find(">tbody>tr.jqgrow:odd").addClass("myAltRowClassEven");
            $(this).find(">tbody>tr.jqgrow:even").addClass("myAltRowClassOdd");

            if (data != null) {
                $.each(data.rows, function (i, item) {
                    autoCompleteList.push({ label: item.CurrencyName, value: item.CurrencyName });
                });
            }
            $("#txtSearchCurrencyName").autocomplete({
                source: autoCompleteList
            });
        },
    }).
        jqGrid('navGrid', '#jqpCurrencyMaster', { add: false, edit: false, search: false, del: false, refresh: false }).jqGrid('navButtonAdd', '#jqpCurrencyMaster', {
            caption: '<span class="fa fa-plus" data-toggle="modal" data-whatever="something" style="padding-right:5px;padding-top:2px;padding-right: 2px; vertical-align:text-top;margin-left:8px;"></span> Add', buttonicon: 'none', id: 'btnGridAdd', position: 'first', onClickButton: fnGridAddCurrencyMaster
        }).
        jqGrid('navButtonAdd', '#jqpCurrencyMaster', {
            caption: '<span class="fa fa-sync" data-toggle="modal" data-whatever="something" style="padding-right:5px;padding-top:2px;padding-right: 2px; vertical-align:text-top;margin-left:8px;"></span> Refresh', buttonicon: 'none', id: 'btnGridRefresh', position: 'last', onClickButton: fnGridRefreshCurrencyMaster
        });
    $("#jqgCurrencyMaster").setGridParam({ datatype: 'json', page: 1 }).trigger('reloadGrid');
    $("#refresh_jqgCurrencyMaster").click(function () {
        $("#jqgCurrencyMaster").setGridParam({ datatype: 'json', page: 1 }).trigger('reloadGrid');
        $("#txtSearchCurrencyName").val('');
    });
}

function fnGridRefreshCurrencyMaster() {

    $("#jqgCurrencyMaster").setGridParam({ datatype: 'json', page: 1 }).trigger('reloadGrid');
    $('#txtSearchCurrencyName').val('');
}

function fnGridAddCurrencyMaster() {

    fnResetFieldsWithCMGrid();
    isUpdate = 0;
    $('#PopupCurrencyMaster').modal('show');
    $("#btnSaveCurrencyMaster").attr("disabled", false);
    $("#btnSaveCurrencyMaster").html("save");
    $('#PopupCurrencyMaster').find('.modal-title').text("Add Currency Details");
}

function fnResetFieldsWithCMGrid() {

    fnGridRefreshCurrencyMaster();
    $("#txtCurrencyCode").val("");
    $('#txtCurrencyCode').attr('disabled', false);
    $('#txtCurrencyCode').selectpicker('refresh');
    $("#txtCurrencyName").val("");
    $("#txtSymbol").val("");
    $('#txtSymbol').selectpicker('refresh');
    $("#txtDecimalPlaces").val("");
    $("#txtDecimalPortionWord").val("");
    $('#cboActiveStatus').selectpicker('refresh');
    $('#chkSymbolSuffixToAmount').parent().removeClass('is-checked');
    $('#chkShowInMilions').parent().removeClass('is-checked');
}

function fnEditCurrencyMaster(e) {
    var rowid = $(e.target).parents("tr.jqgrow").attr('id');
    var rowData = $('#jqgCurrencyMaster').jqGrid('getRowData', rowid);
    isUpdate = 1;
    $('#PopupCurrencyMaster').find('.modal-title').text("Update Currency Details");
    $('#PopupCurrencyMaster').modal('show');
    $("#btnSaveCurrencyMaster").html("Update");
    $('#cboActiveStatus').selectpicker('refresh');
    $('#txtCurrencyCode').attr('disabled', true);

    $('#txtCurrencyCode').val(rowData.CurrencyCode);
    $('#txtCurrencyCode').selectpicker('refresh');
    $('#txtCurrencyName').val(rowData.CurrencyName);
    $('#txtSymbol').val(rowData.Symbol);
    $('#txtSymbol').selectpicker('refresh');
    $('#txtDecimalPlaces').val(rowData.DecimalPlaces);

    var showInMillions = rowData.ShowInMillions;
    var symbolSuffixToAmount = rowData.SymbolSuffixToAmount;

    if (showInMillions === "true") {
        $("#chkShowInMilions").parent().addClass("is-checked");
    }
    else { $("#chkShowInMilions").parent().removeClass("is-checked"); }

    if (symbolSuffixToAmount === "true") {
        $("#chkSymbolSuffixToAmount").parent().addClass("is-checked");
    }
    else { $("#chkSymbolSuffixToAmount").parent().removeClass("is-checked"); }

    $('#txtDecimalPortionWord').val(rowData.DecimalPortionWord);
    $("#cboActiveStatus").val(rowData.ActiveStatus);
    $('#cboActiveStatus').selectpicker('refresh');
    $("#btnSaveCurrencyMaster").attr("disabled", false);
}

function fnSaveCurrencyMaster() {
   

    if ($("#txtCurrencyName").val() == "" || $("#txtCurrencyName").val() == null) {
        toastr.warning("Please Enter Currency Name.");
        return;
    }

    if ($("#txtCurrencyName").val().length > 25) {
        toastr.warning("Currency Name should not be exceeds 25 characters.");
        return;
    }

    if ($("#txtCurrencyCode").val() == "" || $("#txtCurrencyCode").val() == null) {
        toastr.warning("Please Enter Currency Code.");
        return;
    }

    if ($("#txtCurrencyCode").val().length > 4) {
        toastr.warning("Currency Code should not be exceeds 4 characters");
        return;
    }

    if ($("#txtSymbol").val() == "" || $("#txtSymbol").val() == null) {
        toastr.warning("Please Enter Symbol.");
        return;
    }

    if ($("#txtDecimalPlaces").val() == "" || $("#txtDecimalPlaces").val() == null) {
        toastr.warning("Please Enter Decimal Places.");
        return;
    }

    if ($("#txtDecimalPortionWord").val() == "" || $("#txtDecimalPortionWord").val() == null) {
        toastr.warning("Please Enter Decimal Portion Word.");
        return;
    }

    var showInMillions = $("#chkShowInMilions").is(":checked");
    var symbolSuffix = $("#chkSymbolSuffixToAmount").is(":checked");

    if (showInMillions) {
        $("#chkShowInMilions").parent().addClass("is-checked");
    }

    if (symbolSuffix) {
        $("#chkSymbolSuffixToAmount").parent().addClass("is-checked");
    }

    var obj = {
        CurrencyCode: $("#txtCurrencyCode").val(),
        CurrencyName: $("#txtCurrencyName").val(),
        Symbol: $("#txtSymbol").val(),
        DecimalPlaces: $("#txtDecimalPlaces").val(),
        ShowInMillions: showInMillions,
        SymbolSuffixToAmount: symbolSuffix,
        DecimalPortionWord: $("#txtDecimalPortionWord").val(),
        ActiveStatus: $("#cboActiveStatus").val()
    };

    $("#btnSaveCurrencyMaster").attr("disabled", true);

    var URL = getBaseURL() + '/CurrencyMaster/InsertIntoCurrencyMaster';
    if (isUpdate == 1)
        URL = getBaseURL() + '/CurrencyMaster/UpdateCurrencyMaster';

    $.ajax({
        url: URL,
        type: 'post',
        datatype: 'json',
        contentType: 'application/json; charset=utf-8',
        data: JSON.stringify(obj),
        success: function (response) {

            if (response.Status) {
                toastr.success(response.Message);
                $("#btnSaveCurrencyMaster").html('<i class="fa fa-spinner fa-spin"></i> wait');
                fnclosePopUpCurrencyMaster();
                fnResetFieldsWithCMGrid();
            }
            else {
                toastr.error(response.Message);
                $("#btnSaveCurrencyMaster").attr("disabled", false);
            }

            function fnclosePopUpCurrencyMaster() {
                setTimeout(function () {
                    $("#PopupCurrencyMaster").modal('hide');
                    $("#btnSaveCurrencyMaster").attr("disabled", false);
                }, 3000);
            }
        },
        error: function (error) {
            toastr.error(error.statusText);
            $("#btnSaveCurrencyMaster").attr("disabled", false);
        }
    });
}

function fnViewCurrencyMaster(e) {
    var rowid = $(e.target).parents("tr.jqgrow").attr('id');
    var rowData = $('#jqgCurrencyMaster').jqGrid('getRowData', rowid);
    $('#PopupCurrencyMaster').find('.modal-title').text("View Currency Details");
    $('#PopupCurrencyMaster').modal('show');
    $("#btnSaveCurrencyMaster").hide();
    
    $('#txtCurrencyCode').val(rowData.CurrencyCode);
    $('#txtCurrencyCode').selectpicker('refresh');
    $('#txtCurrencyName').val(rowData.CurrencyName);
    $('#txtSymbol').val(rowData.Symbol);
    $('#txtSymbol').selectpicker('refresh');
    $('#txtDecimalPlaces').val(rowData.DecimalPlaces);

    var showInMillions = rowData.ShowInMillions;
    var symbolSuffixToAmount = rowData.SymbolSuffixToAmount;

    if (showInMillions === "true") {
        $("#chkShowInMilions").parent().addClass("is-checked");
    }
    else { $("#chkShowInMilions").parent().removeClass("is-checked"); }

    if (symbolSuffixToAmount === "true") {
        $("#chkSymbolSuffixToAmount").parent().addClass("is-checked");
    }
    else { $("#chkSymbolSuffixToAmount").parent().removeClass("is-checked"); }

    $('#txtDecimalPortionWord').val(rowData.DecimalPortionWord);
    $("#cboActiveStatus").val(rowData.ActiveStatus);
    $('#cboActiveStatus').selectpicker('refresh');
    $("#btnSaveCurrencyMaster").attr("disabled", false);
    $("#PopupCurrencyMaster").on('hidden.bs.modal', function () {
        $("#btnSaveCurrencyMaster").show();
    });
}

function AllowOnlyNumbers(e) {
    e = (e) ? e : window.event;
    var clipboardData = e.clipboardData ? e.clipboardData : window.clipboardData;
    var key = e.keyCode ? e.keyCode : e.which ? e.which : e.charCode;
    var str = (e.type && e.type == "paste") ? clipboardData.getData('Text') : String.fromCharCode(key);
    return (/^\d+$/.test(str));
}
// currency Denomination Information

function fnShowPopupCurrencyDenominationInformation(e) {

    var rowid = $(e.target).parents("tr.jqgrow").attr('id');
    var rowData = $('#jqgCurrencyMaster').getRowData(rowid);
    $("#PopupCurrencyDenominationInformation").modal(true);
    //for first grid
    $("#txtCurrencyCode").text(rowData.CurrencyCode);
    ////for second grid
    $("#lblCurrencyName").text(rowData.CurrencyName);
    $("#lblCurrencyCode").text(rowData.CurrencyCode);
    //denominationCurrecyCode = rowData.CurrencyCode;
    fnGridLoadCurrencyDenomitationInformation();
}

function fnGridLoadCurrencyDenomitationInformation() {
  

    var currencyCode = $('#txtCurrencyCode').text();

    $('#jqgDenominationSequence').jqGrid('GridUnload');
    $("#jqgDenominationSequence").jqGrid({
        url: getBaseURL() + '/CurrencyMaster/GetCurrencyDenominationInfoByCurrencyCode?CurrencyCode=' + currencyCode,
        datatype: 'json',
        mtype: 'Post',
        ajaxGridOptions: { contentType: 'application/json; charset=utf-8' },
        jsonReader: { repeatitems: false, root: "rows", page: "page", total: "total", records: "records" },
        colNames: ["Currency Code", "Denomination ", "Denomination Sequence", "Effective Date", "Status", "Delete"],
        colModel: [
            { name: "CurrencyCode", width: 150, editable: true, align: 'left', editoptions: { maxlength: 4 }, hidden: true },
            { name: "Denomination", width: 160, editable: true, align: 'left', editoptions: { maxlength: 10, onkeypress: 'return fnOnlyDigits(event)' } },
            { name: "Sequence", width: 200, editable: true, align: 'left', editoptions: { maxlength: 10, onkeypress: 'return fnOnlyDigits(event)' } },
            {
                name: "EffectiveDate", editable: true, width: 150, align: 'left', resizable: false, formatter: 'date',
                editoptions: {
                    size: 10, maxlengh: 10,
                    dataInit: function (element) {
                        $(element).datepicker({ minDate: 0 });
                    }
                }
            },
            { name: "ActiveStatus", editable: true, width: 120, edittype: "select", align: 'left', formatter: 'select', editoptions: { value: "true:Active;false:Inactive" } },
            {
                name: 'delete', search: false, align: 'left', width: 100, sortable: false, resizable: false,
                formatter: function (cellValue, options, rowdata, action) {
                    //return "<a href='javascript:fnDeleteDenominationInformation(" + rowdata.CurrencyCode + "," + rowdata.Denomination + ")' class='ui-icon ui-icon-closethick'></a>";
                    return '<button class="btn-xs ui-button ui-widget ui-corner-all btn-jqgrid cancel-button"  onclick="return fnDeleteDenominationInformation(event)"><i class="far fa-trash-alt"></i> Delete </button>'
                }
            },
        ],
        rowNum: 10,
        rowList: [10, 20,30, 50,100],
        emptyrecords: "No records to Veiw",
        pager: "#jqpDenominationSequence",
        viewrecords: true,
        gridview: true,
        rownumbers: true,
        height: 'auto',
        width: 'auto',
        autowidth: true,
        shrinkToFit: true,
        forceFit: true,
        loadonce: true,
        editurl: getBaseURL() + '/CurrencyMaster/InsertUpdateCurrencyDenominationInformation?CCode=' + currencyCode,
        ajaxRowOptions: {
            type: "POST",
            contentType: "application/json",
            dataType: "json"
        },
        serializeRowData: function (postData) {
            return JSON.stringify(postData);
        },
        extraparam: {
            CCode: $('#txtCurrencyCode').text()
        },
        ondblClickRow: function (rowid) {
            $("#jqgDenominationSequence").trigger('click');
        },
    }).jqGrid('navGrid', '#jqpDenominationSequence', { add: false, edit: false, search: false, del: false, refresh: false });
    $("#jqgDenominationSequence").jqGrid('inlineNav', '#jqpDenominationSequence',
        {
            edit: true,
            editicon: " fa fa-pen",
            edittext: " Edit",
            add: true,
            addicon: "fa fa-plus",
            addtext: " Add",
            save: true,
            savetext: " Save",
            saveicon: "fa fa-save",
            cancelicon: "fa fa-ban",
            canceltext: " Cancel",
            editParams: {
                keys: false,
                oneditfunc: function (formid) {

                    $("#" + formid + "_Denomination").prop('disabled', true);
                   
                },
                url: null,
                successfunc: function (result) {
                    
                    
                    var res = JSON.stringify(result);
                    var response = JSON.parse(res);
                    var r = response.responseText;
                    var p = JSON.parse(r)
                    if (p.Status) {
                        toastr.success(p.Message);
                    }
                    else {
                        toastr.error(p.Message);
                    }
                    $("#jqgDenominationSequence").setGridParam({ datatype: 'json', page: 1 }).trigger('reloadGrid');
                },
                aftersavefun: null,
                errorfun: null,
                afterrestorefun: null,
                restoreAfterError: true,
                mtype: "POST",
            },
            addParams: {
                useDefValues: true,
                position: "last",
                addRowParams: {
                    keys: true,
                    oneditfunc: null,
                    successfunc: function (result) {
                      

                        var res = JSON.stringify(result);
                        var response = JSON.parse(res);
                        var r = response.responseText;
                        var p = JSON.parse(r)
                        if (p.Status) {
                            toastr.success(p.Message);
                        }
                        else {
                            toastr.error(p.Message);
                        }
                        $("#jqgDenominationSequence").setGridParam({ datatype: 'json', page: 1 }).trigger('reloadGrid');
                    },
                }
            },
        });
}

function fnOnlyDigits(e) {
    if ((e.which < 48 || e.which > 57)) {
        if (e.which == 8 || e.which == 0) {
            return true;
        }
        else {
            return false;
        }
    }
}

function fnDeleteDenominationInformation(e) {
   

    var rowid = $(e.target).parents("tr.jqgrow").attr('id');
    var rowData = $('#jqgDenominationSequence').jqGrid('getRowData', rowid);
    var cCode = rowData.CurrencyCode;
    var cDenomination = rowData.Denomination;
    bootbox.confirm({
        title: 'Currency Denomination',
        message: "Are you sure you want to delete ?",
        buttons: {
            confirm: {
                label: 'Yes',
                className: 'mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect mdl-button--accent primary-button'
            },
            cancel: {
                label: 'No',
                className: 'mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect  cancel-button cancel-button'
            }
        },
        callback: function (result) {
            if (result) {
                if ((cCode == null || cCode == undefined || cCode == "0" || cCode == '')
                    || (cDenomination == null || cDenomination == undefined || cDenomination == "0" || cDenomination == '')) {
                    alert("Could not Delete");
                    return false;
                }
                $.ajax({
                    type: 'POST',
                    url: getBaseURL() + '/CurrencyMaster/DeleteCurrencyDenominationInformation',
                    data: {
                        currencyCode: cCode,
                        denomination: cDenomination,
                    },
                    success: function (response) {
                        
                        if (response.Status) {
                            toastr.success(response.Message);
                            fnGridLoadCurrencyDenomitationInformation();
                        }
                        else {
                            toastr.error(response.Message);
                        }
                        $("#jqvDenominationSequence").setGridParam({ datatype: 'json' }).trigger('reloadGrid');
                    },
                    error: function (response) {
                        toastr.error("Couldn't Delete");
                    }
                });
            }
        }
    });
}

function fnEditRow(id) {
    if (id && id !== lastSelection) {
        var grid = $("#jqvDenominationSequence");
        grid.jqGrid('restoreRow', lastSelection);
        grid.jqGrid('editRow', id, { keys: true });
        lastSelection = id;
    }
}

var currency_symbols = {
    'AED': 'د.إ',
    'AFN': '؋',
    'ALL': 'L',
    'AMD': '֏',
    'ANG': 'ƒ',
    'AOA': 'Kz',
    'ARS': '$',
    'AUD': '$',
    'AWG': 'ƒ',
    'AZN': '₼',
    'BAM': 'KM',
    'BBD': '$',
    'BDT': '৳',
    'BGN': 'лв',
    'BHD': '.د.ب',
    'BIF': 'FBu',
    'BMD': '$',
    'BND': '$',
    'BOB': '$b',
    'BRL': 'R$',
    'BSD': '$',
    'BTC': '฿',
    'BTN': 'Nu.',
    'BWP': 'P',
    'BYR': 'p.',
    'BZD': 'BZ$',
    'CAD': '$',
    'CDF': 'FC',
    'CHF': 'CHF',
    'CLP': '$',
    'CNY': '¥',
    'COP': '$',
    'CRC': '₡',
    'CUC': '$',
    'CUP': '₱',
    'CVE': '$',
    'CZK': 'Kč',
    'DJF': 'Fdj',
    'DKK': 'kr',
    'DOP': 'RD$',
    'DZD': 'دج',
    'EEK': 'kr',
    'EGP': 'EGP',
    'ERN': 'Nfk',
    'ETB': 'Br',
    'ETH': 'Ξ',
    'EUR': '€',
    'FJD': '$',
    'FKP': '£',
    'GBP': '£',
    'GEL': '₾',
    'GGP': '£',
    'GHC': '₵',
    'GHS': 'GH₵',
    'GIP': '£',
    'GMD': 'D',
    'GNF': 'FG',
    'GTQ': 'Q',
    'GYD': '$',
    'HKD': '$',
    'HNL': 'L',
    'HRK': 'kn',
    'HTG': 'G',
    'HUF': 'Ft',
    'IDR': 'Rp',
    'ILS': '₪',
    'IMP': '£',
    'INR': '₹',
    'IQD': 'ع.د',
    'IRR': '﷼',
    'ISK': 'kr',
    'JEP': '£',
    'JMD': 'J$',
    'JOD': 'JD',
    'JPY': '¥',
    'KES': 'KSh',
    'KGS': 'лв',
    'KHR': '៛',
    'KMF': 'CF',
    'KPW': '₩',
    'KRW': '₩',
    'KWD': 'KD',
    'KYD': '$',
    'KZT': 'лв',
    'LAK': '₭',
    'LBP': '£',
    'LKR': '₨',
    'LRD': '$',
    'LSL': 'M',
    'LTC': 'Ł',
    'LTL': 'Lt',
    'LVL': 'Ls',
    'LYD': 'LD',
    'MAD': 'MAD',
    'MDL': 'lei',
    'MGA': 'Ar',
    'MKD': 'ден',
    'MMK': 'K',
    'MNT': '₮',
    'MOP': 'MOP$',
    'MRO': 'UM',
    'MUR': '₨',
    'MVR': 'Rf',
    'MWK': 'MK',
    'MXN': '$',
    'MYR': 'RM',
    'MZN': 'MT',
    'NAD': 'N$',
    'NGN': '₦',
    'NIO': 'C$',
    'NOK': 'kr',
    'NPR': '₨',
    'NZD': '$',
    'OMR': '﷼',
    'PAB': 'B/.',
    'PEN': 'S/.',
    'PGK': 'K',
    'PHP': '₱',
    'PKR': '₨',
    'PLN': 'zł',
    'PYG': 'Gs',
    'QAR': '﷼',
    'RMB': '￥',
    'RON': 'lei',
    'RSD': 'Дин.',
    'RUB': '₽',
    'RWF': 'R₣',
    'SAR': '﷼',
    'SBD': '$',
    'SCR': '₨',
    'SDG': 'ج.س.',
    'SEK': 'kr',
    'SGD': '$',
    'SHP': '£',
    'SLL': 'Le',
    'SOS': 'S',
    'SRD': '$',
    'SSP': '£',
    'STD': 'Db',
    'SVC': '$',
    'SYP': '£',
    'SZL': 'E',
    'THB': '฿',
    'TJS': 'SM',
    'TMT': 'T',
    'TND': 'د.ت',
    'TOP': 'T$',
    'TRL': '₤',
    'TRY': '₺',
    'TTD': 'TT$',
    'TVD': '$',
    'TWD': 'NT$',
    'TZS': 'TSh',
    'UAH': '₴',
    'UGX': 'USh',
    'USD': '$',
    'UYU': '$U',
    'UZS': 'лв',
    'VEF': 'Bs',
    'VND': '₫',
    'VUV': 'VT',
    'WST': 'WS$',
    'XAF': 'FCFA',
    'XBT': 'Ƀ',
    'XCD': '$',
    'XOF': 'CFA',
    'XPF': '₣',
    'YER': '﷼',
    'ZAR': 'R',
    'ZWD': 'Z$'
};