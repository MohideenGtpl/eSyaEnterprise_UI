using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Claims;
using System.Threading.Tasks;
using eSyaEnterprise_UI.DataServices;
using eSyaEnterprise_UI.Extension;
using eSyaEnterprise_UI.Models;
using eSyaEnterprise_UI.Utility;
using Microsoft.AspNetCore.Authentication;
using Microsoft.AspNetCore.Authentication.Cookies;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Localization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using Newtonsoft.Json;

namespace eSyaEnterprise_UI.Controllers
{
    [AllowAnonymous]
    public class AccountController : Controller
    {
        private SignInManager<ApplicationUser> signInManager;
        private readonly IeSyaGatewayServices _eSyaGatewayServices;

        public AccountController(SignInManager<ApplicationUser> signinMgr, IeSyaGatewayServices eSyaGatewayServices)
        {
            signInManager = signinMgr;
            _eSyaGatewayServices = eSyaGatewayServices;
        }

        public IActionResult Index()
        {
            return View();
        }

        // [HttpPost]
        public async Task<IActionResult> Login(LoginViewModel model)
        {
            var isValid = (model.UserName == "esya" && model.Password == "esya@123");
            if (isValid)
            {
                AppSessionVariables.SetSessionUserID(HttpContext, 0);
                AppSessionVariables.SetSessionBusinessKey(HttpContext, 0);
                AppSessionVariables.SetSessionFinancialYear(HttpContext, 0);

                var identity = new ClaimsIdentity(CookieAuthenticationDefaults.AuthenticationScheme, ClaimTypes.Name, ClaimTypes.Role);
                identity.AddClaim(new Claim(ClaimTypes.NameIdentifier, model.UserName));
                identity.AddClaim(new Claim(ClaimTypes.Name, model.UserName));
                var principal = new ClaimsPrincipal(identity);
                await HttpContext.SignInAsync(CookieAuthenticationDefaults.AuthenticationScheme, principal, new AuthenticationProperties { IsPersistent = model.RememberMe });


                return new RedirectToActionResult("Index", "Home", null);
            }

            if (string.IsNullOrEmpty(model.UserName))
            {
                //ModelState.AddModelError("", "please enter user name");
                return new RedirectToActionResult("Index", "Account", new { });
            }
            if (string.IsNullOrEmpty(model.Password))
            {
                //ModelState.AddModelError("", "please enter password");
                return new RedirectToActionResult("Index", "Account", new { });
            }

            if (ModelState.IsValid)
            {
                var obj = new { LoginID = model.UserName, model.Password };
                var serviceResponse = await _eSyaGatewayServices.HttpClientServices.PostAsJsonAsync<DO_UserAccount>("UserAccount/ValidateUserPassword", obj);
                if (serviceResponse.Status)
                {
                    if (!serviceResponse.Data.IsSucceeded)
                    {
                        ModelState.AddModelError("", serviceResponse.Data.Message);
                        return View("Index");
                    }
                    var identity = new ClaimsIdentity(CookieAuthenticationDefaults.AuthenticationScheme, ClaimTypes.Name, ClaimTypes.Role);
                    identity.AddClaim(new Claim(ClaimTypes.NameIdentifier, model.UserName));
                    identity.AddClaim(new Claim(ClaimTypes.Name, model.UserName));
                    var principal = new ClaimsPrincipal(identity);
                    await HttpContext.SignInAsync(CookieAuthenticationDefaults.AuthenticationScheme, principal, new AuthenticationProperties { IsPersistent = model.RememberMe });

                    var l_b = serviceResponse.Data.l_BusinessKey
                                                  .Select(b => new SelectListItem
                                                  {
                                                      Value = b.Key.ToString(),
                                                      Text = b.Value,
                                                      Selected = serviceResponse.Data.l_BusinessKey.Count() == 1

                                                  }).ToList();

                    var l_f = serviceResponse.Data.l_FinancialYear
                                                   .Select(b => new SelectListItem
                                                   {
                                                       Value = b.ToString(),
                                                       Text = b.ToString(),
                                                       Selected = b == serviceResponse.Data.l_FinancialYear.FirstOrDefault()
                                                   }).ToList();

                    TempData.Set("l_BusinessKey", l_b);
                    TempData.Set("l_FinancialYear", l_f);

                    AppSessionVariables.SetSessionUserID(HttpContext, serviceResponse.Data.UserID);
                    AppSessionVariables.SetSessionUserBusinessKeyLink(HttpContext, serviceResponse.Data.l_BusinessKey);


                    return new RedirectToActionResult("BusinessLocation", "Account", null);
                }
                else
                {
                    ModelState.AddModelError("", "Internal error");
                    return View("Index");
                }
            }
            else
            {
                return View("Index");
            }
        }

        public JsonResult SendOTP(string mobileNumber)
        {
            try
            {
                var serviceResponse = _eSyaGatewayServices.HttpClientServices.GetAsync<DO_UserAccount>("UserAccount/ValidateUserMobile?mobileNumber=" + mobileNumber).Result;

                if (serviceResponse.Status)
                {
                    if (serviceResponse.Data.IsSucceeded)
                    {
                        DO_SmsParameter sms = new DO_SmsParameter();
                        sms.FormID = AppSessionVariables.GetSessionFormID(HttpContext);
                        sms.OTP = serviceResponse.Data.OTP;
                        sms.UserID = serviceResponse.Data.UserID;
                        var sr_SMS = _eSyaGatewayServices.HttpClientServices.PostAsJsonAsync<DO_SmsParameter>("SmsSender/SendSmsForForm", sms).Result;
                        if (sr_SMS.Status)
                        {
                            return Json(new { Status = true, serviceResponse.Data.StatusCode });
                        }
                        else
                        {
                            return Json(new { Status = false, StatusCode = "500" });
                        }
                    }
                    else
                    {
                        return Json(new { Status = false, serviceResponse.Data.StatusCode });
                    }
                }
                else
                {
                    return Json(new { Status = false, StatusCode = "500" });
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public JsonResult ValidateOTP(string mobileNumber, string OTP)
        {
            try
            {
                var obj = new { mobileNumber, otp = OTP };
                var serviceResponse = _eSyaGatewayServices.HttpClientServices.PostAsJsonAsync<DO_UserAccount>("UserAccount/ValidateUserOTP", obj).Result;
                if (serviceResponse.Status)
                {
                    if (!serviceResponse.Data.IsSucceeded)
                    {
                        return Json(new { Status = false, serviceResponse.Data.Message });
                    }
                    else
                    {
                        return Json(new { Status = true });
                    }
                }
                else
                {
                    return Json(new { Status = false, Message = "Internal Error" });
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        //[HttpPost]
        public async Task<IActionResult> MobileLogin(LoginViewModel model)
        {
            if (!string.IsNullOrEmpty(model.PhoneNumber) && !string.IsNullOrEmpty(model.OTP))
            {
                var obj = new { mobileNumber = model.PhoneNumber, otp = model.OTP };
                var serviceResponse = _eSyaGatewayServices.HttpClientServices.PostAsJsonAsync<DO_UserAccount>("UserAccount/ValidateUserOTP", obj).Result;
                if (serviceResponse.Status)
                {
                    if (!serviceResponse.Data.IsSucceeded)
                    {
                        ModelState.AddModelError("", serviceResponse.Data.Message);
                        return View("Index");
                    }
                    model.UserName = serviceResponse.Data.LoginID;

                    var identity = new ClaimsIdentity(CookieAuthenticationDefaults.AuthenticationScheme, ClaimTypes.Name, ClaimTypes.Role);
                    identity.AddClaim(new Claim(ClaimTypes.NameIdentifier, model.UserName));
                    identity.AddClaim(new Claim(ClaimTypes.Name, model.UserName));
                    var principal = new ClaimsPrincipal(identity);
                    await HttpContext.SignInAsync(CookieAuthenticationDefaults.AuthenticationScheme, principal, new AuthenticationProperties { IsPersistent = model.RememberMe });

                    var l_b = serviceResponse.Data.l_BusinessKey
                                                 .Select(b => new SelectListItem
                                                 {
                                                     Value = b.Key.ToString(),
                                                     Text = b.Value,
                                                     Selected = serviceResponse.Data.l_BusinessKey.Count() == 1

                                                 }).ToList();

                    var l_f = serviceResponse.Data.l_FinancialYear
                                                   .Select(b => new SelectListItem
                                                   {
                                                       Value = b.ToString(),
                                                       Text = b.ToString(),
                                                       Selected = b == serviceResponse.Data.l_FinancialYear.FirstOrDefault()
                                                   }).ToList();

                    TempData.Set("l_BusinessKey", l_b);
                    TempData.Set("l_FinancialYear", l_f);

                    AppSessionVariables.SetSessionUserID(HttpContext, serviceResponse.Data.UserID);
                    AppSessionVariables.SetSessionUserBusinessKeyLink(HttpContext, serviceResponse.Data.l_BusinessKey);

                    return new RedirectToActionResult("BusinessLocation", "Account", new { });
                }
                else
                {
                    ModelState.AddModelError("", "Internal error");
                    return View("Index");
                }
            }
            else
            {
                return View("Index");
            }
        }


        public IActionResult BusinessLocation()
        {
            LoginViewModel model = new LoginViewModel();
            model.l_BusinessKey = JsonConvert.DeserializeObject<List<SelectListItem>>(TempData["l_BusinessKey"].ToString());
            model.l_FinancialYear = JsonConvert.DeserializeObject<List<SelectListItem>>(TempData["l_FinancialYear"].ToString());

            if (model.l_BusinessKey.Where(w => w.Selected).Count() > 0)
                model.BusinessKey = Convert.ToInt32(model.l_BusinessKey.Where(w => w.Selected).FirstOrDefault().Value);

            if (model.l_FinancialYear.Where(w => w.Selected).Count() > 0)
                model.FinancialYear = Convert.ToInt32(model.l_FinancialYear.Where(w => w.Selected).FirstOrDefault().Value);

            ViewBag.BK = model.l_BusinessKey;

            TempData.Keep();

            return View(model);
        }

        public IActionResult Confirmation(LoginViewModel model)
        {
            if (Convert.ToInt32(model.BusinessKey) > 0 && Convert.ToInt32(model.FinancialYear) > 0)
            {
                AppSessionVariables.SetSessionBusinessKey(HttpContext, Convert.ToInt32(model.BusinessKey));
                AppSessionVariables.SetSessionFinancialYear(HttpContext, Convert.ToInt32(model.FinancialYear));

                return RedirectToAction("Index", "Home");
            }
            else
            {
                model.l_BusinessKey = JsonConvert.DeserializeObject<List<SelectListItem>>(TempData["l_BusinessKey"].ToString());
                model.l_FinancialYear = JsonConvert.DeserializeObject<List<SelectListItem>>(TempData["l_FinancialYear"].ToString());

                if (model.l_BusinessKey.Where(w => w.Selected).Count() > 0)
                    model.BusinessKey = Convert.ToInt32(model.l_BusinessKey.Where(w => w.Selected).FirstOrDefault().Value);

                if (model.l_FinancialYear.Where(w => w.Selected).Count() > 0)
                    model.FinancialYear = Convert.ToInt32(model.l_FinancialYear.Where(w => w.Selected).FirstOrDefault().Value);

                // ModelState.AddModelError("", "please check user input");
                TempData.Keep();
                return View("BusinessLocation", model);
            }
        }

        public IActionResult AccessDenied()
        {
            return View();
        }

        public IActionResult GetUserID()
        {
            return View();
        }
        public IActionResult GetPassword()
        {
            return View();
        }
        public IActionResult CreatePassword()
        {
            return View();
        }

        [HttpPost]
        public IActionResult SetLanguage(string culture, string returnUrl)
        {
            Response.Cookies.Append(
                CookieRequestCultureProvider.DefaultCookieName,
                CookieRequestCultureProvider.MakeCookieValue(new RequestCulture(culture)),
            new CookieOptions { Expires = DateTimeOffset.UtcNow.AddDays(1) }
            );

            return LocalRedirect(returnUrl);
        }

        [HttpPost]
        public IActionResult SetBusinessLocation(int businessKey, string returnUrl)
        {
            AppSessionVariables.SetSessionBusinessKey(HttpContext, businessKey);
            return LocalRedirect(returnUrl);
        }

        private async Task SignInUser(string username, bool isPersistent)
        {
            // Initialization.  
            var claims = new List<Claim>();

            try
            {
                // Setting  
                claims.Add(new Claim(ClaimTypes.Name, username));
                var claimIdenties = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
                var claimPrincipal = new ClaimsPrincipal(claimIdenties);
                var authenticationManager = Request.HttpContext;

                // Sign In.  
                await authenticationManager.SignInAsync(CookieAuthenticationDefaults.AuthenticationScheme, claimPrincipal, new AuthenticationProperties() { IsPersistent = isPersistent });
            }
            catch (Exception ex)
            {
                // Info  
                throw ex;
            }
        }

        public async Task<IActionResult> OnPostLogOff()
        {
            try
            {
                // Setting.  
                var authenticationManager = Request.HttpContext;
                // Sign Out.  
                await authenticationManager.SignOutAsync(CookieAuthenticationDefaults.AuthenticationScheme);
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return this.RedirectToPage("/Login");
        }

        public IActionResult Logout()
        {
            HttpContext.Session.Clear();
            HttpContext.SignOutAsync();
            return View("Index");
        }

    }
}