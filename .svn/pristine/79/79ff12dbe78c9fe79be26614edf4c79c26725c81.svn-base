using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.Net.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Newtonsoft.Json;
using eSyaEnterprise_UI.Utility;
using eSyaEnterprise_UI.Areas.Config.Models;
using eSyaEnterprise_UI.Areas.eSyaFA.Models;
using eSyaEnterprise_UI.Models;

namespace eSyaEnterprise_UI.Areas.eSyaFA.Controllers
{
    
    public class FixedAssetsController : Controller
    {
        ESyaWebAPI _eSyaWebAPI = new ESyaWebAPI();
        ESyaFA_WebAPI _eSyaFAWebAPI = new ESyaFA_WebAPI();

        #region Asset Group
        [Area("eSyaFA")]
        public IActionResult V_100_00()
        {
            var client = _eSyaWebAPI.InitializeClient(HttpContext.RequestServices.GetRequiredService<IConfiguration>());
            HttpResponseMessage ag_response = client.GetAsync("ConfigMasterData/GetApplicationCodesByCodeType?codeType=" + CodeTypeValues.AssetGroup).Result;
            string agdata = ag_response.Content.ReadAsStringAsync().Result;
            List<DO_ApplicationCodes> agapp_codes = JsonConvert.DeserializeObject<List<DO_ApplicationCodes>>(agdata);
            ViewBag.AGappcodes = agapp_codes;

            HttpResponseMessage asg_response = client.GetAsync("ConfigMasterData/GetApplicationCodesByCodeType?codeType=" + CodeTypeValues.AssetSubGroup).Result;
            string asgdata = asg_response.Content.ReadAsStringAsync().Result;
            List<DO_ApplicationCodes> asgapp_codes = JsonConvert.DeserializeObject<List<DO_ApplicationCodes>>(asgdata);
            ViewBag.ASGappcodes = asgapp_codes;

            return View();
        }

        /// <summary>
        /// Insert or Update Application Codes 
        /// </summary>
        [HttpPost]
        public JsonResult InsertAssetGroup(DO_AssetGroup a_grp)
        {

            try
            {
                var client = _eSyaFAWebAPI.InitializeClient(HttpContext.RequestServices.GetRequiredService<IConfiguration>());
                a_grp.UserID = AppSessionVariables.GetSessionUserID(HttpContext);
                a_grp.TerminalID = AppSessionVariables.GetIPAddress(HttpContext);
                a_grp.ActiveStatus = true;


                HttpResponseMessage Insertresponse = client.PostAsJsonAsync<DO_AssetGroup>("AssetGroup/InsertIntoAssetGroup", a_grp).Result;
                string resp = Insertresponse.Content.ReadAsStringAsync().Result;
                var result = JsonConvert.DeserializeObject<DO_ReturnParameter>(resp);
                return Json(result);
            }
            catch (Exception ex)
            {
                return Json(new { Status = false, Message = ex.InnerException == null ? ex.Message.ToString() : ex.InnerException.Message });
            }
        }

        /// <summary>
        ///Get Asset Group and Sub Group for Tree View
        /// </summary>
        [Produces("application/json")]
        public IActionResult GetAssetGroupAndSubGroup()
        {

            try
            {
                var client = _eSyaFAWebAPI.InitializeClient(HttpContext.RequestServices.GetRequiredService<IConfiguration>());
                HttpResponseMessage response = client.GetAsync("AssetGroup/GetAssetGroupAndSubGroup").Result;
                string stringData = response.Content.ReadAsStringAsync().Result;
                List<DO_AssetGroup> data = JsonConvert.DeserializeObject<List<DO_AssetGroup>>(stringData);

                List<jsTreeObject> AssetGroupTree = new List<jsTreeObject>();

                jsTreeObject obj;
                obj = new jsTreeObject();

                obj.id = "H0";
                obj.parent = "#";
                obj.text = "Fixed Asset";
                obj.state = new stateObject { opened = true, selected = false };

                AssetGroupTree.Add(obj);

                foreach (string lst in data.Select(x => x.AssetGroup).Distinct().ToList())
                {
                    obj = new jsTreeObject();

                    obj.id = lst;
                    obj.parent = "H0";
                    obj.text = lst;
                    obj.state = new stateObject { opened = false, selected = false };

                    AssetGroupTree.Add(obj);
                }

                foreach (DO_AssetGroup lst in data)
                {
                    obj = new jsTreeObject();

                    obj.id = lst.AssetSubGroupID.ToString();
                    obj.parent = lst.AssetGroup;
                    obj.text = lst.AssetSubGroup;
                    //obj.icon = "/images/jsTree/fileIcon.png";
                    obj.state = new stateObject { opened = false, selected = false };

                    AssetGroupTree.Add(obj);
                }

                return Json(AssetGroupTree);
            }
            catch (Exception ex)
            {
                return Json(new DO_ReturnParameter() { Status = false, Message = (ex.InnerException != null) ? ex.InnerException.Message : ex.Message });
            }

        }
        #endregion Asset Group

        #region Depreciation Method
        [Area("eSyaFA")]
        public IActionResult V_101_00()
        {
            return View();
        }
        #endregion Depreciation Method
    }

}