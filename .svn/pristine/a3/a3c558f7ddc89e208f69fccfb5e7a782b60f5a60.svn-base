using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using System.Net.Http;
using eSyaEnterprise_UI.Areas.Config.Models;
using eSyaEnterprise_UI.Models;
using eSyaEnterprise_UI.Utility;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Newtonsoft.Json;
using eSyaEnterprise_UI.Areas.Config.Data;

namespace eSyaEnterprise_UI.Areas.Config.Controllers
{
   
    public class LocalizationController : Controller
    {
        private readonly IeSyaConfigAPIServices _eSyaConfigAPIServices;
        public LocalizationController(IeSyaConfigAPIServices eSyaConfigAPIServices)
        {
            _eSyaConfigAPIServices = eSyaConfigAPIServices;
        }

        #region Localization Table Mapping
        /// <summary>
        /// Localization Master
        /// </summary>
        /// <returns></returns>
        /// 
        [Area("eSyaConfig")]
        public IActionResult V_10_00()
        {
            ViewBag.formName = "Localization Table Mapping";
            return View();
        }
       
        /// <summary>
        /// Getting Localization Master Table List for Grid
        /// </summary>
        [HttpPost]
        public JsonResult GetLocalizationTableMaster()
        {
            try
            {
                var serviceResponse = _eSyaConfigAPIServices.HttpClientServices.GetAsync<List<DO_LocalizationMaster>>("Localization/GetLocalizationTableMaster").Result;
                return Json(serviceResponse.Data);
            }
            catch (Exception ex)
            {
                return Json(new DO_ReturnParameter() { Status = false, Message = (ex.InnerException != null) ? ex.InnerException.Message : ex.Message });
            }
        }

        /// <summary>
        /// Insert or Update Localization Master
        /// </summary>
        [HttpPost]
        public JsonResult InsertOrUpdateLocalizationTableMaster(DO_LocalizationMaster obj)
        {

            try
            {
                obj.UserID = AppSessionVariables.GetSessionUserID(HttpContext);
                obj.TerminalID = AppSessionVariables.GetIPAddress(HttpContext);
                obj.FormId= AppSessionVariables.GetSessionFormInternalID(HttpContext);
                var serviceResponse = _eSyaConfigAPIServices.HttpClientServices.PostAsJsonAsync<DO_ReturnParameter>("Localization/InsertOrUpdateLocalizationTableMaster", obj).Result;
                if (serviceResponse.Status)
                    return Json(serviceResponse.Data);
                else
                    return Json(new DO_ReturnParameter() { Status = false, Message = serviceResponse.Message });
            }
            catch (Exception ex)
            {
                return Json(new { Status = false, Message = ex.InnerException == null ? ex.Message.ToString() : ex.InnerException.Message });
            }
        }

        #endregion


        /// <summary>
        /// Localization Language Mapping
        /// </summary>
        /// 
        [Area("eSyaConfig")]
        public IActionResult V_11_00()
        {
            ViewBag.formName = "Localization Language Mapping";
            try
            {
                var serviceResponse = _eSyaConfigAPIServices.HttpClientServices.GetAsync<List<DO_Language>>("ConfigMasterData/GetLanguage").Result;
                ViewBag.LangList = serviceResponse.Data;
                
                var servicetableResponse = _eSyaConfigAPIServices.HttpClientServices.GetAsync<List<DO_LocalizationMaster>>("Localization/GetLocalizationMaster").Result;
                ViewBag.TableList = servicetableResponse.Data;
                return View();
            }
            catch (Exception ex)
            {
                return Json(new { Status = false, Message = ex.ToString() });
            }
        }

        /// <summary>
        /// Insert or Update Localization Language Mapping
        /// </summary>
        [HttpPost]
        public JsonResult InsertOrUpdateLocalizationLanguageMapping(List<DO_LocalizationLanguageMapping> l_obj)
        {

            try
            {
                l_obj.All(c =>
                {
                    c.UserID = AppSessionVariables.GetSessionUserID(HttpContext);
                    c.TerminalID = AppSessionVariables.GetIPAddress(HttpContext);
                    c.FormId= AppSessionVariables.GetSessionFormInternalID(HttpContext);
                    return true;
                });
                var serviceResponse = _eSyaConfigAPIServices.HttpClientServices.PostAsJsonAsync<DO_ReturnParameter>("Localization/InsertOrUpdateLocalizationLanguageMapping", l_obj).Result;
                if (serviceResponse.Status)
                    return Json(serviceResponse.Data);
                else
                    return Json(new DO_ReturnParameter() { Status = false, Message = serviceResponse.Message });   
            }
            catch (Exception ex)
            {
                return Json(new { Status = false, Message = ex.InnerException == null ? ex.Message.ToString() : ex.InnerException.Message });
            }
        }

        /// <summary>
        /// Get Localization Language Mapping Grid
        /// </summary>
        [HttpGet]
        public JsonResult GetLocalizationLanguageMapping(string languageCode, int tableCode)
        {
            try
            {
                if (tableCode > 0)
                {
                    var parameter = "?languageCode=" + languageCode + "&tableCode=" + tableCode.ToString();
                    var serviceResponse = _eSyaConfigAPIServices.HttpClientServices.GetAsync<List<DO_LocalizationLanguageMapping>>("Localization/GetLocalizationLanguageMapping"+parameter).Result;
                    return Json(serviceResponse.Data);
                }
                else
                    return Json(null);
            }
            catch (Exception ex)
            {
                return Json(new DO_ReturnParameter() { Status = false, Message = (ex.InnerException != null) ? ex.InnerException.Message : ex.Message });
            }
        }


        #region Language Controller
        [Area("eSyaConfig")]
        public IActionResult V_12_00()
        {
            ViewBag.formName = "Language Controller";
            var serviceResponse = _eSyaConfigAPIServices.HttpClientServices.GetAsync<List<string>>("Localization/GetAllControllers").Result;
            ViewBag.Controllers = serviceResponse.Data;
            return View();
        }
        /// <summary>
        /// Get Language Controllers Grid
        /// </summary>
        [HttpPost]
        public JsonResult GetLanguageControllersbyResource(string Resource)
        {
            try
            {
                if (!string.IsNullOrEmpty(Resource))
                {
                    var parameter = "?Resource=" + Resource;
                    var serviceResponse = _eSyaConfigAPIServices.HttpClientServices.GetAsync<List<DO_LanguageController>>("Localization/GetLanguageControllersbyResource" + parameter).Result;
                    return Json(serviceResponse.Data);
                }
                else
                    return Json(null);
            }
            catch (Exception ex)
            {
                return Json(new DO_ReturnParameter() { Status = false, Message = (ex.InnerException != null) ? ex.InnerException.Message : ex.Message });
            }
        }

        /// <summary>
        /// Insert or Update Localization Language Controller
        /// </summary>
        [HttpPost]
        public JsonResult InsertOrUpdateLanguageController(DO_LanguageController lobj)
        {

            try
            {
                lobj.UserID = AppSessionVariables.GetSessionUserID(HttpContext);
                lobj.TerminalID = AppSessionVariables.GetIPAddress(HttpContext);
                lobj.FormId = AppSessionVariables.GetSessionFormInternalID(HttpContext);
                var serviceResponse = _eSyaConfigAPIServices.HttpClientServices.PostAsJsonAsync<DO_ReturnParameter>("Localization/InsertOrUpdateLanguageController", lobj).Result;
                if (serviceResponse.Status)
                    return Json(serviceResponse.Data);
                else
                    return Json(new DO_ReturnParameter() { Status = false, Message = serviceResponse.Message });
            }
            catch (Exception ex)
            {
                return Json(new { Status = false, Message = ex.InnerException == null ? ex.Message.ToString() : ex.InnerException.Message });
            }
        }

       

        #endregion

        #region Language Culture
        [Area("eSyaConfig")]
        public IActionResult V_13_00()
        {
            ViewBag.formName = "Language Culture";
            var serviceResponse = _eSyaConfigAPIServices.HttpClientServices.GetAsync<List<DO_LanguageController>>("Localization/GetResources").Result;
            ViewBag.Resources = serviceResponse.Data;
            return View();
        }
        /// <summary>
        /// Get Language Culture Grid
        /// </summary>
        [HttpPost]
        public JsonResult GetLanguageCulture(string Culture,string Resource)
        {
            try
            {
                
                    var parameter = "?Resource=" + Resource+ "&Culture="+Culture;
                    var serviceResponse = _eSyaConfigAPIServices.HttpClientServices.GetAsync<List<DO_LanguageCulture>>("Localization/GetLanguageCulture" + parameter).Result;
                    return Json(serviceResponse.Data);
                
            }
            catch (Exception ex)
            {
                return Json(new DO_ReturnParameter() { Status = false, Message = (ex.InnerException != null) ? ex.InnerException.Message : ex.Message });
            }
        }

        /// <summary>
        /// Insert or Update Resource Culture
        /// </summary>
        [HttpPost]
        public JsonResult InsertOrUpdateLanguageCulture(List<DO_LanguageCulture> obj)
        {

            try
            {
                obj.All(c =>
                {
                    c.UserID = AppSessionVariables.GetSessionUserID(HttpContext);
                    c.TerminalID = AppSessionVariables.GetIPAddress(HttpContext);
                    c.FormId = AppSessionVariables.GetSessionFormInternalID(HttpContext);
                    return true;
                });
                var serviceResponse = _eSyaConfigAPIServices.HttpClientServices.PostAsJsonAsync<DO_ReturnParameter>("Localization/InsertOrUpdateLanguageCulture", obj).Result;
                if (serviceResponse.Status)
                    return Json(serviceResponse.Data);
                else
                    return Json(new DO_ReturnParameter() { Status = false, Message = serviceResponse.Message });
            }
            catch (Exception ex)
            {
                return Json(new { Status = false, Message = ex.InnerException == null ? ex.Message.ToString() : ex.InnerException.Message });
            }
        }
        #endregion
    }
}