@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer Localizer
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

@{
    ViewData["Title"] = "ESA_11_00";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


@{
    var userFormRole = (eSyaEnterprise_UI.Models.DO_UserFormRole)ViewBag.UserFormRole;
}
<script>
    var _userFormRole = JSON.parse('@Html.Raw(Json.Serialize(userFormRole))');

    var localization = {
        LoginID: '@Localizer["LoginID"]',
        LoginDescription: '@Localizer["LoginDescription"]',
        MobileNumber: '@Localizer["MobileNumber"]',
        LastActivityDate: '@Localizer["LastActivityDate"]',
        Active: '@Localizer["Active"]',
        Actions: '@Localizer["Actions"]',
        LocationDescription: '@Localizer["LocationDescription"]',
        UserGroup: '@Localizer["UserGroup"]',
        UserType: '@Localizer["UserType"]',
        AllowMFY: '@Localizer["AllowMFY"]',
        Action: '@Localizer["Action"]',
        Edit: '@Localizer["Edit"]',
        View: '@Localizer["View"]',
        MenuLink: '@Localizer["MenuLink"]',
        EditBusinessSegment: '@Localizer["EditBusinessSegment"]',
        ViewBusinessSegment: '@Localizer["ViewBusinessSegment"]',
        UserAuthentication: '@Localizer["UserAuthentication"]',
        UserID: '@Localizer["UserID"]',
        IUStatus: '@Localizer["IUStatus"]',
        FormName: '@Localizer["FormName"]',
    };

</script>
@section scripts{

    <script src="~/js/jsTree.js"></script>
}
<link href="~/css/jsTree.css" rel="stylesheet" />
<div class="row padbot10">

    <div class="col-lg-3 col-md-4 col-sm-6">
        <div class="form-group">
            <label class="lable-color"> @Localizer["UserGroup"]</label>

            <select class="selectpicker" data-live-search="true" id="cboUsergroup" title="" data-size="8" onchange="fnOnChangeUserGroup()">
                @*<option value="0"> @Localizer["ChooseUserGroup"] </option>*@
                @foreach (var ug in ViewBag.UGappcodes)
                {
                    <option value="@ug.ApplicationCode">@ug.CodeDesc</option>
                }
            </select>

        </div>
    </div>

    <div class="col-lg-3 col-md-4 col-sm-6">
        <div class="form-group">
            <label class="lable-color"> @Localizer["UserType"]</label>

            <select class="selectpicker" data-live-search="true" id="cboUserType" title="" data-size="8" onchange="fnOnChangeUserType()">
                @*<option value="0">@Localizer["ChooseUserType"] </option>*@
                @foreach (var ut in ViewBag.UTappcodes)
                {
                    <option value="@ut.ApplicationCode">@ut.CodeDesc</option>
                }
            </select>

        </div>
    </div>

    <div class="col-lg-3 col-md-4 col-sm-6">
        <div class="form-group">
            <label class="lable-color"> @Localizer["UserRole"]</label>

            <select class="selectpicker" data-live-search="true" id="cboUserRole" title="" data-size="8" onchange="fnOnChangeUserRole()">
                @*<option value="0">@Localizer["ChoosUserRole"] </option>*@
                @foreach (var ur in ViewBag.URappcodes)
                {
                    <option value="@ur.ApplicationCode">@ur.CodeDesc</option>
                }
            </select>

        </div>
    </div>

    <div class="col-lg-4 col-md-4 col-sm-6">
        <div id="jstUserGroup"></div>
    </div>

    <div id="dvForm" class="col-lg-4 col-md-4 col-sm-6">

        <div class="demo-card-square mdl-card mdl-shadow--2dp marbot15 fullwidth" id="pnlAddForms">
            <div class="mdl-card__title mdl-card--expand padleft0 padtop0 d-block">
                <h5 class="mdl-card__title-text" id="UserActionTitle"> @Localizer["UserAction"] </h5>
            </div>
            <div class="mdl-card__supporting-text fullwidth">
                <div class="col-lg-6 col-md-6 col-sm-12 pad0">
                    <div class="default-checkbox separate">
                        <label class="mdl-checkbox mdl-js-checkbox mdl-js-ripple-effect" for="chkFormName">
                            <input type="checkbox" id="chkFormName" class="mdl-checkbox__input">
                            <span class="mdl-checkbox__label lblFormName">@Localizer["FormName"]</span>
                        </label>
                    </div>
                </div>
                <div id="dvFormAction">

                    <div class="col-lg-12 col-md-12 col-sm-12 pad0 padbot10">
                        <table id="jqgFormAction"></table>
                        <div id="jqpFormAction"></div>
                    </div>
                    <hr />
                    <div class="mdl-card__actions text-center pad0 form-group">
                        <button type="button" class="mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect mdl-button--accent primary-button  mr-10" id="btnSaveFormAction" onclick="fnSaveFormAction();"> <i class="fa fa-save"></i> @Localizer["Save"]</button>
                        <button type="button" class="mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect  cancel-button" id="btnCancelFormAction" onclick="fnCancelFormAction();"> <i class="fa fa-times"></i> @Localizer["Cancel"] </button>

                    </div>
                </div>

            </div>
        </div>
    </div>

</div>

<script>
    // User Group Menu and User Group Action
    var prevSelectedID;
    var formID;
    var UserGroup;
    var UserType;
    var UserRole;

    $(document).ready(function () {
      
        //$('#txtSearch').keyup(function () {
        //    var searchString = $(this).val();
        //    $('#jstUserGroup').jstree('search', searchString);
        //});
        fnGridRefreshFormAction();
        fnFormaction();
        $("#dvForm").hide();
       
    });

    $("#PopupMenuLink").on("hidden.bs.modal", function () {
        $("#dvForm").hide();
    })

    function fnGridRefreshFormAction() {
        $("#jqgFormAction").setGridParam({ datatype: 'json', page: 1 }).trigger('reloadGrid');
    }
    $(window).on('resize', function () {
        $("#PopupMenuLinkbody").css({ 'height': $(document).height() - 148, 'overflow-x': 'hidden' });
    })

    function fnOnChangeUserGroup() {
        $("#dvForm").hide();
        fnFormaction();
    }

    function fnOnChangeUserType() {
        $("#dvForm").hide();
        fnFormaction(); 
    }

    function fnOnChangeUserRole() {
        $("#dvForm").hide();
        fnFormaction();
    }

    function fnFormaction() {
       
        $('#btnSaveFormAction').show();
        $.ajax({
            url: getBaseURL() + '/UserCreation/GetMenulistbyUserGroup?UserGroup=' + $("#cboUsergroup").val() + '&UserType=' + $("#cboUserType").val() + '&UserRole=' + $("#cboUserRole").val(),
            type: 'POST',
            datatype: 'json',
            success: function (result) {

                fnGetUserMenuList_Success(result);
            },
            error: function (error) {
                toastr.error(error.status);
            }
        });
    }

    function fnGetUserMenuList_Success(dataArray) {
        $('#jstUserGroup').jstree('destroy');
        $("#jstUserGroup").jstree({
            core: { 'data': dataArray, 'check_callback': true, 'multiple': true, 'expand_selected_onload': false },
            "plugins": ["search"],

            "search": {
                "case_sensitive": false,
                "show_only_matches": true,
                "show_only_matches_children": true
            }

        });

        $("#jstUserGroup").on('loaded.jstree', function () {
            $("#jstUserGroup").jstree('open_all');
            $("#jstUserGroup").jstree()._open_to(prevSelectedID);
            $('#jstUserGroup').jstree().select_node(prevSelectedID);

        });

        $('#jstUserGroup').on("changed.jstree", function (e, data) {
            if (data.node != undefined) {
                //if (prevSelectedID != data.node.id) {
                prevSelectedID = data.node.id;

                if (data.node.id == "0") {
                    fnGridRefreshFormAction();
                    $("#dvForm").hide();
                }
                else {
                    if (data.node.parent == "#") {
                        fnGridRefreshFormAction();
                        $("#dvForm").hide();
                    }
                    else if (data.node.id.startsWith("FM")) {
                        $("#dvForm").show();

                        formID = 0;
                        formID = data.node.id.substring(2).split(".")[1];
                        $('#UserActionTitle').text(data.node.text);
                        $('.lblFormName').text(data.node.text);

                        if (data.node.id.substring(2).split(".")[2] == "1")
                            $("#chkFormName").parent().addClass("is-checked");
                        else
                            $("#chkFormName").parent().removeClass("is-checked");

                        $("input[type=checkbox]").attr('disabled', false);

                        $("#jqgFormAction").GridUnload();

                        fnUserActionGrid(formID);
                    }
                    else {
                        fnGridRefreshFormAction();
                        $("#dvForm").hide();
                    }
                }
            }
        });

        $('#jstUserGroup').on("close_node.jstree", function (node) {
            var closingNode = node.handleObj.handler.arguments[1].node;
            $('#jstUserGroup').jstree().deselect_node(closingNode.children);
        });
        fnTreeSize();
    };
    
    function fnUserActionGrid(formID) {

        $("#jqgFormAction").jqGrid('GridUnload');
        $("#jqgFormAction").jqGrid({
            url: getBaseURL() + '/UserCreation/GetFormActionLinkbyUserGroup?UserGroup=' + $("#cboUsergroup").val() + '&UserType=' + $("#cboUserType").val() + '&UserRole=' + $("#cboUserRole").val() + '&MenuKey=' + formID,
            datatype: 'json',
            mtype: 'POST',
            ajaxGridOptions: { contentType: 'application/json; charset=utf-8' },
            colNames: ["Action ID", localization.Action, localization.Active],
            colModel: [
                { name: 'ActionID', key: true, index: 'ActionId', width: 0, sortable: false, hidden: true },
                { name: 'ActionDesc', index: 'ActionDesc', width: 150, sortable: false, editable: false },
                { name: 'ActiveStatus', index: 'ActiveStatus', width: 75, align: 'center', sortable: false, formatter: 'checkbox', editable: true, edittype: "checkbox", formatoptions: { disabled: false } }
            ],
            caption: "",
            height: 'auto',
            width: '200',
            rowNum: 15,
            rownumbers: true,
            viewrecords: true,
            gridview: true,
            autowidth: true,
            shrinkToFit: true,
            forceFit: true,
            cellEdit: true,
            loadComplete: function () {
                fnJqgridSmallScreen('jqgFormAction');
            },
        });
    }
    function fnSaveFormAction() {

        if (IsStringNullorEmpty($("#cboUsergroup").val()) || $("#cboUsergroup").val() === "0" || $("#cboUsergroup").val() === 0) {
            toastr.warning("Please select User Group");
            return;
        }
        if (IsStringNullorEmpty($("#cboUserType").val()) || $("#cboUserType").val() === "0" || $("#cboUserType").val() === 0) {
            toastr.warning("Please select User Type");
            return;
        }
        if (IsStringNullorEmpty($("#cboUserRole").val()) || $("#cboUserRole").val() === "0" || $("#cboUserRole").val() === 0) {
            toastr.warning("Please select User Role");
            return;
        }

        var IsForChecked = $("#chkFormName").parent().hasClass("is-checked");
        var uml = {
            UserGroup: $("#cboUsergroup").val(),
            UserType: $("#cboUserType").val(),
            UserRole: $("#cboUserRole").val(),
            MenuKey: formID,
            ActiveStatus: IsForChecked
        };

        var formAction = [];
        var jqgFormAction = jQuery("#jqgFormAction").jqGrid('getRowData');
        for (var i = 0; i < jqgFormAction.length; ++i) {
            if (parseFloat(jqgFormAction[i]["ActionID"]) > 0) {
                formAction.push({
                    ActionID: jqgFormAction[i]["ActionID"],
                    Active: jqgFormAction[i]["ActiveStatus"]
                });
            }
        }

        uml.l_formAction = formAction;

        $("#btnSaveFormAction").attr('disabled', true);

        $.ajax({
            url: getBaseURL() + '/UserCreation/InsertIntoUserGroupMenuAction',
            type: 'POST',
            datatype: 'json',
            data: {
                obj: uml
            },
            async: false,
            success: function (response) {
                if (response.Status) {
                    toastr.success(response.Message);
                    $("#btnSaveFormAction").attr('disabled', true);
                    fnReloadTreeAfterSave();
                }
                else {
                    toastr.error(response.Message);
                }
                $("#btnSaveFormAction").attr('disabled', false);
                $("#btnSaveFormAction").show();
            },
            error: function (error) {
                toastr.error(error.statusText);
                $("#btnSaveFormAction").attr("disabled", false);
            }
        });
    }

    function fnReloadTreeAfterSave() {

        UserID = $("#txtUserId").val();

        if (UserGroup <= 0) {
            toastr.warning("Please Link User Group from Edit Option");
            return;
        }
        if (UserType <= 0) {
            toastr.warning("Please Link User Type from Edit Option");
            return;
        }

        fnGridRefreshFormAction();
        fnFormaction();
    }

    function fnCancelFormAction() {
        $("#dvForm").hide();
    }
    function fnTreeSize() {
        $('#jstUserGroup').css({
            'height': $(window).innerHeight() - 215,
            'overflow': 'auto'
        });

    }
</script>