using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using eSyaEnterprise_UI.Areas.eSyaPayroll.Data;
using eSyaEnterprise_UI.Areas.eSyaPayroll.Models;
using eSyaEnterprise_UI.Utility;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json;

namespace eSyaEnterprise_UI.Areas.eSyaPayroll.Controllers
{
    public class EmployeeController : Controller
    {
        private readonly IeSyaPayrollAPIServices _eSyaPayrollAPIServices;
        private readonly ILogger<EmployeeController> _logger;

        public EmployeeController(IeSyaPayrollAPIServices eSyaPayrollAPIServices, ILogger<EmployeeController> logger)
        {
            _eSyaPayrollAPIServices = eSyaPayrollAPIServices;
            _logger = logger;
        }
       
        [Area("eSyaPayroll")]
        public async Task<IActionResult> V_4000_00()
        {

            try
            {
                //ViewBag.UserFormRoles = new DO_UserFormRole { IsInsert = true, IsEdit = true, IsDelete = true };
                List<int> l_ac = new List<int>();

                l_ac.Add(EmployeeCodeTypeValues.EmployeeGroup);
                l_ac.Add(EmployeeCodeTypeValues.EmployeePayCategory);
                var response = await _eSyaPayrollAPIServices.HttpClientServices.PostAsJsonAsync<List<DO_ApplicationCodes>>("CommonData/GetApplicationCodesByCodeTypeList", l_ac);
                var bkey_response = await _eSyaPayrollAPIServices.HttpClientServices.GetAsync<List<DO_BusinessLocation>>("CommonData/GetBusinessKeys");
                var empclass_response = await _eSyaPayrollAPIServices.HttpClientServices.GetAsync<List<DO_EmployeeClass>>("Employee/GetEmployeeClassforCombo");

                if (response.Status && bkey_response.Status && empclass_response.Status)
                {
                    if (response.Data != null)
                    {
                        List<DO_ApplicationCodes> app_codes = response.Data;
                        ViewBag.EmployeeGroup = app_codes.Where(w => w.CodeType == EmployeeCodeTypeValues.EmployeeGroup).ToList();

                        ViewBag.EmployeePayCategory= app_codes.Where(w => w.CodeType == EmployeeCodeTypeValues.EmployeePayCategory).ToList();

                        ViewBag.SalaryPaymentMode = app_codes.Where(w => w.CodeType == EmployeeCodeTypeValues.SalaryPaymentMode).ToList();

                        ViewBag.Bank = app_codes.Where(w => w.CodeType == EmployeeCodeTypeValues.Bank).ToList();

                        ViewBag.ERCode = app_codes.Where(w => w.CodeType == EmployeeCodeTypeValues.ERCode).ToList();
                    }
                    else
                    {
                        _logger.LogError(new Exception(response.Message), "UD:GetApplicationCodesByCodeTypeList");
                    }
                    if (empclass_response.Data != null)
                    {
                        ViewBag.EmployeeClass = empclass_response.Data.ToList();
                    }
                    else
                    {
                        _logger.LogError(new Exception(response.Message), "UD:GetEmployeeClassforCombo");
                    }
                    if (bkey_response.Data != null)
                    {
                        ViewBag.BusinessKey = bkey_response.Data.ToList();
                    }
                    else
                    {
                        _logger.LogError(new Exception(response.Message), "UD:GetBusinessKeys");
                    }
                }
                else
                {
                    _logger.LogError(new Exception(response.Message), "UD:GetApplicationCodesByCodeTypeList");
                }

                return View();
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:GetApplicationCodesByCodeTypeList");
                throw ex;
            }
        }

        [Area("eSyaPayroll")]
        public IActionResult _EmployeeDetails()
        {
            return View();
        }
        [Area("eSyaPayroll")]
        public IActionResult _PersonalInformation()
        {
            return View();
        }
        [Area("eSyaPayroll")]
        public IActionResult _SalaryInfo()
        {
            return View();
        }
        [Area("eSyaPayroll")]
        public IActionResult _FamilyInfo()
        {
            return View();
        }

        [Area("eSyaPayroll")]
        public IActionResult _EducationInfo()
        {
            return View();
        }

        [Area("eSyaPayroll")]
        public IActionResult _PreviousJobs()
        {
            return View();
        }
        [Area("eSyaPayroll")]
        public IActionResult _CurrentJob()
        {
            return View();
        }
        [Area("eSyaPayroll")]
        public IActionResult _FixedDeduction()
        {
            return View();
        }


        #region Employee Details Info
        /// <summary>
        ///Get Employee Details Info for Grid
        /// </summary>
        [HttpPost]
        public async Task<JsonResult> GetEmployeesInfobySuffix(string Alphabet)
        {
            try
            {
                var parameter = "?Alphabet=" + Alphabet;
                var serviceResponse = await _eSyaPayrollAPIServices.HttpClientServices.GetAsync<List<DO_EmployeeInfo>>("Employee/GetEmployeesInfobySuffix" + parameter);
                if (serviceResponse.Status)
                {
                    return Json(serviceResponse.Data);
                }
                else
                {
                    _logger.LogError(new Exception(serviceResponse.Message), "UD:GetEmployeesInfo:For Alphabet {0}", Alphabet);
                    return Json(new { Status = false, StatusCode = "500" });
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:GetEmployeesInfo:For Alphabet {0} ", Alphabet);
                return Json(new DO_ReturnParameter() { Status = false, Message = (ex.InnerException != null) ? ex.InnerException.Message : ex.Message });
            }
        }

        /// <summary>
        ///Get User Master Details
        /// </summary>
        [HttpPost]
        public async Task<JsonResult> GetEmployeeInfobyEmployeeNumber(int EmpNumber)
        {
            try
            {
                var parameter = "?EmpNumber=" + EmpNumber;
                var serviceResponse = await _eSyaPayrollAPIServices.HttpClientServices.GetAsync<DO_EmployeeInfo>("Employee/GetEmployeeInfobyEmployeeNumber" + parameter);

                if (serviceResponse.Status)
                {
                    if (serviceResponse.Data != null)
                    {
                        var data = serviceResponse.Data;

                        string EmpimageURI = string.Empty;
                        if (data.Photo != null)
                            EmpimageURI = ConvertByteArraytoImageURI(data.Photo);
                        data.Emplyeeimage = EmpimageURI;

                        return Json(data);
                    }
                    else
                    {
                        _logger.LogError(new Exception(serviceResponse.Message), "UD:GetEmployeeInfobyEmployeeNumber:For EmpNumber {0}", EmpNumber);
                        return Json(new { Status = false, StatusCode = "500" });
                    }
                }
                else
                {
                    _logger.LogError(new Exception(serviceResponse.Message), "UD:GetEmployeeInfobyEmployeeNumber:For EmpNumber {0}", EmpNumber);
                    return Json(new { Status = false, StatusCode = "500" });
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:GetEmployeeInfobyEmployeeNumber:For EmpNumber {0}", EmpNumber);
                throw ex;
            }
        }

        /// <summary>
        /// Insert or Update Employee Details Info
        /// </summary>
        [HttpPost]
        public async Task<JsonResult> InsertOrUpdateEmployeeInfo(DO_EmployeeInfo obj, string file)
        {
            try
            {
                if (string.IsNullOrEmpty(obj.EmployeeId))
                {
                    return Json(new DO_ReturnParameter() { Status = false, Message = "Please Enter Employee ID" });
                }
                else if (string.IsNullOrEmpty(obj.EmployeeName))
                {
                    return Json(new DO_ReturnParameter() { Status = false, Message = "Please Enter Employee Name" });
                }
                
                else
                {
                    obj.FormId = AppSessionVariables.GetSessionFormInternalID(HttpContext);
                    obj.UserID = AppSessionVariables.GetSessionUserID(HttpContext);
                    obj.TerminalID = AppSessionVariables.GetIPAddress(HttpContext);
                    if (file != null)
                    {

                        string employeebase64 = file;// load base 64 code to this variable from js 
                        Byte[] employeebitmapData = new Byte[employeebase64.Length];
                        employeebitmapData = Convert.FromBase64String(FixBase64ForImage(employeebase64));
                        if (employeebitmapData.Length > 2 * 1024 * 1024)
                        {
                            return Json(new DO_ReturnParameter() { Status = false, Message = "Employee Photo file size should be smaller than 2 MB" });
                        }

                        obj.Photo = employeebitmapData;
                    }
                    else
                    {
                        byte[] emptyByte = { };
                        obj.Photo = emptyByte;
                    }
                   
                }

                var serviceResponse = await _eSyaPayrollAPIServices.HttpClientServices.PostAsJsonAsync<DO_ReturnParameter>("Employee/InsertOrUpdateEmployeeInfo", obj);
                if (serviceResponse.Status)
                    return Json(serviceResponse.Data);
                else
                    return Json(new DO_ReturnParameter() { Status = false, Message = serviceResponse.Message });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:InsertOrUpdateEmployeeInfo:params:" + JsonConvert.SerializeObject(obj));
                return Json(new { Status = false, Message = ex.InnerException == null ? ex.Message.ToString() : ex.InnerException.Message });
            }
        }


        public static string ConvertByteArraytoImageURI(Byte[] image)
        {

            StringBuilder ImageURI = new StringBuilder();
            ImageURI.Append("data:");
            string image_data = Convert.ToBase64String(image);
            string mime = "image/jpeg";
            string encoding = "base64";
            ImageURI.Append(mime);
            ImageURI.Append(";");
            ImageURI.Append(encoding);
            ImageURI.Append(",");
            ImageURI.Append(image_data);
            return Convert.ToString(ImageURI);
        }

        public static string FixBase64ForImage(string image)
        {

            var regex = new Regex(@"data:(?<mime>[\w/\-\.]+);(?<encoding>\w+),(?<data>.*)", RegexOptions.Compiled);
            var match = regex.Match(image);
            var mime = match.Groups["mime"].Value;
            var encoding = match.Groups["encoding"].Value;
            var data = match.Groups["data"].Value;
            return data;
        }

        #endregion Employee Details Info
    }
}