using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using eSyaEnterprise_UI.ActionFilter;
using eSyaEnterprise_UI.Areas.eSyaClinicalServices.Models;
using eSyaEnterprise_UI.Areas.eSyaClinicalServices.Data;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using Microsoft.AspNetCore.Mvc.Rendering;
using eSyaEnterprise_UI.Utility;
using Newtonsoft.Json;

namespace eSyaEnterprise_UI.Areas.eSyaClinicalServices.Controllers
{
    public class ClinicsController : Controller
    {
        private readonly IeSyaClinicalAPIServices _eSyaClinicalAPIServices;
        private readonly ILogger<ClinicsController> _logger;

        public ClinicsController(IeSyaClinicalAPIServices eSyaClinicalAPIServices, ILogger<ClinicsController> logger)
        {
            _eSyaClinicalAPIServices = eSyaClinicalAPIServices;
            _logger = logger;
        }


        [Area("eSyaClinicalServices")]
        [ServiceFilter(typeof(ViewBagActionFilter))]
        public IActionResult V_311_00()
        {
            try
            {
                //ViewBag.UserFormRoles = new DO_UserFormRole { IsInsert = true, IsEdit = true, IsDelete = true };
                var serviceResponse = _eSyaClinicalAPIServices.HttpClientServices.GetAsync<List<DO_BusinessLocation>>("CommonData/GetBusinessKey").Result;
                ViewBag.BusinessLocation = serviceResponse.Data.Select(a => new SelectListItem
                {
                    Text = a.LocationDescription,
                    Value = a.BusinessKey.ToString()
                });
                return View();
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:GetBusinessLocation");
                throw ex;
            }
        }

        [Produces("application/json")]
        public IActionResult GetClinicConsultantTreeList(int businessKey)
        {
            try
            {
                List<jsTreeObject> ClinicConsultantTree = new List<jsTreeObject>();

                jsTreeObject jsObj = new jsTreeObject
                {
                    id = "CL0",
                    parent = "#",
                    text = "Clinics",
                    //icon = "/images/jsTree/foldergroupicon.png",
                    state = new stateObject { opened = true, selected = false }
                };
                ClinicConsultantTree.Add(jsObj);

                var clinicResponse = _eSyaClinicalAPIServices.HttpClientServices.GetAsync<List<DO_OPClinic>>("Clinic/GetClinicConsultantIdList?businessKey=" + businessKey).Result;

                if(clinicResponse.Data != null)
                {
                    List<DO_OPClinic> clinic_list = clinicResponse.Data.Select(x => new DO_OPClinic { ClinicId = x.ClinicId, ClinicDesc = x.ClinicDesc }).GroupBy(y => y.ClinicId, (key, grp) => grp.FirstOrDefault()).ToList();
                    foreach (DO_OPClinic cl in clinic_list)
                    {
                        jsObj = new jsTreeObject
                        {
                            id = cl.ClinicId.ToString(),
                            text = cl.ClinicDesc.ToString(),
                            //icon = "/images/jsTree/openfolder.png",
                            parent = "CL0",
                            state = new stateObject { opened = true, selected = false },
                        };
                        ClinicConsultantTree.Add(jsObj);
                    }

                    var conusltant_list = clinicResponse.Data;
                    foreach (var co in conusltant_list.Where(w => conusltant_list.Any(f => f.ClinicId == w.ClinicId)))
                    {
                        jsObj = new jsTreeObject
                        {
                            text = co.ConsultationDesc,
                            parent = co.ClinicId.ToString()
                        };
                        if (co.BusinessKey > 0)
                        {
                            jsObj.id = co.ClinicId.ToString() + "_" + "Y" + "_" + co.ConsultationId;
                            //jsObj.icon = "/images/jsTree/checkedstate.jpg";
                            if (co.ActiveStatus)
                                jsObj.state = new stateObject { opened = true, selected = true, Checked = true };
                            else
                                jsObj.state = new stateObject { opened = true, selected = false, Checked = false };
                        }
                        else
                        {
                            jsObj.id = co.ClinicId.ToString() + "_" + "N" + "_" + co.ConsultationId;
                            //jsObj.icon = "/images/jsTree/fileIcon.png";
                            jsObj.state = new stateObject { opened = true, selected = false, Checked = false };
                        }

                        ClinicConsultantTree.Add(jsObj);
                    }
                }

                return Json(ClinicConsultantTree);
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// Insert / Update OP Clinic
        /// </summary>
        [HttpPost]
        public JsonResult InsertUpdateOPClinicLink(List<DO_OPClinic> op_cl)
        {
            try
            {
                op_cl.All(c =>
                {
                    c.UserID = AppSessionVariables.GetSessionUserID(HttpContext);
                    c.TerminalID = AppSessionVariables.GetIPAddress(HttpContext);
                    c.FormId = AppSessionVariables.GetSessionFormInternalID(HttpContext);
                    return true;
                });

                var Insertresponse = _eSyaClinicalAPIServices.HttpClientServices.PostAsJsonAsync<DO_ReturnParameter>("Clinic/InsertUpdateOPClinicLink", op_cl).Result;
                return Json(Insertresponse.Data);

            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:InsertUpdateOPClinicLink:params:" + JsonConvert.SerializeObject(op_cl));
                throw ex;
            }
        }

    }
}