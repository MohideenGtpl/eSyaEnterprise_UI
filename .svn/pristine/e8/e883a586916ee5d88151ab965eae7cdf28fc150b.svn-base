using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using eSyaEnterprise_UI.ActionFilter;
using eSyaEnterprise_UI.Areas.eSyaServices.Data;
using eSyaEnterprise_UI.Areas.eSyaServices.Models;
using eSyaEnterprise_UI.Models;
using eSyaEnterprise_UI.Utility;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json;

namespace eSyaEnterprise_UI.Areas.eSyaServices.Controllers
{
    [SessionTimeout]
    public class ServiceManagementController : Controller
    {
        private readonly IeSyaServicesAPIServices _eSyaServicesAPIServices;
        private readonly ILogger<ServiceManagementController> _logger;
        public ServiceManagementController(IeSyaServicesAPIServices eSyaServicesAPIServices, ILogger<ServiceManagementController> logger)
        {
            _eSyaServicesAPIServices = eSyaServicesAPIServices;
            _logger = logger;
        }

        /// <summary>
        /// Service Type
        /// </summary>
        /// <returns></returns>

        [Area("eSyaServices")]
        [ServiceFilter(typeof(ViewBagActionFilter))]
        public IActionResult V_1501_00()
        {
            return View();
        }

        /// <summary>
        /// Service Group
        /// </summary>
        /// <returns></returns>

        [Area("eSyaServices")]
        [ServiceFilter(typeof(ViewBagActionFilter))]
        public IActionResult V_1502_00()
        {
            return View();
        }

        /// <summary>
        /// Service Class
        /// </summary>
        /// <returns></returns>

        [Area("eSyaServices")]
        [ServiceFilter(typeof(ViewBagActionFilter))]
        public IActionResult V_1503_00()
        {
            return View();
        }

        /// <summary>
        /// Service Code Pattern
        /// </summary>
        /// <returns></returns>

        [Area("eSyaServices")]
        [ServiceFilter(typeof(ViewBagActionFilter))]
        public async Task<IActionResult> V_1504_00()
        {
            ViewBag.formName = "Service Code Pattern";
            // ViewBag.UserFormRoles = new DO_UserFormRole { IsInsert = true, IsEdit = true, IsDelete = true };
            var serviceResponse = await _eSyaServicesAPIServices.HttpClientServices.GetAsync<List<DO_ServiceClass>>("ServiceManagement/GetServiceClasses");
            if (serviceResponse.Status)
            {
                if (serviceResponse.Data != null)
                {
                    var sc_list = serviceResponse.Data.FindAll(w => w.ActiveStatus == true);
                    ViewBag.ServiceClasses = sc_list;
                }
            }
            else
            {
                _logger.LogError(new Exception(serviceResponse.Message), "UD:V_1504_00:GetServiceClasses");
            }
            return View();
        }

        /// <summary>
        /// Service Code
        /// </summary>
        /// <returns></returns>

        [Area("eSyaServices")]
        [ServiceFilter(typeof(ViewBagActionFilter))]
        public IActionResult V_1510_00()
        {
            return View();
        }


        #region ServiceType
        [Produces("application/json")]
        [HttpGet]
        public async Task<ActionResult> GetServiceTypes()
        {
            try
            {
                List<jsTreeObject> treeView = new List<jsTreeObject>();

                jsTreeObject jsObj = new jsTreeObject();
                jsObj.id = "ST";
                jsObj.parent = "#";
                jsObj.text = "Service Types";
                jsObj.icon = "/images/jsTree/foldergroupicon.png";
                jsObj.state = new stateObject { opened = true, selected = false };
                treeView.Add(jsObj);

                var serviceResponse = await _eSyaServicesAPIServices.HttpClientServices.GetAsync<List<DO_ServiceType>>("ServiceManagement/GetServiceTypes");
                if (serviceResponse.Status)
                {
                    if (serviceResponse.Data != null)
                    {
                        var st_list = serviceResponse.Data;
                        foreach (var ig in st_list)
                        {
                            jsObj = new jsTreeObject();
                            jsObj.id = ig.ServiceTypeId.ToString();
                            jsObj.text = ig.ServiceTypeDesc;
                            jsObj.icon = "/images/jsTree/openfolder.png";
                            jsObj.parent = "ST";
                            treeView.Add(jsObj);
                        }
                    }
                }
                else
                {
                    _logger.LogError(new Exception(serviceResponse.Message), "UD:GetServiceTypes");
                }

                return Json(treeView);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:GetServiceTypes");
                return Json(new DO_ReturnParameter() { Status = false, Message = ex.Message });
            }
        }
        public async Task<ActionResult> GetServiceTypeByID(int ServiceTypeID)
        {
            try
            {
                var serviceResponse = await _eSyaServicesAPIServices.HttpClientServices.GetAsync<DO_ServiceType>("ServiceManagement/GetServiceTypeByID?ServiceTypeID=" + ServiceTypeID);
                if (serviceResponse.Status)
                {
                    if (serviceResponse.Data != null)
                    {
                        var data = serviceResponse.Data;
                        return Json(data);
                    }
                    else
                    {
                        _logger.LogError(new Exception(serviceResponse.Message), "UD:GetServiceTypeByID:For ServiceTypeID {0}", ServiceTypeID);
                        return Json(new { Status = false, Message = serviceResponse.Message });
                    }
                }
                else
                {
                    _logger.LogError(new Exception(serviceResponse.Message), "UD:GetServiceTypeByID:For ServiceTypeID {0}", ServiceTypeID);
                    return Json(new { Status = false, Message = serviceResponse.Message });
                }

            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:GetServiceTypeByID:For ServiceTypeID {0}", ServiceTypeID);
                return Json(new { Status = false, Message = ex.ToString() });
            }
        }
        public async Task<ActionResult> AddOrUpdateServiceType(DO_ServiceType obj)
        {
            try
            {
                //obj.FormID = AppSessionVariables.GetSessionFormInternalID(HttpContext);
                obj.FormID = "V_1501_00";
                obj.CreatedOn = DateTime.Now;
                obj.UserID = AppSessionVariables.GetSessionUserID(HttpContext);
                obj.TerminalID = AppSessionVariables.GetIPAddress(HttpContext);

                var serviceResponse = await _eSyaServicesAPIServices.HttpClientServices.PostAsJsonAsync<DO_ReturnParameter>("ServiceManagement/AddOrUpdateServiceType", obj);
                if (serviceResponse.Status)
                {
                    if (serviceResponse.Data != null)
                    {
                        return Json(serviceResponse.Data);
                    }
                    else
                    {
                        _logger.LogError(new Exception(serviceResponse.Data.Message), "UD:AddOrUpdateServiceType:params:" + JsonConvert.SerializeObject(obj));
                        return Json(new DO_ReturnParameter() { Status = false, Message = serviceResponse.Data.Message });
                    }

                }
                else
                {
                    _logger.LogError(new Exception(serviceResponse.Message), "UD:AddOrUpdateServiceType:params:" + JsonConvert.SerializeObject(obj));
                    return Json(new DO_ReturnParameter() { Status = false, Message = serviceResponse.Message });
                }

            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:AddOrUpdateServiceType:params:" + JsonConvert.SerializeObject(obj));
                return Json(new DO_ReturnParameter() { Status = false, Message = ex.ToString() });
            }
        }
        #endregion
        #region ServiceGroup
        public async Task<ActionResult> GetServiceGroups()
        {
            try
            {
                var serviceResponse = await _eSyaServicesAPIServices.HttpClientServices.GetAsync<List<DO_ServiceType>>("ServiceManagement/GetServiceTypes");
                var st_list = new List<DO_ServiceType>();
                if (serviceResponse.Status)
                {
                    st_list = serviceResponse.Data.FindAll(w => w.ActiveStatus == true);
                }
                else
                {
                    _logger.LogError(new Exception(serviceResponse.Message), "UD:GetServiceGroups:GetServiceTypes");
                }

                var serviceResponse1 = await _eSyaServicesAPIServices.HttpClientServices.GetAsync<List<DO_ServiceGroup>>("ServiceManagement/GetServiceGroups");
                var sg_list = new List<DO_ServiceGroup>();
                if (serviceResponse1.Status)
                {
                    sg_list = serviceResponse1.Data;
                }
                else
                {
                    _logger.LogError(new Exception(serviceResponse.Message), "UD:GetServiceGroups:GetServiceGroups");
                }


                List<jsTreeObject> treeView = new List<jsTreeObject>();
                jsTreeObject jsObj = new jsTreeObject();
                jsObj.id = "SG";
                jsObj.parent = "#";
                jsObj.text = "Service Groups";
                jsObj.icon = "/images/jsTree/foldergroupicon.png";
                jsObj.state = new stateObject { opened = true, selected = false };
                treeView.Add(jsObj);
                if (st_list != null)
                {
                    foreach (var st in st_list)
                    {
                        jsObj = new jsTreeObject();
                        jsObj.id = st.ServiceTypeId.ToString();
                        jsObj.text = st.ServiceTypeDesc;
                        jsObj.icon = "/images/jsTree/openfolder.png";
                        jsObj.parent = "SG";
                        jsObj.state = new stateObject { opened = false, selected = false };
                        treeView.Add(jsObj);
                        if (sg_list != null)
                        {
                            foreach (var sg in sg_list)
                            {
                                if (st.ServiceTypeId == sg.ServiceTypeId)
                                {
                                    jsObj = new jsTreeObject();
                                    jsObj.id = "G" + sg.ServiceGroupId.ToString();
                                    jsObj.text = sg.ServiceGroupDesc;
                                    jsObj.icon = "/images/jsTree/fileIcon.png";
                                    jsObj.parent = st.ServiceTypeId.ToString();
                                    treeView.Add(jsObj);
                                }
                            }
                        }
                    }
                }

                return Json(treeView);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:GetServiceGroups");
                return Json(new DO_ReturnParameter() { Status = false, Message = ex.ToString() });
            }




        }
        public async Task<ActionResult> GetServiceGroupByID(int ServiceGroupID)
        {
            try
            {
                var serviceResponse = await _eSyaServicesAPIServices.HttpClientServices.GetAsync<DO_ServiceGroup>("ServiceManagement/GetServiceGroupByID?ServiceGroupID=" + ServiceGroupID);
                if (serviceResponse.Status)
                {
                    if (serviceResponse.Data != null)
                    {
                        var data = serviceResponse.Data;
                        return Json(data);
                    }
                    else
                    {
                        _logger.LogError(new Exception(serviceResponse.Message), "UD:GetServiceGroupByID:For ServiceGroupID {0}", ServiceGroupID);
                        return Json(new DO_ReturnParameter() { Status = false, Message = serviceResponse.Message });
                    }

                }
                else
                {
                    _logger.LogError(new Exception(serviceResponse.Message), "UD:GetServiceGroupByID:For ServiceGroupID {0}", ServiceGroupID);
                    return Json(new DO_ReturnParameter() { Status = false, Message = serviceResponse.Message });
                }

            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:GetServiceGroupByID:For ServiceGroupID {0}", ServiceGroupID);
                return Json(new DO_ReturnParameter() { Status = false, Message = ex.ToString() });
            }
        }
        public async Task<ActionResult> AddOrUpdateServiceGroup(DO_ServiceGroup obj)
        {
            try
            {
                obj.FormId = AppSessionVariables.GetSessionFormInternalID(HttpContext);
                obj.CreatedOn = DateTime.Now;
                obj.UserID = AppSessionVariables.GetSessionUserID(HttpContext);
                obj.TerminalID = AppSessionVariables.GetIPAddress(HttpContext);

                var serviceResponse = await _eSyaServicesAPIServices.HttpClientServices.PostAsJsonAsync<DO_ReturnParameter>("ServiceManagement/AddOrUpdateServiceGroup", obj);
                if (serviceResponse.Status)
                {
                    return Json(serviceResponse.Data);
                }
                else
                {
                    _logger.LogError(new Exception(serviceResponse.Data.Message), "UD:AddOrUpdateServiceGroup:params:" + JsonConvert.SerializeObject(obj));
                    return Json(new DO_ReturnParameter() { Status = false, Message = serviceResponse.Data.Message });
                }

            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:AddOrUpdateServiceGroup:params:" + JsonConvert.SerializeObject(obj));
                return Json(new { Status = false, Message = ex.ToString() });
            }
        }
        public async Task<ActionResult> UpdateServiceGroupIndex(int serviceTypeId, int serviceGroupId, bool isMoveUp, bool isMoveDown)
        {
            try
            {
                var serviceResponse = await _eSyaServicesAPIServices.HttpClientServices.GetAsync<DO_ReturnParameter>("ServiceManagement/UpdateServiceGroupIndex?serviceTypeId=" + serviceTypeId + "&serviceGroupId=" + serviceGroupId + "&isMoveUp=" + isMoveUp + "&isMoveDown=" + isMoveDown);
                if (serviceResponse.Status)
                {
                    return Json(serviceResponse.Data);
                }
                else
                {
                    _logger.LogError(new Exception(serviceResponse.Data.Message), "UD:UpdateServiceGroupIndex:For serviceTypeId {0}, serviceGroupId {1},isMoveUp {2},isMoveDown {3} ", serviceTypeId, serviceGroupId, isMoveUp, isMoveDown);
                    return Json(new DO_ReturnParameter() { Status = false, Message = serviceResponse.Data.Message });
                }

            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:UpdateServiceGroupIndex:For serviceTypeId {0}, serviceGroupId {1},isMoveUp {2},isMoveDown {3} ", serviceTypeId, serviceGroupId, isMoveUp, isMoveDown);
                return Json(new { Status = false, Message = ex.ToString() });
            }
        }
        #endregion
        #region ServiceClass
        public async Task<ActionResult> GetServiceClasses()
        {
            try
            {
                var serviceResponse = await _eSyaServicesAPIServices.HttpClientServices.GetAsync<List<DO_ServiceType>>("ServiceManagement/GetServiceTypes");
                var st_list = new List<DO_ServiceType>();
                if (serviceResponse.Status)
                {
                    st_list = serviceResponse.Data.FindAll(w => w.ActiveStatus == true);
                }
                else
                {
                    _logger.LogError(new Exception(serviceResponse.Message), "UD:GetServiceClasses:GetServiceTypes");
                }
                var serviceResponse1 = await _eSyaServicesAPIServices.HttpClientServices.GetAsync<List<DO_ServiceGroup>>("ServiceManagement/GetServiceGroups");
                var sg_list = new List<DO_ServiceGroup>();
                if (serviceResponse.Status)
                {
                    sg_list = serviceResponse1.Data.FindAll(w => w.ActiveStatus == true);
                }
                else
                {
                    _logger.LogError(new Exception(serviceResponse.Message), "UD:GetServiceClasses:GetServiceGroups");
                }
                var sc_list = new List<DO_ServiceClass>();
                var serviceResponse2 = await _eSyaServicesAPIServices.HttpClientServices.GetAsync<List<DO_ServiceClass>>("ServiceManagement/GetServiceClasses");
                if (serviceResponse.Status)
                {
                    sc_list = serviceResponse2.Data;
                }
                else
                {
                    _logger.LogError(new Exception(serviceResponse.Message), "UD:GetServiceClasses:GetServiceClasses");
                }
                List<jsTreeObject> treeView = new List<jsTreeObject>();
                jsTreeObject jsObj = new jsTreeObject();
                jsObj.id = "SC";
                jsObj.parent = "#";
                jsObj.text = "Service Classes";
                jsObj.icon = "/images/jsTree/foldergroupicon.png";
                jsObj.state = new stateObject { opened = true, selected = false };
                treeView.Add(jsObj);
                if (st_list != null)
                {
                    foreach (var st in st_list)
                    {
                        jsObj = new jsTreeObject();
                        jsObj.id = "T" + st.ServiceTypeId.ToString();
                        jsObj.text = st.ServiceTypeDesc;
                        jsObj.icon = "/images/jsTree/openfolder.png";
                        jsObj.parent = "SC";
                        jsObj.state = new stateObject { opened = false, selected = false };
                        treeView.Add(jsObj);
                        if (sg_list != null)
                        {
                            foreach (var sg in sg_list)
                            {
                                if (st.ServiceTypeId == sg.ServiceTypeId)
                                {
                                    jsObj = new jsTreeObject();
                                    jsObj.id = sg.ServiceGroupId.ToString();
                                    jsObj.text = sg.ServiceGroupDesc;
                                    jsObj.icon = "/images/jsTree/openfolder.png";
                                    jsObj.parent = "T" + st.ServiceTypeId.ToString();
                                    jsObj.state = new stateObject { opened = false, selected = false };
                                    treeView.Add(jsObj);


                                    if (sc_list != null)
                                    {
                                        foreach (var sc in sc_list)
                                        {
                                            if (sg.ServiceGroupId == sc.ServiceGroupId)
                                            {
                                                if (sc.ServiceClassId == sc.ParentId)
                                                {
                                                    jsObj = new jsTreeObject();
                                                    jsObj.id = "C" + sc.ServiceClassId.ToString();
                                                    jsObj.text = sc.ServiceClassDesc;
                                                    jsObj.icon = "/images/jsTree/fileIcon.png";
                                                    jsObj.parent = sg.ServiceGroupId.ToString();
                                                    treeView.Add(jsObj);
                                                }
                                                else
                                                {
                                                    jsObj = new jsTreeObject();
                                                    jsObj.id = "C" + sc.ServiceClassId.ToString();
                                                    jsObj.text = sc.ServiceClassDesc;
                                                    jsObj.icon = "/images/jsTree/fileIcon.png";
                                                    jsObj.parent = "C" + sc.ParentId.ToString();
                                                    treeView.Add(jsObj);
                                                }

                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                return Json(treeView);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:GetServiceClasses");
                return Json(new DO_ReturnParameter() { Status = false, Message = ex.ToString() });
            }



        }
        public async Task<ActionResult> GetServiceClassByID(int ServiceClassID)
        {
            try
            {
                var serviceResponse = await _eSyaServicesAPIServices.HttpClientServices.GetAsync<DO_ServiceClass>("ServiceManagement/GetServiceClassByID?ServiceClassID=" + ServiceClassID);
                if (serviceResponse.Status)
                {
                    var data = serviceResponse.Data;
                    return Json(data);
                }
                else
                {
                    _logger.LogError(new Exception(serviceResponse.Message), "UD:GetServiceClassByID:For ServiceClassID {0}", ServiceClassID);
                    return Json(new DO_ReturnParameter() { Status = false, Message = serviceResponse.Message });
                }

            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:GetServiceClassByID:For ServiceClassID {0}", ServiceClassID);
                return Json(new DO_ReturnParameter() { Status = false, Message = ex.ToString() });
            }
        }
        public async Task<ActionResult> AddOrUpdateServiceClass(DO_ServiceClass obj)
        {
            try
            {
                obj.FormId = AppSessionVariables.GetSessionFormInternalID(HttpContext);
                obj.CreatedOn = DateTime.Now;
                obj.UserID = AppSessionVariables.GetSessionUserID(HttpContext);
                obj.TerminalID = AppSessionVariables.GetIPAddress(HttpContext);


                var serviceResponse = await _eSyaServicesAPIServices.HttpClientServices.PostAsJsonAsync<DO_ReturnParameter>("ServiceManagement/AddOrUpdateServiceClass", obj);
                if (serviceResponse.Status)
                {
                    if (serviceResponse.Data != null)
                    {
                        return Json(serviceResponse.Data);
                    }
                    else
                    {
                        _logger.LogError(new Exception(serviceResponse.Data.Message), "UD:AddOrUpdateServiceClass:params:" + JsonConvert.SerializeObject(obj));
                        return Json(new DO_ReturnParameter() { Status = false, Message = serviceResponse.Data.Message });
                    }

                }
                else
                {
                    _logger.LogError(new Exception(serviceResponse.Message), "UD:AddOrUpdateServiceClass:params:" + JsonConvert.SerializeObject(obj));
                    return Json(new DO_ReturnParameter() { Status = false, Message = serviceResponse.Message });
                }

            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:AddOrUpdateServiceClass:params:" + JsonConvert.SerializeObject(obj));
                return Json(new DO_ReturnParameter() { Status = false, Message = ex.ToString() });
            }
        }
        public async Task<ActionResult> UpdateServiceClassIndex(int serviceGroupId, int serviceClassId, bool isMoveUp, bool isMoveDown)
        {
            try
            {
                var serviceResponse = await _eSyaServicesAPIServices.HttpClientServices.GetAsync<DO_ReturnParameter>("ServiceManagement/UpdateServiceClassIndex?serviceGroupId=" + serviceGroupId + "&serviceClassId=" + serviceClassId + "&isMoveUp=" + isMoveUp + "&isMoveDown=" + isMoveDown);
                if (serviceResponse.Status)
                {
                    if (serviceResponse.Data != null)
                    {
                        return Json(serviceResponse.Data);
                    }
                    else
                    {
                        _logger.LogError(new Exception(serviceResponse.Data.Message), "UD:UpdateServiceClassIndex:For serviceGroupId {0}, serviceClassId {1},isMoveUp {2},isMoveDown {3} ", serviceGroupId, serviceClassId, isMoveUp, isMoveDown);
                        return Json(new { Status = false, Message = serviceResponse.Data.Message });
                    }

                }
                else
                {
                    _logger.LogError(new Exception(serviceResponse.Message), "UD:UpdateServiceClassIndex:For serviceGroupId {0}, serviceClassId {1},isMoveUp {2},isMoveDown {3} ", serviceGroupId, serviceClassId, isMoveUp, isMoveDown);
                    return Json(new DO_ReturnParameter() { Status = false, Message = serviceResponse.Message });
                }

            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:UpdateServiceClassIndex:For serviceGroupId {0}, serviceClassId {1},isMoveUp {2},isMoveDown {3} ", serviceGroupId, serviceClassId, isMoveUp, isMoveDown);
                return Json(new { Status = false, Message = ex.ToString() });
            }
        }
        #endregion
        #region ServiceCode
        public async Task<ActionResult> GetServiceCodes()
        {
            try
            {
                var serviceResponse = await _eSyaServicesAPIServices.HttpClientServices.GetAsync<List<DO_ServiceType>>("ServiceManagement/GetServiceTypes");
                var st_list = new List<DO_ServiceType>();
                if (serviceResponse.Status)
                {
                    st_list = serviceResponse.Data.FindAll(w => w.ActiveStatus == true);
                }
                else
                {
                    _logger.LogError(new Exception(serviceResponse.Message), "UD:GetServiceCodes:GetServiceTypes");
                }
                var serviceResponse1 = await _eSyaServicesAPIServices.HttpClientServices.GetAsync<List<DO_ServiceGroup>>("ServiceManagement/GetServiceGroups");
                var sg_list = new List<DO_ServiceGroup>();
                if (serviceResponse.Status)
                {
                    sg_list = serviceResponse1.Data.FindAll(w => w.ActiveStatus == true);
                }
                else
                {
                    _logger.LogError(new Exception(serviceResponse.Message), "UD:GetServiceCodes:GetServiceGroups");
                }
                var serviceResponse2 = await _eSyaServicesAPIServices.HttpClientServices.GetAsync<List<DO_ServiceClass>>("ServiceManagement/GetServiceClasses");
                var sc_list = new List<DO_ServiceClass>();
                if (serviceResponse.Status)
                {
                    sc_list = serviceResponse2.Data.FindAll(w => w.ActiveStatus == true);
                }
                else
                {
                    _logger.LogError(new Exception(serviceResponse.Message), "UD:GetServiceCodes:GetServiceClasses");
                }
                var serviceResponse3 = await _eSyaServicesAPIServices.HttpClientServices.GetAsync<List<DO_ServiceCode>>("ServiceManagement/GetServiceCodes");
                var sm_list = new List<DO_ServiceCode>();
                if (serviceResponse.Status)
                {
                    sm_list = serviceResponse3.Data.FindAll(w => w.ActiveStatus == true);
                }
                else
                {
                    _logger.LogError(new Exception(serviceResponse.Message), "UD:GetServiceCodes:GetServiceCodes");
                }

                List<jsTreeObject> treeView = new List<jsTreeObject>();
                jsTreeObject jsObj = new jsTreeObject();
                jsObj.id = "SM";
                jsObj.parent = "#";
                jsObj.text = "Services";
                jsObj.icon = "/images/jsTree/foldergroupicon.png";
                jsObj.state = new stateObject { opened = true, selected = false };
                treeView.Add(jsObj);
                if (st_list != null)
                {
                    foreach (var st in st_list)
                    {
                        jsObj = new jsTreeObject();
                        jsObj.id = "T" + st.ServiceTypeId.ToString();
                        jsObj.text = st.ServiceTypeDesc;
                        jsObj.icon = "/images/jsTree/openfolder.png";
                        jsObj.parent = "SM";
                        jsObj.state = new stateObject { opened = false, selected = false };
                        treeView.Add(jsObj);
                        if (sg_list != null)
                        {
                            foreach (var sg in sg_list)
                            {
                                if (st.ServiceTypeId == sg.ServiceTypeId)
                                {
                                    jsObj = new jsTreeObject();
                                    jsObj.id = "G" + sg.ServiceGroupId.ToString();
                                    jsObj.text = sg.ServiceGroupDesc;
                                    jsObj.icon = "/images/jsTree/openfolder.png";
                                    jsObj.parent = "T" + st.ServiceTypeId.ToString();
                                    jsObj.state = new stateObject { opened = false, selected = false };
                                    treeView.Add(jsObj);


                                    if (sc_list != null)
                                    {
                                        foreach (var sc in sc_list)
                                        {
                                            if (sg.ServiceGroupId == sc.ServiceGroupId)
                                            {
                                                if (sc.ServiceClassId == sc.ParentId)
                                                {
                                                    jsObj = new jsTreeObject();
                                                    jsObj.id = "C" + sc.ServiceClassId.ToString();
                                                    jsObj.text = sc.ServiceClassDesc;
                                                    jsObj.icon = "/images/jsTree/openfolder.png";
                                                    jsObj.parent = "G" + sg.ServiceGroupId.ToString();
                                                    treeView.Add(jsObj);
                                                }
                                                else
                                                {
                                                    jsObj = new jsTreeObject();
                                                    jsObj.id = "C" + sc.ServiceClassId.ToString();
                                                    jsObj.text = sc.ServiceClassDesc;
                                                    jsObj.icon = "/images/jsTree/openfolder.png";
                                                    jsObj.parent = "C" + sc.ParentId.ToString();
                                                    treeView.Add(jsObj);
                                                }
                                                if (sm_list != null)
                                                {
                                                    foreach (var sm in sm_list)
                                                    {
                                                        if (sc.ServiceClassId == sm.ServiceClassId)
                                                        {
                                                            jsObj = new jsTreeObject();
                                                            jsObj.id = sm.ServiceId.ToString();
                                                            jsObj.text = sm.ServiceDesc;
                                                            jsObj.icon = "/images/jsTree/fileIcon.png";
                                                            jsObj.parent = "C" + sc.ServiceClassId.ToString();
                                                            treeView.Add(jsObj);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                return Json(treeView);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:GetServiceCodes");
                return Json(new DO_ReturnParameter() { Status = false, Message = ex.ToString() });
                throw ex;
            }



        }
        public async Task<ActionResult> GetServiceCodeByID(int ServiceID)
        {
            try
            {
                var serviceResponse = await _eSyaServicesAPIServices.HttpClientServices.GetAsync<DO_ServiceCode>("ServiceManagement/GetServiceCodeByID?ServiceID=" + ServiceID);
                if (serviceResponse.Status)
                {
                    if (serviceResponse.Data != null)
                    {
                        var data = serviceResponse.Data;
                        return Json(data);
                    }
                    else
                    {
                        _logger.LogError(new Exception(serviceResponse.Message), "UD:GetServiceCodeByID:For ServiceID {0}", ServiceID);
                        return Json(new DO_ReturnParameter() { Status = false, Message = serviceResponse.Message });
                    }

                }
                else
                {
                    _logger.LogError(new Exception(serviceResponse.Message), "UD:GetServiceCodeByID:For ServiceID {0}", ServiceID);
                    return Json(new DO_ReturnParameter() { Status = false, Message = serviceResponse.Message });
                }

            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:GetServiceCodeByID:For ServiceID {0}", ServiceID);
                return Json(new DO_ReturnParameter() { Status = false, Message = ex.ToString() });
            }
        }
        public async Task<ActionResult> AddOrUpdateServiceCode(DO_ServiceCode obj)
        {
            try
            {
                obj.FormId = AppSessionVariables.GetSessionFormInternalID(HttpContext);
                obj.CreatedOn = DateTime.Now;
                obj.UserID = AppSessionVariables.GetSessionUserID(HttpContext);
                obj.TerminalID = AppSessionVariables.GetIPAddress(HttpContext);

                var serviceResponse = await _eSyaServicesAPIServices.HttpClientServices.PostAsJsonAsync<DO_ReturnParameter>("ServiceManagement/AddOrUpdateServiceCode", obj);
                if (serviceResponse.Status)
                {
                    if (serviceResponse.Data != null)
                    {
                        return Json(serviceResponse.Data);
                    }
                    else
                    {
                        _logger.LogError(new Exception(serviceResponse.Data.Message), "UD:AddOrUpdateServiceCode:params:" + JsonConvert.SerializeObject(obj));
                        return Json(new DO_ReturnParameter() { Status = false, Message = serviceResponse.Data.Message });
                    }

                }
                else
                {
                    _logger.LogError(new Exception(serviceResponse.Message), "UD:AddOrUpdateServiceCode:params:" + JsonConvert.SerializeObject(obj));
                    return Json(new DO_ReturnParameter() { Status = false, Message = serviceResponse.Message });
                }

            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:AddOrUpdateServiceCode:params:" + JsonConvert.SerializeObject(obj));
                return Json(new { Status = false, Message = ex.ToString() });
            }
        }
        #endregion
        #region ServiceCode
        public async Task<ActionResult> GetServiceCodePatterns()
        {
            try
            {
                var serviceResponse = await _eSyaServicesAPIServices.HttpClientServices.GetAsync<List<DO_ServiceCodePattern>>("ServiceManagement/GetServiceCodePatterns");
                if (serviceResponse.Status)
                {
                    if (serviceResponse.Data != null)
                    {
                        var Patterns_list = serviceResponse.Data;
                        return Json(Patterns_list);
                    }
                    return Json(new DO_ReturnParameter() { Status = false, Message = serviceResponse.Message });
                }
                else
                {
                    _logger.LogError(new Exception(serviceResponse.Message), "UD:GetServiceCodePatterns");
                    return Json(new DO_ReturnParameter() { Status = false, Message = serviceResponse.Message });
                }

                
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:GetServiceCodePatterns");
                return Json(new DO_ReturnParameter() { Status = false, Message = ex.Message });
            }
        }
        public async Task<ActionResult> AddServiceCodePattern(DO_ServiceCodePattern obj)
        {
            try
            {
                //obj.FormID = AppSessionVariables.GetSessionFormInternalID(HttpContext);
                obj.FormId = "V_1504_00";
                obj.CreatedOn = DateTime.Now;
                obj.UserID = AppSessionVariables.GetSessionUserID(HttpContext);
                obj.TerminalID = AppSessionVariables.GetIPAddress(HttpContext);

                var serviceResponse = await _eSyaServicesAPIServices.HttpClientServices.PostAsJsonAsync<DO_ReturnParameter>("ServiceManagement/AddServiceCodePattern", obj);
                if (serviceResponse.Status)
                {
                    if (serviceResponse.Data != null)
                    {
                        return Json(serviceResponse.Data);
                    }
                    else
                    {
                        _logger.LogError(new Exception(serviceResponse.Data.Message), "UD:AddServiceCodePattern:params:" + JsonConvert.SerializeObject(obj));
                        return Json(new DO_ReturnParameter() { Status = false, Message = serviceResponse.Data.Message });
                    }

                }
                else
                {
                    _logger.LogError(new Exception(serviceResponse.Message), "UD:AddServiceCodePattern:params:" + JsonConvert.SerializeObject(obj));
                    return Json(new DO_ReturnParameter() { Status = false, Message = serviceResponse.Message });
                }

            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:AddServiceCodePattern:params:" + JsonConvert.SerializeObject(obj));
                return Json(new DO_ReturnParameter() { Status = false, Message = ex.ToString() });
            }
        }

        #endregion

    }
}