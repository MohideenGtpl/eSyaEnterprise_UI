using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading.Tasks;
using eSyaEnterprise_UI.Areas.Config.Data;
using eSyaEnterprise_UI.Areas.eSyaFA.Data;
using eSyaEnterprise_UI.Areas.eSyaUserManagement.Data;
using eSyaEnterprise_UI.Areas.eSyaVendor.Data;
using eSyaEnterprise_UI.Areas.eSyaClinicalServices.Data;
using Microsoft.AspNetCore.Authentication.Cookies;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Localization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Razor;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Options;
using Newtonsoft.Json.Serialization;
using eSyaEssentials_UI;
using eSyaEnterprise_UI.Areas.eSyaMaterial.Data;
using Microsoft.AspNetCore.Localization.Routing;
using Microsoft.Extensions.Localization;
using Newtonsoft.Json;
using System.IO;
//using eSyaEnterprise_UI.Extension;
using eSyaEnterprise_UI.DataServices;
using eSyaEnterprise_UI.ActionFilter;
using Microsoft.AspNetCore.Identity;
using eSyaEnterprise_UI.Models;
using Microsoft.Extensions.DependencyInjection.Extensions;
using Microsoft.EntityFrameworkCore;

namespace eSyaEnterprise_UI
{
    public class Startup
    {
        public Startup(IConfiguration configuration)
        {
            Configuration = configuration;
        }

        public IConfiguration Configuration { get; }

        // This method gets called by the runtime. Use this method to add services to the container.

        public void ConfigureServices(IServiceCollection services)
        {
            // Sesssion
            services.AddDistributedMemoryCache();
            services.AddSession(options =>
            {
                options.IdleTimeout = TimeSpan.FromMinutes(60);
                options.Cookie.HttpOnly = true;
                // Make the session cookie essential
                options.Cookie.IsEssential = true;
            });
            services.Configure<CookiePolicyOptions>(options =>
            {
                options.CheckConsentNeeded = context => true;
                options.MinimumSameSitePolicy = SameSiteMode.None;
            });


            services.AddHttpClient<IHttpClientServices, HttpClientServices>();

            services.AddHttpClient<IeSyaGatewayServices, eSyaGatewayServices>(p =>
            {
                p.BaseAddress = new Uri(Configuration.GetValue<string>("eSyaGateway_API"));
                p.DefaultRequestHeaders.Add("dbContextType", Configuration.GetValue<string>("dbContextType"));
                p.DefaultRequestHeaders.Add("Apikey", Configuration.GetValue<string>("Apikey"));
            });

            services.AddHttpClient<IeSyaConfigAPIServices, eSyaConfigAPIServices>(p =>
            {
                p.BaseAddress = new Uri(Configuration.GetValue<string>("eSyaWebAPIUrl"));
                p.DefaultRequestHeaders.Add("dbContextType", Configuration.GetValue<string>("dbContextType"));
                p.DefaultRequestHeaders.Add("Apikey", Configuration.GetValue<string>("Apikey"));
            });

            services.AddHttpClient<IeSyaFixedAssetsAPIServices, eSyaFixedAssetsAPIServices>(p =>
            {
                p.BaseAddress = new Uri(Configuration.GetValue<string>("eSyaFA_API"));
                p.DefaultRequestHeaders.Add("dbContextType", Configuration.GetValue<string>("dbContextType"));
                p.DefaultRequestHeaders.Add("Apikey", Configuration.GetValue<string>("Apikey"));
            });

            services.AddHttpClient<IeSyaUserManagementAPIServices, eSyaUserManagementAPIServices>(p =>
            {
                p.BaseAddress = new Uri(Configuration.GetValue<string>("eSyaUserMgmt_API"));
                p.DefaultRequestHeaders.Add("dbContextType", Configuration.GetValue<string>("dbContextType"));
                p.DefaultRequestHeaders.Add("Apikey", Configuration.GetValue<string>("Apikey"));
            });

            services.AddHttpClient<IeSyaMaterialAPIServices, eSyaMaterialAPIServices>(p =>
            {
                p.BaseAddress = new Uri(Configuration.GetValue<string>("eSyaMaterial_API"));
                p.DefaultRequestHeaders.Add("dbContextType", Configuration.GetValue<string>("dbContextType"));
                p.DefaultRequestHeaders.Add("Apikey", Configuration.GetValue<string>("Apikey"));
            });

            services.AddHttpClient<IeSyaVendorAPIServices, eSyaVendorAPIServices>(p =>
            {
                p.BaseAddress = new Uri(Configuration.GetValue<string>("eSyaVendor_API"));
                p.DefaultRequestHeaders.Add("dbContextType", Configuration.GetValue<string>("dbContextType"));
                p.DefaultRequestHeaders.Add("Apikey", Configuration.GetValue<string>("Apikey"));
            });

            services.AddHttpClient<IeSyaClinicalAPIServices, eSyaClinicalAPIServices>(p =>
            {
                p.BaseAddress = new Uri(Configuration.GetValue<string>("eSyaClinicalSevices_API"));
                p.DefaultRequestHeaders.Add("dbContextType", Configuration.GetValue<string>("dbContextType"));
                p.DefaultRequestHeaders.Add("Apikey", Configuration.GetValue<string>("Apikey"));
            });

            services.AddSingleton<IUserAccountServices, UserAccountServices>();

           
            services.AddLocalization(options => options.ResourcesPath = "Resources");

            services.Configure<RequestLocalizationOptions>(options =>
            {
                var supportedCultures = new List<CultureInfo>  {
                         new CultureInfo("en-IN"),
                         new CultureInfo("en-US"),
                         new CultureInfo("ar-EG")
                   };
                //options.RequestCultureProviders.Clear();
                options.DefaultRequestCulture = new RequestCulture("en-US");
                options.SupportedCultures = supportedCultures;
                options.SupportedUICultures = supportedCultures;
                options.RequestCultureProviders = new List<IRequestCultureProvider>
                {
                    new QueryStringRequestCultureProvider(),
                    new CookieRequestCultureProvider()
                };
            });

            services.AddDbContext<ApplicationDbContext>(options =>
             options.UseSqlServer(Configuration.GetConnectionString("dbConn_eSyaEnterprise")));

            services.AddIdentity<ApplicationUser, ApplicationRole>()
                .AddEntityFrameworkStores<ApplicationDbContext>()
                .AddDefaultTokenProviders();

            services.AddAuthentication(options =>
            {
                options.DefaultSignInScheme = CookieAuthenticationDefaults.AuthenticationScheme;
                options.DefaultAuthenticateScheme = CookieAuthenticationDefaults.AuthenticationScheme;
                options.DefaultChallengeScheme = CookieAuthenticationDefaults.AuthenticationScheme;
            })
            .AddGoogle(opts =>
            {
                opts.ClientId = "717469225962-3vk00r8tglnbts1cgc4j1afqb358o8nj.apps.googleusercontent.com";
                opts.ClientSecret = "babQzWPLGwfOQVi0EYR-7Fbb";
                opts.SignInScheme = IdentityConstants.ExternalScheme;
            })
            .AddCookie(options => { options.LoginPath = "/Login"; });

            services.ConfigureApplicationCookie(options =>
            {
                // Cookie settings
                options.Cookie.HttpOnly = true;
                options.ExpireTimeSpan = TimeSpan.FromMinutes(1);

                options.LoginPath = "/Login/Login";
                options.AccessDeniedPath = "/Login/AccessDenied";
                options.SlidingExpiration = true;
            });

            services.AddSingleton<ViewBagActionFilter>();

            services.AddMvc()
                //options =>
                //    {
                //        options.Filters.Add<ViewBagActionFilter>();
                //    })
                .AddViewLocalization(LanguageViewLocationExpanderFormat.Suffix)
                .AddDataAnnotationsLocalization()
                //.AddRazorOptions(options => options.AllowRecompilingViewsOnFileChange = true)
                .AddJsonOptions(options => options.SerializerSettings.ContractResolver = new DefaultContractResolver())
                .SetCompatibilityVersion(CompatibilityVersion.Version_2_2)
                .AddRazorPagesOptions(options =>
                {
                    options.Conventions.AuthorizeFolder("/");
                    options.Conventions.AllowAnonymousToPage("/Login");
                });

            services.AddSingleton<IHttpContextAccessor, HttpContextAccessor>();

        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IHostingEnvironment env)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }
            else
            {
                app.UseExceptionHandler("/Home/Error");
                app.UseHsts();
            }


            var localizeOptions = app.ApplicationServices.GetService<IOptions<RequestLocalizationOptions>>();
            var options = localizeOptions.Value;
            //options.RequestCultureProviders.Insert(0, new JsonRequestCultureProvider());
            app.UseRequestLocalization(options);

            app.UseHttpsRedirection();
            app.UseStaticFiles();
            app.UseCookiePolicy(new CookiePolicyOptions
            {
                HttpOnly = Microsoft.AspNetCore.CookiePolicy.HttpOnlyPolicy.Always,
                Secure = CookieSecurePolicy.Always,
                MinimumSameSitePolicy = SameSiteMode.None
            });
            app.UseSession();

            app.UseAuthentication();

            app.UseMvc(routes =>
            {
                routes.MapRoute(
                    name: "default",
                    template: "{controller=Login}/{action=Login}/{id?}");

                routes.MapRoute(
                    name: "Areas",
                    template: "{area:exists}/{controller=Home}/{action=Index}/{id?}");

            });
        }
    }


}
