using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using eSyaEnterprise_UI.Areas.eSyaClinicalServices.Data;
using eSyaEnterprise_UI.Areas.eSyaClinicalServices.Models;
using eSyaEnterprise_UI.Utility;
using eSyaEnterprise_UI.Models;
using eSyaEnterprise_UI.ActionFilter;

namespace eSyaEnterprise_UI.Areas.eSyaClinicalServices.Controllers
{
    public class SpecialtyController : Controller
    {
        private readonly IeSyaClinicalAPIServices _eSyaClinicalAPIServices;
        public SpecialtyController(IeSyaClinicalAPIServices eSyaClinicalAPIServices)
        {
            _eSyaClinicalAPIServices = eSyaClinicalAPIServices;
        }

        [Area("eSyaClinicalServices")]
        [ServiceFilter(typeof(ViewBagActionFilter))]
        public IActionResult V_1571_00()
        {
            return View();
        }

        /// <summary>
        /// Insert Specialty Codes
        /// </summary>
        [HttpPost]
        public JsonResult InsertSpecialtyCodes(DO_SpecialtyCodes obj)
        {
            try
            {
                obj.UserID = AppSessionVariables.GetSessionUserID(HttpContext);
                obj.TerminalID = AppSessionVariables.GetIPAddress(HttpContext);
                obj.FormId = "V_1571_00";

                var Insertresponse = _eSyaClinicalAPIServices.HttpClientServices.PostAsJsonAsync<DO_ReturnParameter>("SpecialtyCodes/InsertSpecialtyCodes", obj).Result;
                return Json(Insertresponse.Data);

            }
            catch (Exception ex)
            {
                return Json(new DO_ReturnParameter() { Status = false, Message = (ex.InnerException != null) ? ex.InnerException.Message : ex.Message });
            }
        }

        /// <summary>
        /// Update Specialty Codes
        /// </summary>
        [HttpPost]
        public JsonResult UpdateSpecialtyCodes(DO_SpecialtyCodes obj)
        {
            try
            {
                obj.UserID = AppSessionVariables.GetSessionUserID(HttpContext);
                obj.TerminalID = AppSessionVariables.GetIPAddress(HttpContext);

                var response = _eSyaClinicalAPIServices.HttpClientServices.PostAsJsonAsync<DO_ReturnParameter>("SpecialtyCodes/UpdateSpecialtyCodes", obj).Result;
                return Json(response.Data);

            }
            catch (Exception ex)
            {
                return Json(new DO_ReturnParameter() { Status = false, Message = (ex.InnerException != null) ? ex.InnerException.Message : ex.Message });
            }
        }

        /// <summary>
        /// Delete Specialty Codes
        /// </summary>
        [HttpPost]
        public JsonResult DeleteSpecialtyCodes(DO_SpecialtyCodes obj)
        {
            try
            {
                obj.UserID = AppSessionVariables.GetSessionUserID(HttpContext);
                obj.TerminalID = AppSessionVariables.GetIPAddress(HttpContext);

                var response = _eSyaClinicalAPIServices.HttpClientServices.PostAsJsonAsync<DO_ReturnParameter>("SpecialtyCodes/DeleteSpecialtyCodes", obj).Result;
                return Json(response.Data);

            }
            catch (Exception ex)
            {
                return Json(new DO_ReturnParameter() { Status = false, Message = (ex.InnerException != null) ? ex.InnerException.Message : ex.Message });
            }
        }

        /// <summary>
        ///Get Specialty Codes for Tree View
        /// </summary>
        [Produces("application/json")]
        public IActionResult GetSpecialtyTree()
        {

            try
            {
                var response = _eSyaClinicalAPIServices.HttpClientServices.GetAsync<List<DO_SpecialtyCodes>>("SpecialtyCodes/GetSpecialtyCodesList").Result;
                List<DO_SpecialtyCodes> data = response.Data;

                List<jsTreeObject> SpecialtyTree = new List<jsTreeObject>();

                jsTreeObject obj;
                obj = new jsTreeObject();

                obj.id = "H0";
                obj.parent = "#";
                obj.text = "Specialty Codes";
                obj.state = new stateObject { opened = true, selected = false };

                SpecialtyTree.Add(obj);

                //List<DO_SpecialtyCodes> aGroup = data.Select(x => new DO_AssetGroup { AssetGroup = x.AssetGroup, AssetGroupID = x.AssetGroupID }).GroupBy(y => y.AssetGroupID, (key, grp) => grp.FirstOrDefault()).ToList();

                foreach (DO_SpecialtyCodes lst in data)
                {
                    obj = new jsTreeObject();

                    obj.id = lst.SpecialtyID.ToString();
                    obj.parent = "H0";
                    obj.text = lst.SpecialtyDesc;
                    obj.state = new stateObject { opened = false, selected = false };

                    SpecialtyTree.Add(obj);
                }

                return Json(SpecialtyTree);
            }
            catch (Exception ex)
            {
                return Json(new DO_ReturnParameter() { Status = false, Message = (ex.InnerException != null) ? ex.InnerException.Message : ex.Message });
            }

        }

        /// <summary>
        /// Get Specialty Codes Detail
        /// </summary>
        [HttpPost]
        public JsonResult GetSpecialtyCode(int specialtyId)
        {
            try
            {
                var response = _eSyaClinicalAPIServices.HttpClientServices.GetAsync<DO_SpecialtyCodes>("SpecialtyCodes/GetSpecialtyCodes?specialtyId=" + specialtyId).Result;
                if (response.Status)
                {
                    return Json(response.Data);
                }
                else
                {
                    return Json(new DO_ReturnParameter()
                    {
                        Status = false,
                        StatusCode = response.StatusCode.ToString()
                    });
                }
            }
            catch (Exception ex)
            {
                return Json(new DO_ReturnParameter() { Status = false, Message = (ex.InnerException != null) ? ex.InnerException.Message : ex.Message });
            }
        }

        [Area("eSyaClinicalServices")]
        [ServiceFilter(typeof(ViewBagActionFilter))]
        public IActionResult V_1572_00()
        {
            ViewBag.UserFormRoles = new DO_UserFormRole { IsInsert = true, IsEdit = true, IsDelete = false };
            var response2 = _eSyaClinicalAPIServices.HttpClientServices.GetAsync<List<DO_BusinessLocation>>("CommonData/GetBusinessKey").Result;
            ViewBag.BusinessKey = response2.Data;

            ViewBag.SpecialtyParameter = ParameterValues.SpecialtyParameter;

            ViewBag.formName = "Business Specialty Link";
            return View();
        }

        /// <summary>
        ///Get Specialty Codes for Tree View
        /// </summary>
        [Produces("application/json")]
        public IActionResult GetSpecialtyLinkTree(int businessKey)
        {

            try
            {
                var response = _eSyaClinicalAPIServices.HttpClientServices.GetAsync<List<DO_SpecialtyClinicLink>>("Specialty/GetSpecialtyClinicList?businessKey=" + businessKey).Result;
                List<DO_SpecialtyClinicLink> data = response.Data;

                List<jsTreeObject> SpecialtyTree = new List<jsTreeObject>();

                jsTreeObject obj;

                List<DO_SpecialtyClinicLink> sCodes = data.Select(x => new DO_SpecialtyClinicLink { SpecialtyID = x.SpecialtyID, SpecialtyDesc = x.SpecialtyDesc }).GroupBy(y => y.SpecialtyID, (key, grp) => grp.FirstOrDefault()).ToList();

                foreach (DO_SpecialtyClinicLink lst in sCodes)
                {
                    obj = new jsTreeObject
                    {
                        parent = "#",
                        text = lst.SpecialtyDesc
                    };
                    var cl = data.Where(w => w.SpecialtyID == lst.SpecialtyID && w.BusinessKey == businessKey && w.ClinicID != 0).FirstOrDefault();
                    if (cl != null)
                    {
                        obj.id = "Y" + lst.SpecialtyID.ToString();
                        obj.icon = "/images/jsTree/checkedstate.jpg";
                    }
                    else
                    {
                        obj.id = "N" + lst.SpecialtyID.ToString();
                    }
                    /*if (cl == null)
                        obj.state = new stateObject { opened = false, Checked = false, checkbox_disabled = true };
                    else
                        obj.state = new stateObject { opened = false, Checked = true, checkbox_disabled = true };*/

                    SpecialtyTree.Add(obj);
                }

                return Json(SpecialtyTree);
            }
            catch (Exception ex)
            {
                return Json(new DO_ReturnParameter() { Status = false, Message = (ex.InnerException != null) ? ex.InnerException.Message : ex.Message });
            }

        }

        /// <summary>
        /// Insert Specialty Clinic Link
        /// </summary>
        [HttpPost]
        public JsonResult InsertSpecialtyClinicLink(DO_SpecialtyClinicLink obj)
        {
            try
            {
                obj.BusinessKey = AppSessionVariables.GetSessionBusinessKey(HttpContext);
                obj.UserID = AppSessionVariables.GetSessionUserID(HttpContext);
                obj.TerminalID = AppSessionVariables.GetIPAddress(HttpContext);
                obj.FormId = "V_1572_00";

                var Insertresponse = _eSyaClinicalAPIServices.HttpClientServices.PostAsJsonAsync<DO_ReturnParameter>("Specialty/InsertSpecialtyClinicLink", obj).Result;
                return Json(Insertresponse.Data);

            }
            catch (Exception ex)
            {
                return Json(new DO_ReturnParameter() { Status = false, Message = (ex.InnerException != null) ? ex.InnerException.Message : ex.Message });
            }
        }

        /// <summary>
        /// Insert Specialty Clinic Link
        /// </summary>
        [HttpPost]
        //public JsonResult InsertSpecialtyClinicLinkList(List<DO_SpecialtyClinicLink> obj, List<DO_Parameters> objPar, int specialtyId, int businessKey)
        public JsonResult InsertSpecialtyClinicLinkList(List<DO_SpecialtyClinicLink> obj, List<DO_SpecialtyParameter> objPar, int specialtyId, int businessKey)
        {
            try
            {
                obj.All(c =>
                {
                    c.UserID = AppSessionVariables.GetSessionUserID(HttpContext);
                    c.TerminalID = AppSessionVariables.GetIPAddress(HttpContext);
                    c.FormId = AppSessionVariables.GetSessionFormInternalID(HttpContext);
                    return true;
                });

                //List<DO_SpecialtyParameter> objSpPar = new List<DO_SpecialtyParameter>();
                //foreach (DO_Parameters par in objPar)
                //{
                //    if (par.ParameterValue == "false" || string.IsNullOrEmpty(par.ParameterValue))
                //    { }
                //    else
                //    {
                //        DO_SpecialtyParameter spPar = new DO_SpecialtyParameter
                //        {
                //            BusinessKey = businessKey,
                //            SpecialtyID = specialtyId,
                //            ParameterID = par.ParameterID,
                //            ParmPerc = par.ParameterType == "P" ? Convert.ToDecimal(par.ParameterValue) : 0,
                //            ParmAction = par.ParameterType == "B" ? Convert.ToBoolean(par.ParameterValue) : false,
                //            ParmDesc = par.ParameterType == "T" ? par.ParameterValue : string.Empty,
                //            ParmValue = par.ParameterType == "A" || par.ParameterType == "V" ? Convert.ToDecimal(par.ParameterValue) : 0,
                //            ActiveStatus = true,
                //            UserID = AppSessionVariables.GetSessionUserID(HttpContext),
                //            TerminalID = AppSessionVariables.GetIPAddress(HttpContext),
                //            FormId = "V_1572_00"
                //        };
                //        objSpPar.Add(spPar);
                //    }
                //}

                objPar.All(c =>
                {
                    c.BusinessKey = businessKey;
                    c.SpecialtyID = specialtyId;
                    c.ActiveStatus = true;
                    c.UserID = AppSessionVariables.GetSessionUserID(HttpContext);
                    c.TerminalID = AppSessionVariables.GetIPAddress(HttpContext);
                    c.FormId = AppSessionVariables.GetSessionFormInternalID(HttpContext);
                    return true;
                });

                DO_SpecialtyBusiness objBus = new DO_SpecialtyBusiness { SpecialtyClinic = obj, SpecialtyParam = objPar };

                var Insertresponse = _eSyaClinicalAPIServices.HttpClientServices.PostAsJsonAsync<DO_ReturnParameter>("Specialty/InsertSpecialtyClinicLinkList", objBus).Result;
                return Json(Insertresponse.Data);

            }
            catch (Exception ex)
            {
                return Json(new DO_ReturnParameter() { Status = false, Message = (ex.InnerException != null) ? ex.InnerException.Message : ex.Message });
            }
        }

        /// <summary>
        /// Update Specialty Clinic Link
        /// </summary>
        [HttpPost]
        public JsonResult UpdateSpecialtyClinicLink(DO_SpecialtyClinicLink obj)
        {
            try
            {
                obj.BusinessKey = AppSessionVariables.GetSessionBusinessKey(HttpContext);
                obj.UserID = AppSessionVariables.GetSessionUserID(HttpContext);
                obj.TerminalID = AppSessionVariables.GetIPAddress(HttpContext);

                var response = _eSyaClinicalAPIServices.HttpClientServices.PostAsJsonAsync<DO_ReturnParameter>("Specialty/UpdateSpecialtyClinicLink", obj).Result;
                return Json(response.Data);

            }
            catch (Exception ex)
            {
                return Json(new DO_ReturnParameter() { Status = false, Message = (ex.InnerException != null) ? ex.InnerException.Message : ex.Message });
            }
        }

        /// <summary>
        /// Get Specialty Clinic Link
        /// </summary>
        [HttpPost]
        public JsonResult GetSpecialtyClinicLink(int businessKey, int specialtyId)
        {
            try
            {
                var response = _eSyaClinicalAPIServices.HttpClientServices.GetAsync<List<DO_SpecialtyClinicLink>>("Specialty/GetSpecialtyClinicLinkList?businessKey=" + businessKey + "&specialtyId=" + specialtyId).Result;
                
                return Json(response.Data);

            }
            catch (Exception ex)
            {
                return Json(new DO_ReturnParameter() { Status = false, Message = (ex.InnerException != null) ? ex.InnerException.Message : ex.Message });
            }
        }

        /// <summary>
        /// Get Specialty parameter
        /// </summary>
        [HttpPost]
        public JsonResult GetSpecialtyParameter(int businessKey, int specialtyId)
        {
            try
            {
                var response = _eSyaClinicalAPIServices.HttpClientServices.GetAsync<List<DO_SpecialtyParameter>>("Specialty/GetSpecialtyParameterList?businessKey=" + businessKey + "&specialtyId=" + specialtyId).Result;

                return Json(response.Data);

            }
            catch (Exception ex)
            {
                return Json(new DO_ReturnParameter() { Status = false, Message = (ex.InnerException != null) ? ex.InnerException.Message : ex.Message });
            }
        }

        /// <summary>
        /// Get Clinic List From Application Codes
        /// </summary>
        [HttpPost]
        public JsonResult GetClinicList()
        {
            try
            {
                var response = _eSyaClinicalAPIServices.HttpClientServices.GetAsync<List<DO_ApplicationCodes>>("CommonData/GetApplicationCodesByCodeType?codeType=" + eSyaClinicalServices.Data.CodeTypeValues.Clinic).Result;

                return Json(response.Data);

            }
            catch (Exception ex)
            {
                return Json(new DO_ReturnParameter() { Status = false, Message = (ex.InnerException != null) ? ex.InnerException.Message : ex.Message });
            }
        }

        [Area("eSyaClinicalServices")]
        [ServiceFilter(typeof(ViewBagActionFilter))]
        public IActionResult V_1573_00()
        {
            //var response = _eSyaClinicalAPIServices.HttpClientServices.GetAsync<List<DO_SpecialtyClinicLink>>("Specialty/GetSpecialtyClinicList?businessKey=" + AppSessionVariables.GetSessionBusinessKey(HttpContext)).Result;
            //List<DO_SpecialtyClinicLink> sCodes = response.Data.Select(x => new DO_SpecialtyClinicLink { SpecialtyID = x.SpecialtyID, SpecialtyDesc = x.SpecialtyDesc }).GroupBy(y => y.SpecialtyID, (key, grp) => grp.FirstOrDefault()).ToList();
            //ViewBag.Specialty = sCodes;

            var response2 = _eSyaClinicalAPIServices.HttpClientServices.GetAsync<List<DO_BusinessLocation>>("CommonData/GetBusinessKey").Result;
            ViewBag.BusinessKey = response2.Data;

            ViewBag.formName = "Specialty Doctor Link";
            return View();
        }

        /// <summary>
        ///Get Specialty Codes for Tree View
        /// </summary>
        [Produces("application/json")]
        public IActionResult GetDoctorClinicLinkTree(int businessKey, int specialtyId)
        {

            try
            {
                var response = _eSyaClinicalAPIServices.HttpClientServices.GetAsync<List<DO_SpecialtyDoctorLink>>("Specialty/GetSpecialtyDoctorLinkList?businessKey=" + businessKey + "&specialtyId=" + specialtyId).Result;
                //List <DO_SpecialtyDoctorLink> data = response.Data.Where(x => x.ActiveStatus).ToList();

                List<jsTreeObject> SpecialtyTree = new List<jsTreeObject>();

                jsTreeObject obj;
                obj = new jsTreeObject();

                obj.id = "H0";
                obj.parent = "#";
                obj.text = "Doctor Names";
                obj.state = new stateObject { opened = true, selected = false };

                //SpecialtyTree.Add(obj);

                if (response.Data != null)
                {
                    List<DO_SpecialtyDoctorLink> sCodes = response.Data.Select(x => new DO_SpecialtyDoctorLink { DoctorID = x.DoctorID, DoctorName = x.DoctorName }).GroupBy(y => y.DoctorID, (key, grp) => grp.FirstOrDefault()).ToList();

                    foreach (DO_SpecialtyDoctorLink lst in sCodes)
                    {
                        obj = new jsTreeObject
                        {
                            id = "DR" + lst.DoctorID.ToString(),
                            parent = "#",
                            text = lst.DoctorName
                        };
                        //var cl = response.Data.Where(w => w.SpecialtyID == lst.SpecialtyID && w.BusinessKey == AppSessionVariables.GetSessionBusinessKey(HttpContext) && w.ClinicID != 0).FirstOrDefault();
                        //if (cl == null)
                        //obj.state = new stateObject { opened = false, selected = false, checkbox_disabled = true };
                        //else
                        //    obj.state = new stateObject { opened = false, selected = true };

                        SpecialtyTree.Add(obj);

                        List<DO_SpecialtyDoctorLink> ClinicLink = response.Data.Where(x => x.DoctorID == lst.DoctorID).ToList();

                        foreach (DO_SpecialtyDoctorLink cln in ClinicLink)
                        {
                            obj = new jsTreeObject
                            {
                                id = "DR" + lst.DoctorID.ToString() + "_CL" + cln.ClinicID.ToString(),
                                parent = "DR" + lst.DoctorID.ToString(),
                                text = cln.ClinicDesc
                            };
                            var cl = response.Data.Where(w => w.DoctorID == lst.DoctorID && w.ClinicID == cln.ClinicID && w.ActiveStatus).FirstOrDefault();
                            if (cl == null)
                                obj.state = new stateObject { opened = false, selected = false };
                            else
                                obj.state = new stateObject { opened = false, selected = true };

                            SpecialtyTree.Add(obj);
                        }
                    }
                }
                return Json(SpecialtyTree);
            }
            catch (Exception ex)
            {
                return Json(new DO_ReturnParameter() { Status = false, Message = (ex.InnerException != null) ? ex.InnerException.Message : ex.Message });
            }

        }

        /// <summary>
        /// Insert Specialty Clinic Link
        /// </summary>
        [HttpPost]
        public JsonResult InsertSpecialtyDoctorLinkList(List<DO_SpecialtyDoctorLink> obj)
        {
            try
            {
                obj.All(c =>
                {
                    c.UserID = AppSessionVariables.GetSessionUserID(HttpContext);
                    c.TerminalID = AppSessionVariables.GetIPAddress(HttpContext);
                    c.FormId = "V_1573_00";
                    return true;
                });

                var Insertresponse = _eSyaClinicalAPIServices.HttpClientServices.PostAsJsonAsync<DO_ReturnParameter>("Specialty/InsertSpecialtyDoctorLinkList", obj).Result;
                return Json(Insertresponse.Data);

            }
            catch (Exception ex)
            {
                return Json(new DO_ReturnParameter() { Status = false, Message = (ex.InnerException != null) ? ex.InnerException.Message : ex.Message });
            }
        }

        /// <summary>
        /// Get Clinic List From Application Codes
        /// </summary>
        [HttpPost]
        public JsonResult GetBusinessKey()
        {
            try
            {
                var response = _eSyaClinicalAPIServices.HttpClientServices.GetAsync<List<DO_BusinessLocation>>("CommonData/GetBusinessKey").Result;

                return Json(response.Data);

            }
            catch (Exception ex)
            {
                return Json(new DO_ReturnParameter() { Status = false, Message = (ex.InnerException != null) ? ex.InnerException.Message : ex.Message });
            }
        }

        /// <summary>
        /// Get Specialty List From Specialty Business Link
        /// </summary>
        [HttpPost]
        public JsonResult GetSpecialtyListForBusinessKey(int businessKey)
        {
            try
            {
                var response = _eSyaClinicalAPIServices.HttpClientServices.GetAsync<List<DO_SpecialtyClinicLink>>("Specialty/GetSpecialtyListForBusinessKey?businessKey=" + businessKey).Result;
                //List<DO_SpecialtyClinicLink> sCodes = response.Data.Where(w => w.ActiveStatus).Select(x => new DO_SpecialtyClinicLink { SpecialtyID = x.SpecialtyID, SpecialtyDesc = x.SpecialtyDesc }).GroupBy(y => y.SpecialtyID, (key, grp) => grp.FirstOrDefault()).ToList();

                return Json(response.Data);

            }
            catch (Exception ex)
            {
                return Json(new DO_ReturnParameter() { Status = false, Message = (ex.InnerException != null) ? ex.InnerException.Message : ex.Message });
            }
        }
    }
}