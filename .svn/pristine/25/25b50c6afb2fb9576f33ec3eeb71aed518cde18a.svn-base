using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using Microsoft.AspNetCore.Mvc;
using eSyaEnterprise_UI.Areas.eSyaUserManagement.Data;
using eSyaEnterprise_UI.Areas.eSyaUserManagement.Models;
using eSyaEnterprise_UI.Models;
using eSyaEnterprise_UI.Areas.Config.Models;
using eSyaEnterprise_UI.Utility;
using System.Text.RegularExpressions;

namespace eSyaEnterprise_UI.Areas.eSyaUserManagement.Controllers
{
    public class UserController : Controller
    {
        private readonly IeSyaUserManagementAPIServices _eSyaUMAPIServices;
        public UserController(IeSyaUserManagementAPIServices eSyaUMAPIServices)
        {
            _eSyaUMAPIServices = eSyaUMAPIServices;

        }
        
        [Area("eSyaUserManagement")]
        public IActionResult V_201_00()
        {
            ViewBag.formName = "User Group";
            //int ug_ctype = 1;
            //var Ug_serviceResponse = _eSyaUMAPIServices.HttpClientServices.GetAsync<List<DO_ApplicationCodes>>("ConfigMasterData/GetApplicationCodesByCodeType?codeType=" + ug_ctype).Result;
            //ViewBag.UGappcodes = Ug_serviceResponse.Data;

            //int ut_ctype = 2;
            //var Ut_serviceResponse = _eSyaUMAPIServices.HttpClientServices.GetAsync<List<DO_ApplicationCodes>>("ConfigMasterData/GetApplicationCodesByCodeType?codeType=" + ut_ctype).Result;
            //ViewBag.UTappcodes = Ut_serviceResponse.Data;

            List<int> l_ac = new List<int>();
            l_ac.Add(CodeTypeValues.UserGroup);
            l_ac.Add(CodeTypeValues.UserType);

            var response = _eSyaUMAPIServices.HttpClientServices.PostAsJsonAsync<List<DO_ApplicationCodes>>("CommonData/GetApplicationCodesByCodeTypeList", l_ac).Result;
            List<DO_ApplicationCodes> app_codes = response.Data;
            ViewBag.UGappcodes = app_codes.Where(w => w.CodeType == CodeTypeValues.UserGroup);
            ViewBag.UTappcodes = app_codes.Where(w => w.CodeType == CodeTypeValues.UserType);

            var Menu_serviceResponse = _eSyaUMAPIServices.HttpClientServices.GetAsync<List<DO_MainMenu>>("CommonData/GetConfigureMenulist").Result;
            var MainMenu = Menu_serviceResponse.Data;
            return View(MainMenu);
        }

        [Area("eSyaUserManagement")]
        public IActionResult V_202_00()
        {
            ViewBag.formName = "User Management";
            return View();
        }

       // [Area("eSyaUserManagement")]
        public IActionResult _UserPrivilege()
        {
            ViewBag.formName = "User Group";
            return View();
        }

        public IActionResult _userMenu()
        {
            ViewBag.formName = "User Menu";
            return View();
        }
        
        [Area("eSyaUserManagement")]
        public IActionResult _UserCreation(short UserID)
        {
            List<int> l_ac = new List<int>();
            l_ac.Add(CodeTypeValues.PreferredLanguage);
            l_ac.Add(CodeTypeValues.UserGroup);
            l_ac.Add(CodeTypeValues.UserType);

            var response = _eSyaUMAPIServices.HttpClientServices.PostAsJsonAsync<List<DO_ApplicationCodes>>("CommonData/GetApplicationCodesByCodeTypeList", l_ac).Result;
            List<DO_ApplicationCodes> app_codes = response.Data;

            ViewBag.PLappcodes = app_codes.Where(w => w.CodeType == CodeTypeValues.PreferredLanguage);
            ViewBag.UGappcodes = app_codes.Where(w => w.CodeType == CodeTypeValues.UserGroup);
            ViewBag.UTappcodes = app_codes.Where(w => w.CodeType == CodeTypeValues.UserType);

            ViewBag.UserID = UserID;

            ViewBag.formName = "User Creation";
            return View();
        }

        #region User Group

        /// <summary>
        /// Get Configuration Menu List for js tree
        /// </summary>
        [HttpPost]
        public JsonResult GetConfigureMenulist()
        {
            try
            {
                var serviceResponse = _eSyaUMAPIServices.HttpClientServices.GetAsync<List<DO_MainMenu>>("CommonData/GetConfigureMenulist").Result;
                return Json(serviceResponse.Data);
            }
            catch (Exception ex)
            {
                return Json(new DO_ReturnParameter() { Status = false, Message = (ex.InnerException != null) ? ex.InnerException.Message : ex.Message });
            }
        }

        /// <summary>
        /// Get User Group Menu keys for js tree
        /// </summary>
        [HttpPost]
        public JsonResult GetMenuKeysbyUserGroupAndUserType(int uG, int uT)
        {
            try
            {
                var parameter = "?uG=" + uG + "&uT=" + uT;
                var serviceResponse = _eSyaUMAPIServices.HttpClientServices.GetAsync<List<int>>("UserCreation/GetMenuKeysbyUserGroupAndUserType" + parameter).Result;
                return Json(serviceResponse.Data);

            }
            catch (Exception ex)
            {
                return Json(new DO_ReturnParameter() { Status = false, Message = (ex.InnerException != null) ? ex.InnerException.Message : ex.Message });
            }
        }
        /// <summary>
        /// Insert into User Group
        /// </summary>
        [HttpPost]
        public JsonResult InsertMenukeysIntoUserGroup(DO_UserGroup selectedkeys)
        {

            try
            {
                selectedkeys.UserID = AppSessionVariables.GetSessionUserID(HttpContext);
                selectedkeys.TerminalID = AppSessionVariables.GetIPAddress(HttpContext);
                var serviceResponse = _eSyaUMAPIServices.HttpClientServices.PostAsJsonAsync<DO_ReturnParameter>("UserCreation/InsertMenukeysIntoUserGroup", selectedkeys).Result;
                if (serviceResponse.Status)
                    return Json(serviceResponse.Data);
                else
                    return Json(new DO_ReturnParameter() { Status = false, Message = serviceResponse.Message });
            }

            catch (Exception ex)
            {
                return Json(new { Status = false, Message = ex.InnerException == null ? ex.Message.ToString() : ex.InnerException.Message });
            }
        }

        #endregion User Group

        #region User Creation

        /// <summary>
        ///Get User Master for Grid
        /// </summary>
        [HttpPost]
        public JsonResult GetUserMaster()
        {
            try
            {
                var serviceResponse = _eSyaUMAPIServices.HttpClientServices.GetAsync<List<DO_UserMaster>>("UserCreation/GetUserMaster").Result;
                return Json(serviceResponse.Data);
            }
            catch (Exception ex)
            {
                return Json(new DO_ReturnParameter() { Status = false, Message = (ex.InnerException != null) ? ex.InnerException.Message : ex.Message });
            }
        }

        /// <summary>
        ///Get User Master Details
        /// </summary>
        [HttpPost]
        public JsonResult GetUserDetails(int UserID)
        {
            try
            {
                var parameter = "?UserID=" + UserID;
                var serviceResponse = _eSyaUMAPIServices.HttpClientServices.GetAsync<DO_UserMaster>("UserCreation/GetUserDetails" + parameter).Result;
                var data = serviceResponse.Data;

                string userimageURI = string.Empty;
                if (data.Photo.Length != 0)
                    userimageURI = ConvertByteArraytoImageURI(data.Photo);
                data.userimage = userimageURI;

                string DSimageURI = string.Empty;
                if (data.DigitalSignature.Length != 0)
                    DSimageURI = ConvertByteArraytoImageURI(data.DigitalSignature);
                data.DSimage = DSimageURI;

                return Json(data);
            }
            catch (Exception ex)
            {
                return Json(new DO_ReturnParameter() { Status = false, Message = (ex.InnerException != null) ? ex.InnerException.Message : ex.Message });
            }
        }

        /// <summary>
        ///Get User Business Location for Grid
        /// </summary>
        [HttpPost]
        public JsonResult GetUserBusinessLocation(short UserID)
        {
            try
            {
                var serviceResponse = _eSyaUMAPIServices.HttpClientServices.GetAsync<List<DO_UserBusinessLink>>("UserCreation/GetUserBusinessLocation?UserID=" + UserID + "&CodeTypeUG=" + CodeTypeValues.UserGroup + "&CodeTypeUT=" + CodeTypeValues.UserType).Result;
                return Json(serviceResponse.Data);
            }
            catch (Exception ex)
            {
                return Json(new DO_ReturnParameter() { Status = false, Message = (ex.InnerException != null) ? ex.InnerException.Message : ex.Message });
            }
        }

        /// <summary>
        /// Insert or Update User Master
        /// </summary>
        [HttpPost]
        public JsonResult InsertOrUpdateUserMaster(DO_UserMaster userMaster, string file, string DSfile)
        {
            try
            {
                userMaster.CreatedBy = AppSessionVariables.GetSessionUserID(HttpContext);
                userMaster.TerminalId = AppSessionVariables.GetIPAddress(HttpContext);

                if (file != null)
                {
                    string userbase64 = file;// load base 64 code to this variable from js 
                    Byte[] userbitmapData = new Byte[userbase64.Length];
                    userbitmapData = Convert.FromBase64String(FixBase64ForImage(userbase64));
                    userMaster.Photo = userbitmapData;
                }
                else
                {
                    byte[] emptyByte = { };
                    userMaster.Photo = emptyByte;
                }
                if (DSfile != null)
                {
                    string DSbase64 = DSfile;// load base 64 code to this variable from js 
                    Byte[] DSbitmapData = new Byte[DSbase64.Length];
                    DSbitmapData = Convert.FromBase64String(FixBase64ForImage(DSbase64));
                    userMaster.DigitalSignature = DSbitmapData;
                }
                else
                {
                    byte[] emptyByte = { };
                    userMaster.DigitalSignature = emptyByte;
                }

                if (userMaster.UserID == 0)
                {
                    var serviceResponse = _eSyaUMAPIServices.HttpClientServices.PostAsJsonAsync<DO_ReturnParameter>("UserCreation/InsertIntoUserMaster", userMaster).Result;
                    if (serviceResponse.Status)
                        return Json(serviceResponse.Data);
                    else
                        return Json(new DO_ReturnParameter() { Status = false, Message = serviceResponse.Message });
                }

                else
                {
                    var serviceResponse = _eSyaUMAPIServices.HttpClientServices.PostAsJsonAsync<DO_ReturnParameter>("UserCreation/UpdateUserMaster", userMaster).Result;
                    if (serviceResponse.Status)
                        return Json(serviceResponse.Data);
                    else
                        return Json(new DO_ReturnParameter() { Status = false, Message = serviceResponse.Message });
                }
            }
            catch (Exception ex)
            {
                return Json(new { Status = false, Message = ex.InnerException == null ? ex.Message.ToString() : ex.InnerException.Message });
            }
        }

        public static string FixBase64ForImage(string image)
        {

            var regex = new Regex(@"data:(?<mime>[\w/\-\.]+);(?<encoding>\w+),(?<data>.*)", RegexOptions.Compiled);
            var match = regex.Match(image);
            var mime = match.Groups["mime"].Value;
            var encoding = match.Groups["encoding"].Value;
            var data = match.Groups["data"].Value;
            return data;
        }

        public static string ConvertByteArraytoImageURI(Byte[] image)
        {

            StringBuilder ImageURI = new StringBuilder();
            ImageURI.Append("data:");
            string image_data = Convert.ToBase64String(image);
            string mime = "image/jpeg";
            string encoding = "base64";
            ImageURI.Append(mime);
            ImageURI.Append(";");
            ImageURI.Append(encoding);
            ImageURI.Append(",");
            ImageURI.Append(image_data);
            return Convert.ToString(ImageURI);
        }

        /// <summary>
        /// Insert or Update User Business Link
        /// </summary>
        [HttpPost]
        public JsonResult InsertOrUpdateUserBL(DO_UserBusinessLink UserBusinessLink)
        {
            try
            {
                UserBusinessLink.CreatedBy = AppSessionVariables.GetSessionUserID(HttpContext);
                UserBusinessLink.TerminalId = AppSessionVariables.GetIPAddress(HttpContext);

                if (UserBusinessLink.IUStatus == 0)
                {
                    var serviceResponse = _eSyaUMAPIServices.HttpClientServices.PostAsJsonAsync<DO_ReturnParameter>("UserCreation/InsertIntoUserBL", UserBusinessLink).Result;
                    if (serviceResponse.Status)
                        return Json(serviceResponse.Data);
                    else
                        return Json(new DO_ReturnParameter() { Status = false, Message = serviceResponse.Message });
                }

                else
                {
                    var serviceResponse = _eSyaUMAPIServices.HttpClientServices.PostAsJsonAsync<DO_ReturnParameter>("UserCreation/UpdateUserBL", UserBusinessLink).Result;
                    if (serviceResponse.Status)
                        return Json(serviceResponse.Data);
                    else
                        return Json(new DO_ReturnParameter() { Status = false, Message = serviceResponse.Message });
                }
            }
            catch (Exception ex)
            {
                return Json(new { Status = false, Message = ex.InnerException == null ? ex.Message.ToString() : ex.InnerException.Message });
            }
        }

        /// <summary>
        /// Get Menu List for js tree
        /// </summary>
        [Produces("application/json")]
        [HttpPost]
        public JsonResult GetMenulist(int UserGroup, int UserType, short UserID, int BusinessKey)
        {
            try
            {
                List<jsTreeObject> jsTree = new List<jsTreeObject>();

                jsTreeObject jsObj = new jsTreeObject
                {
                    id = "MM",
                    parent = "#",
                    text = "eSya Enterprise",
                    state = new stateObject { opened = true, selected = false }
                };
                jsTree.Add(jsObj);
                var parameter = "?UserGroup=" + UserGroup + "&UserType=" + UserType + "&UserID=" + UserID + "&BusinessKey=" + BusinessKey;
                var serviceResponse = _eSyaUMAPIServices.HttpClientServices.GetAsync<DO_ConfigureMenu>("UserCreation/GetMenulist" + parameter).Result;
                var configureMenu = serviceResponse.Data;

                if (configureMenu != null)
                {
                    //Add Main Menu
                    foreach (var m in configureMenu.l_MainMenu.OrderBy(o => o.MenuIndex))
                    {
                        jsObj = new jsTreeObject
                        {
                            id = "MM" + m.MainMenuId.ToString(),
                            text = m.MainMenu,
                            GroupIndex = m.MenuIndex.ToString(),
                            parent = "MM",
                        };
                        jsTree.Add(jsObj);
                    }

                    //Add Sub Menu
                    foreach (var s in configureMenu.l_SubMenu.OrderBy(o => o.MenuIndex))
                    {
                        jsObj = new jsTreeObject
                        {
                            id = "SM" + s.MenuItemId.ToString(),
                            text = s.MenuItemName,
                            GroupIndex = s.MenuIndex.ToString(),
                            parent = s.ParentID == 0 ? "MM" + s.MainMenuId.ToString() : "SM" + s.ParentID.ToString()
                        };
                        jsTree.Add(jsObj);
                    }

                    //Add Form
                    foreach (var f in configureMenu.l_FormMenu.OrderBy(o => o.FormIndex))
                    {
                        jsObj = new jsTreeObject
                        {
                            id = "FM" + f.MenuItemId.ToString() + "." + f.FormId.ToString(),
                            text = f.FormNameClient,
                            GroupIndex = f.FormIndex.ToString(),
                            parent = f.MenuItemId == 0 ? "MM" + f.MainMenuId.ToString() : "SM" + f.MenuItemId.ToString(),
                            state = new stateObject { opened = true, selected = f.ActiveStatus }
                        };
                        jsTree.Add(jsObj);
                    }
                }

                return Json(jsTree);

            }
            catch (Exception ex)
            {
                return Json(new DO_ReturnParameter() { Status = false, Message = (ex.InnerException != null) ? ex.InnerException.Message : ex.Message });
            }
        }

        /// <summary>
        ///Get User form Action Link
        /// </summary>
        [HttpPost]
        public JsonResult GetUserFormActionLink(int UserID, int BusinessKey, int MenuKey)
        {
            try
            {
                var serviceResponse = _eSyaUMAPIServices.HttpClientServices.GetAsync<List<DO_UserFormAction>>("UserCreation/GetUserFormActionLink?UserID=" + UserID + "&BusinessKey=" + BusinessKey + "&MenuKey=" + MenuKey).Result;
                return Json(serviceResponse.Data);
            }
            catch (Exception ex)
            {
                return Json(new DO_ReturnParameter() { Status = false, Message = (ex.InnerException != null) ? ex.InnerException.Message : ex.Message });
            }
        }

        /// <summary>
        /// Insert or Update User Menu Link and User Form Action Link
        /// </summary>
        [HttpPost]
        public JsonResult InsertIntoUserMenuAction(DO_UserMenuLink UserMenuLink)
        {
            try
            {
                UserMenuLink.CreatedBy = AppSessionVariables.GetSessionUserID(HttpContext);
                UserMenuLink.TerminalId = AppSessionVariables.GetIPAddress(HttpContext);

                var serviceResponse = _eSyaUMAPIServices.HttpClientServices.PostAsJsonAsync<DO_ReturnParameter>("UserCreation/InsertIntoUserMenuAction", UserMenuLink).Result;
                if (serviceResponse.Status)
                    return Json(serviceResponse.Data);
                else
                    return Json(new DO_ReturnParameter() { Status = false, Message = serviceResponse.Message });
            }
            catch (Exception ex)
            {
                return Json(new { Status = false, Message = ex.InnerException == null ? ex.Message.ToString() : ex.InnerException.Message });
            }
        }

        /// <summary>
        /// Get User Menu keys for js tree
        /// </summary>
        [HttpPost]
        public JsonResult GetMenuKeysforUser(short UserID, int BusinessKey)
        {
            try
            {
                var parameter = "?UserID=" + UserID + "&BusinessKey=" + BusinessKey;
                var serviceResponse = _eSyaUMAPIServices.HttpClientServices.GetAsync<List<int>>("UserCreation/GetMenuKeysforUser" + parameter).Result;
                return Json(serviceResponse.Data);

            }
            catch (Exception ex)
            {
                return Json(new DO_ReturnParameter() { Status = false, Message = (ex.InnerException != null) ? ex.InnerException.Message : ex.Message });
            }
        }

        #endregion User Creation
    }
}