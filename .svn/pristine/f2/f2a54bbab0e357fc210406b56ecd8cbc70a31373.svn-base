using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using eSyaEnterprise_UI.ActionFilter;
using eSyaEnterprise_UI.Utility;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json;
using eSyaEnterprise_UI.Areas.eSyaNatureCure.Data;
using eSyaEnterprise_UI.Models;
using eSyaEnterprise_UI.Areas.eSyaNatureCure.Models;

namespace eSyaEnterprise_UI.Areas.eSyaNatureCure.Controllers
{
    [SessionTimeout]
    public class DepartmentClearanceController : Controller
    {
        private readonly IeSyaNatureCureAPIServices _eSyaNatureCureAPIServices;
        private readonly ILogger<DepartmentClearanceController> _logger;
        public DepartmentClearanceController(IeSyaNatureCureAPIServices eSyaNatureCureAPIServices, ILogger<DepartmentClearanceController> logger)
        {
            _eSyaNatureCureAPIServices = eSyaNatureCureAPIServices;
            _logger = logger;
        }

        /// <summary>
        /// Department
        /// </summary>
        /// <returns></returns>

        [Area("eSyaNatureCure")]
        [ServiceFilter(typeof(ViewBagActionFilter))]
        public async Task<IActionResult> V_ENC_25_00()
        {

            try
            {
                int UserId = AppSessionVariables.GetSessionUserID(HttpContext);
                var serviceResponse = await _eSyaNatureCureAPIServices.HttpClientServices.GetAsync<DO_DepartmentUserLink>("DepartmentClearance/GetDepartmentbyUserId?UserId=" + UserId);
                //var serviceResponse = await _eSyaNatureCureAPIServices.HttpClientServices.GetAsync<List<DO_Department>>("Department/GetActiveDepartments");

                if (serviceResponse.Status )
                {
                    if (serviceResponse.Data != null)
                    {
                        ViewBag.Department = serviceResponse.Data.DepartmentName;
                        ViewBag.DepartmentId = serviceResponse.Data.DepartmentId;
                        return View();
                    }
                    else
                    {
                        ViewBag.Department = "No Department is Linked to Current Logged In User";
                        ViewBag.DepartmentId = 0;
                        return View();
                    }
                   
                }
                else
                {
                    _logger.LogError(new Exception(serviceResponse.Message), "UD:GetActiveDepartments");
                    return Json(new { Status = false, StatusCode = "500" });
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:GetActiveDepartments");
                return Json(new DO_ReturnParameter() { Status = false, Message = (ex.InnerException != null) ? ex.InnerException.Message : ex.Message });
            }
        }

        /// <summary>
        ////Get Department for Grid
        /// </summary>
        [HttpPost]
        public async Task<JsonResult> GetDepartmentClearanceDashboard(string rdvalue)
        {
            try
            {
                if (rdvalue == "DepartmentNotCleared")
                {
                    int businessKey = AppSessionVariables.GetSessionBusinessKey(HttpContext);
                    var serviceResponse = await _eSyaNatureCureAPIServices.HttpClientServices.GetAsync<List<DO_BookinDetails>>("DepartmentClearance/GetDepartmentNotClearedGuests?businessKey=" + businessKey);
                    if (serviceResponse.Status)
                    {
                        return Json(serviceResponse.Data);
                    }
                    else
                    {
                        _logger.LogError(new Exception(serviceResponse.Message), "UD:GetDepartmentClearanceDashboard");
                        return Json(new { Status = false, StatusCode = "500" });
                    }
                }
                else
                {
                    int businessKey = AppSessionVariables.GetSessionBusinessKey(HttpContext);
                    var serviceResponse = await _eSyaNatureCureAPIServices.HttpClientServices.GetAsync<List<DO_BookinDetails>>("DepartmentClearance/GetAllDepartmentClearedGuestbyBusinessKey?businessKey=" + businessKey);
                    if (serviceResponse.Status)
                    {
                        return Json(serviceResponse.Data);
                    }
                    else
                    {
                        _logger.LogError(new Exception(serviceResponse.Message), "UD:GetAllDO_DepartmentClearancebyBusinessKey");
                        return Json(new { Status = false, StatusCode = "500" });
                    }
                }

            }
            catch (Exception ex)
            {
                return Json(new DO_ReturnParameter() { Status = false, Message = (ex.InnerException != null) ? ex.InnerException.Message : ex.Message });
            }
        }

        /// <summary>
        /// Insert or Update Department
        /// </summary>
        [HttpPost]
        public async Task<JsonResult> InsertIntoDepartmentClearance(DO_DepartmentClearance obj)
        {

            try
            {
                obj.UserID = AppSessionVariables.GetSessionUserID(HttpContext);
                obj.TerminalID = AppSessionVariables.GetIPAddress(HttpContext);
                obj.FormId = AppSessionVariables.GetSessionFormInternalID(HttpContext);
                //obj.BusinessKey= AppSessionVariables.GetSessionBusinessKey(HttpContext);
                var serviceResponse = await _eSyaNatureCureAPIServices.HttpClientServices.PostAsJsonAsync<DO_ReturnParameter>("DepartmentClearance/InsertIntoDepartmentClearance", obj);
                    if (serviceResponse.Status)
                        return Json(serviceResponse.Data);
                    else
                        return Json(new DO_ReturnParameter() { Status = false, Message = serviceResponse.Message });
                
               
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:InsertIntoDepartmentClearance:params:" + JsonConvert.SerializeObject(obj));
                return Json(new DO_ReturnParameter() { Status = false, Message = (ex.InnerException != null) ? ex.InnerException.Message : ex.Message });
            }
        }
    }
}