using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using eSyaEnterprise_UI.ActionFilter;
using eSyaEnterprise_UI.Areas.PatientManagement.Data;
using eSyaEnterprise_UI.Areas.PatientManagement.Models;
using eSyaEnterprise_UI.Utility;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;

namespace eSyaEnterprise_UI.Areas.PatientManagement.Controllers
{
    [Route("[controller]/[action]")]
    [ApiController]
    public class MasterController : ControllerBase
    {
        private readonly IPatientManagementAPIServices _patientManagementAPIServices;
        private readonly ILogger<MasterController> _logger;

        public MasterController(IPatientManagementAPIServices patientManagementAPIServices, ILogger<MasterController> logger)
        {
            _patientManagementAPIServices = patientManagementAPIServices;
            _logger = logger;
        }

        public async Task<IActionResult> GetISDCodes()
        {
            try
            {
                var serviceResponse = await _patientManagementAPIServices.HttpClientServices.GetAsync<List<DO_IsdCodes>>("Master/GetISDCodes");
                if (serviceResponse.Status)
                    return Ok(serviceResponse.Data);
                else
                {
                    _logger.LogError(new Exception(serviceResponse.Message), "UD:GetISDCodes");
                    return Ok(new DO_ResponseParameter() { Status = false, Message = serviceResponse.Message });
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:GetISDCodes");
                throw ex;
            }
        }

        public async Task<IActionResult> GetStateList(int isdCode)
        {
            try
            {
                var parameter = "?isdCode=" + isdCode;
                var serviceResponse = await _patientManagementAPIServices.HttpClientServices.GetAsync<List<DO_Place>>("Master/GetStateList" + parameter);
                if (serviceResponse.Status)
                    return Ok(serviceResponse.Data);
                else
                {
                    _logger.LogError(new Exception(serviceResponse.Message), "UD:GetStateList");
                    return Ok(new DO_ResponseParameter() { Status = false, Message = serviceResponse.Message });
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:GetStateList");
                throw ex;
            }
        }

        public async Task<IActionResult> GetCityList(int isdCode, int stateCode)
        {
            try
            {
                var parameter = "?isdCode=" + isdCode;
                parameter += "&stateCode=" + stateCode;
                var serviceResponse = await _patientManagementAPIServices.HttpClientServices.GetAsync<List<DO_Place>>("Master/GetCityList" + parameter);
                if (serviceResponse.Status)
                    return Ok(serviceResponse.Data);
                else
                {
                    _logger.LogError(new Exception(serviceResponse.Message), "UD:GetCityList");
                    return Ok(new DO_ResponseParameter() { Status = false, Message = serviceResponse.Message });
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:GetCityList");
                throw ex;
            }
        }

        public async Task<IActionResult> GetAreaList(int isdCode, int stateCode, int cityCode)
        {
            try
            {
                var parameter = "?isdCode=" + isdCode;
                parameter += "&stateCode=" + stateCode;
                parameter += "&cityCode=" + cityCode;
                var serviceResponse = await _patientManagementAPIServices.HttpClientServices.GetAsync<List<DO_AddressIN>>("Master/GetAreaList" + parameter);
                if (serviceResponse.Status)
                    return Ok(serviceResponse.Data);
                else
                {
                    _logger.LogError(new Exception(serviceResponse.Message), "UD:GetAreaList");
                    return Ok(new DO_ResponseParameter() { Status = false, Message = serviceResponse.Message });
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:GetAreaList");
                throw ex;
            }
        }

        public async Task<IActionResult> GetCountryAreaDetailsByPincode(int isdCode, string pincode)
        {
            try
            {
                var parameter = "?isdCode=" + isdCode;
                parameter += "&pincode=" + pincode;
                var serviceResponse = await _patientManagementAPIServices.HttpClientServices.GetAsync<List<DO_AddressIN>>("Master/GetCountryAreaDetailsByPincode" + parameter);
                if (serviceResponse.Status)
                    return Ok(serviceResponse.Data.FirstOrDefault());
                else
                {
                    _logger.LogError(new Exception(serviceResponse.Message), "UD:GetCountryAreaDetailsByPincode");
                    return Ok(new DO_ResponseParameter() { Status = false, Message = serviceResponse.Message });
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:GetCountryAreaDetailsByPincode");
                throw ex;
            }
        }


        public async Task<IActionResult> GetPatientType()
        {
            try
            {
                var serviceResponse = await _patientManagementAPIServices.HttpClientServices.GetAsync<List<DO_PatientType>>("Master/GetPatientType");
                if (serviceResponse.Status)
                    return Ok(serviceResponse.Data);
                else
                {
                    _logger.LogError(new Exception(serviceResponse.Message), "UD:GetPatientType");
                    return Ok(new DO_ResponseParameter() { Status = false, Message = serviceResponse.Message });
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:GetPatientType");
                throw ex;
            }
        }

        public async Task<IActionResult> GetPatientCategory(int patientTypeId)
        {
            try
            {
                var parameter = "?patientTypeId=" + patientTypeId;
                var serviceResponse = await _patientManagementAPIServices.HttpClientServices.GetAsync<List<DO_PatientCategory>>("Master/GetPatientCategory" + parameter);
                if (serviceResponse.Status)
                    return Ok(serviceResponse.Data);
                else
                {
                    _logger.LogError(new Exception(serviceResponse.Message), "UD:GetPatientCategory");
                    return Ok(new DO_ResponseParameter() { Status = false, Message = serviceResponse.Message });
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:GetPatientCategory");
                throw ex;
            }
        }

        public async Task<IActionResult> GetAllDoctorList()
        {
            try
            {
                var parameter = "?businessKey=" + AppSessionVariables.GetSessionBusinessKey(HttpContext);
                var serviceResponse = await _patientManagementAPIServices.HttpClientServices.GetAsync<List<DO_Doctors>>("OpClinicDetails/GetAllDoctorList" + parameter);
                if (serviceResponse.Status)
                    return Ok(serviceResponse.Data);
                else
                {
                    _logger.LogError(new Exception(serviceResponse.Message), "UD:GetAllDoctorList");
                    return Ok(new DO_ResponseParameter() { Status = false, Message = serviceResponse.Message });
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:GetAllDoctorList");
                throw ex;
            }
        }

        public async Task<IActionResult> GetBillSuspendType()
        {
            try
            {
                var serviceResponse = await _patientManagementAPIServices.HttpClientServices.GetAsync<List<DO_BillSuspendType>>("Master/GetBillSuspendType");
                if (serviceResponse.Status)
                    return Ok(serviceResponse.Data);
                else
                {
                    _logger.LogError(new Exception(serviceResponse.Message), "UD:GetBillSuspendType");
                    return Ok(new DO_ResponseParameter() { Status = false, Message = serviceResponse.Message });
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:GetBillSuspendType");
                throw ex;
            }
        }

        public async Task<IActionResult> GetServiceClassesByTypeID(int serviceType)
        {
            try
            {
                var parameter = "?serviceType=" + serviceType;
                var serviceResponse = await _patientManagementAPIServices.HttpClientServices.GetAsync<List<DO_ServiceCode>>("Master/GetServiceClassesByTypeID" + parameter);
                if (serviceResponse.Status)
                    return Ok(serviceResponse.Data);
                else
                {
                    _logger.LogError(new Exception(serviceResponse.Message), "UD:GetServiceClassesByTypeID:params: serviceType:{0}", serviceType);
                    return Ok(new DO_ResponseParameter() { Status = false, Message = serviceResponse.Message });
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:GetServiceClassesByTypeID:params: serviceType:{0}", serviceType);
                throw ex;
            }
        }

        public async Task<IActionResult> GetServiceCodesByClassID(int serviceType, int serviceClass)
        {
            try
            {
                var parameter = "?serviceClass=" + serviceClass;
                parameter += "&serviceType=" + serviceType;
                var serviceResponse = await _patientManagementAPIServices.HttpClientServices.GetAsync<List<DO_ServiceCode>>("Master/GetServiceCodesByClassID" + parameter);
                if (serviceResponse.Status)
                    return Ok(serviceResponse.Data);
                else
                {
                    _logger.LogError(new Exception(serviceResponse.Message), "UD:GetServiceCodesByClassID:params: serviceClass:{0},serviceClass:{1}", serviceClass, serviceType);
                    return Ok(new DO_ResponseParameter() { Status = false, Message = serviceResponse.Message });
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:GetServiceCodesByClassID:params: serviceClass:{0},serviceClass:{1}", serviceClass, serviceType);
                throw ex;
            }
        }

        public async Task<IActionResult> GetDrugMaster()
        {
            try
            {
                var serviceResponse = await _patientManagementAPIServices.HttpClientServices.GetAsync<List<DO_DrugMaster>>("Master/GetDrugMaster");
                if (serviceResponse.Status)
                    return Ok(serviceResponse.Data);
                else
                {
                    _logger.LogError(new Exception(serviceResponse.Message), "UD:GetDrugMaster");
                    return Ok(new DO_ResponseParameter() { Status = false, Message = serviceResponse.Message });
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:GetDrugMaster");
                throw ex;
            }
        }

        public async Task<IActionResult> GetDoctorFromLogin()
        {
            try
            {
                var parameter = "?doctorId=" + AppSessionVariables.GetSessionDoctorID(HttpContext);
                var serviceResponse = await _patientManagementAPIServices.HttpClientServices.GetAsync<DO_Doctors>("Master/GetDoctorByID" + parameter);
                if (serviceResponse.Status)
                    return Ok(serviceResponse.Data);
                else
                {
                    _logger.LogError(new Exception(serviceResponse.Message), "UD:GetDoctorByID:params: doctorId:{0}", AppSessionVariables.GetSessionDoctorID(HttpContext));
                    return Ok(new DO_ResponseParameter() { Status = false, Message = serviceResponse.Message });
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:GetDoctorByID:params: doctorId:{0}", AppSessionVariables.GetSessionDoctorID(HttpContext));
                throw ex;
            }
        }

    }
}