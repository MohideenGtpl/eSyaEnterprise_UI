using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using eSyaEnterprise_UI.Areas.PatientManagement.Data;
using eSyaEnterprise_UI.Areas.PatientManagement.Models;
using eSyaEnterprise_UI.Utility;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;

namespace eSyaEnterprise_UI.Areas.PatientManagement.Controllers
{
    public class OpBillingController : Controller
    {
        private readonly IPatientManagementAPIServices _patientManagementAPIServices;
        private readonly ILogger<OpBillingController> _logger;

        public OpBillingController(IPatientManagementAPIServices patientManagementAPIServices, ILogger<OpBillingController> logger)
        {
            _patientManagementAPIServices = patientManagementAPIServices;
            _logger = logger;
        }

        [Area("PatientManagement")]
        public IActionResult EPM_11_00()
        {
            return View();
        }

        [Area("PatientManagement")]
        public IActionResult EPM_12_00()
        {
            return View();
        }

        public async Task<IActionResult> GetPatientRegisteredList(DateTime fromDate, DateTime toDate,
            int? clinicTypeId, int? patientTypeId, long? uhid)
        {
            try
            {
                var parameter = "?businessKey=" + AppSessionVariables.GetSessionBusinessKey(HttpContext);
                parameter += "&fromDate =" + fromDate;
                parameter += "&toDate =" + toDate;
                if(clinicTypeId != null)
                    parameter += "&clinicTypeId =" + clinicTypeId;
                if (patientTypeId != null)
                    parameter += "&patientTypeId =" + patientTypeId;
                if (uhid != null)
                    parameter += "&uhid =" + uhid;

                var serviceResponse = await _patientManagementAPIServices.HttpClientServices.GetAsync<List<DO_PatientRegisteredList>>("OpRegistrationBilling/GetPatientRegisteredList" + parameter);
                if (serviceResponse.Status)
                    return Json(serviceResponse.Data);
                else
                {
                    _logger.LogError(new Exception(serviceResponse.Message), "UD:GetPatientRegisteredList");
                    return Json(new DO_ResponseParameter() { Status = false, Message = serviceResponse.Message });
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:GetPatientRegisteredList");
                throw ex;
            }
        }

    }
}