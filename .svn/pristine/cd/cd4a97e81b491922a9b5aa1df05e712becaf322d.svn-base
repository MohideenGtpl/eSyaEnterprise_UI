using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using System.Net.Http;
using eSyaEnterprise_UI.Areas.Config.Models;
using eSyaEnterprise_UI.Models;
using eSyaEnterprise_UI.Utility;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Newtonsoft.Json;
using System.IO;
using System.Drawing;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Hosting;
using System.Text.RegularExpressions;
using eSyaEnterprise_UI.Areas.Config.Data;
using eSyaEnterprise_UI.ActionFilter;

namespace eSyaEnterprise_UI.Areas.Config.Controllers
{
    public class CountryController : Controller
    {
        private readonly IeSyaConfigAPIServices _eSyaConfigAPIServices;
        private IHostingEnvironment _env;
        public CountryController(IeSyaConfigAPIServices eSyaConfigAPIServices, IHostingEnvironment env)
        {
            _eSyaConfigAPIServices = eSyaConfigAPIServices;
            _env = env;
        }
        #region Country Codes
        /// <summary>
        /// Country codes
        /// </summary>
        /// <returns></returns>
        /// 

        [Area("eSyaConfig")]
        [ServiceFilter(typeof(ViewBagActionFilter))]
        public IActionResult V_72_00()
        {
            try
            {
                var domainname = this.Request.PathBase;
                var ImagePath = Path.Combine(_env.WebRootPath, "Uploads/CountryFlagICons");
                DirectoryInfo dir = new DirectoryInfo(ImagePath);
                FileInfo[] files = dir.GetFiles();

                var localdname = domainname + "Uploads/CountryFlagICons";
                var serverdname = domainname + "/Uploads/CountryFlagICons";

                List<IMGCountryFlag> ImageList = new List<IMGCountryFlag>();
                foreach (var item in files)
                {
                    IMGCountryFlag obj = new IMGCountryFlag()
                    {
                        Name = item.Name,
                        localDomainwithPath = localdname,
                        ServerDomainwithPath = serverdname,
                        DomainName = domainname
                    };
                    ImageList.Add(obj);

                }
                ViewBag.Images = ImageList;
                /// Getting Currency List
                var serviceResponse = _eSyaConfigAPIServices.HttpClientServices.GetAsync<List<DO_CurrencyMaster>>("CurrencyMaster/GetActiveCurrencyList").Result;
                ViewBag.currencyList = serviceResponse.Data;
                return View();
            }
            catch (Exception ex)
            {
                return Json(new DO_ReturnParameter() { Status = false, Message = (ex.InnerException != null) ? ex.InnerException.Message : ex.Message });
            }

        }

        /// <summary>
        /// Insert or Update Country Codes
        /// </summary>
        [HttpPost]
        public JsonResult InsertOrUpdateCountryCodes(DO_CountryCodes country)
        {
            try
            {
                string filePath = "Uploads/CountryFlagICons/" + country.imgName;
                country.CountryFlag = filePath;
                country.UserID = AppSessionVariables.GetSessionUserID(HttpContext);
                country.TerminalID = AppSessionVariables.GetIPAddress(HttpContext);
                country.FormId = AppSessionVariables.GetSessionFormInternalID(HttpContext);
                if (country.Isadd == 1)
                {
                    var serviceResponse = _eSyaConfigAPIServices.HttpClientServices.PostAsJsonAsync<DO_ReturnParameter>("Country/InsertIntoCountryCode", country).Result;
                    if (serviceResponse.Status)
                        return Json(serviceResponse.Data);
                    else
                        return Json(new DO_ReturnParameter() { Status = false, Message = serviceResponse.Message });
                }

                else
                {
                    var serviceResponse = _eSyaConfigAPIServices.HttpClientServices.PostAsJsonAsync<DO_ReturnParameter>("Country/UpdateCountryCode", country).Result;
                    if (serviceResponse.Status)
                        return Json(serviceResponse.Data);
                    else
                        return Json(new DO_ReturnParameter() { Status = false, Message = serviceResponse.Message });
                }
            }
            catch (Exception ex)
            {
                return Json(new { Status = false, Message = ex.InnerException == null ? ex.Message.ToString() : ex.InnerException.Message });
            }
        }
        /// <summary>
        ///Get All Country Codes for Grid
        /// </summary>
        [HttpPost]
        public JsonResult GetAllCountryCodes()
        {

            try
            {
                var domainname = this.Request.PathBase;
                var serviceResponse = _eSyaConfigAPIServices.HttpClientServices.GetAsync<List<DO_CountryCodes>>("Country/GetAllCountryCodes").Result;
                var data = serviceResponse.Data;
                List<DO_CountryCodes> countries = new List<DO_CountryCodes>();
                //for server hosting
                foreach (var item in data)
                {
                    DO_CountryCodes country = new DO_CountryCodes()
                    {
                        Isdcode = item.Isdcode,
                        CountryCode = item.CountryCode,
                        CountryName = item.CountryName,
                        CountryFlag = domainname + item.CountryFlag,
                        CurrencyCode = item.CurrencyCode,
                        MobileNumberPattern = item.MobileNumberPattern,
                        Uidlabel = item.Uidlabel,
                        Uidpattern = item.Uidpattern,
                        Nationality = item.Nationality,
                        IsPoboxApplicable = item.IsPoboxApplicable,
                        PoboxPattern = item.PoboxPattern,
                        IsPinapplicable = item.IsPinapplicable,
                        PincodePattern = item.PincodePattern,
                        ActiveStatus = item.ActiveStatus,
                        postedfile = item.postedfile,
                        imgName = item.imgName,
                        CurrencyName = item.CurrencyName
                    };
                    countries.Add(country);

                }
                return Json(countries);
            }
            catch (Exception ex)
            {
                return Json(new DO_ReturnParameter() { Status = false, Message = (ex.InnerException != null) ? ex.InnerException.Message : ex.Message });
            }
        }
        #endregion Country Codes


        #region Country Statutory Details

        /// <summary>
        /// Country Statutory Details
        /// </summary>
        /// <returns></returns>
        /// 
        [Area("eSyaConfig")]
        [ServiceFilter(typeof(ViewBagActionFilter))]
        public IActionResult V_73_00()
        {
            try
            {
                var serviceResponse = _eSyaConfigAPIServices.HttpClientServices.GetAsync<List<DO_CountryCodes>>("ConfigMasterData/GetISDCodes").Result;
                ViewBag.Isdcodes = serviceResponse.Data;
                return View();
            }
            catch (Exception ex)
            {
                return Json(new DO_ReturnParameter() { Status = false, Message = (ex.InnerException != null) ? ex.InnerException.Message : ex.Message });
            }

        }



        /// <summary>
        /// Get Country Statutory Details by ISD Code for Grid
        /// </summary>
        [HttpPost]
        public JsonResult GetStatutoryCodesbyIsdcode(int Isdcode)
        {
            try
            {
                var parameter = "?Isdcode=" + Isdcode;
                var serviceResponse = _eSyaConfigAPIServices.HttpClientServices.GetAsync<List<DO_CountryStatutoryDetails>>("Country/GetStatutoryCodesbyIsdcode" + parameter).Result;
                return Json(serviceResponse.Data);
            }
            catch (Exception ex)
            {
                return Json(new DO_ReturnParameter() { Status = false, Message = (ex.InnerException != null) ? ex.InnerException.Message : ex.Message });
            }
        }

        /// <summary>
        /// Insert or Update Country Statutory Details
        /// </summary>
        [HttpPost]
        public JsonResult InsertOrUpdateStatutoryCodes(DO_CountryStatutoryDetails postData)
        {

            try
            {
                if (postData.Isdcode == 0)
                {
                    return Json(new { Status = false, Message = "Please Select ISD Code" });
                }
                postData.UserID = AppSessionVariables.GetSessionUserID(HttpContext);
                postData.TerminalID = AppSessionVariables.GetIPAddress(HttpContext);
                postData.FormId = AppSessionVariables.GetSessionFormInternalID(HttpContext);
                var serviceResponse = _eSyaConfigAPIServices.HttpClientServices.PostAsJsonAsync<DO_ReturnParameter>("Country/InsertOrUpdateStatutoryCodes", postData).Result;
                if (serviceResponse.Status)
                    return Json(serviceResponse.Data);
                else
                    return Json(new DO_ReturnParameter() { Status = false, Message = serviceResponse.Message });
            }
            catch (Exception ex)
            {
                return Json(new { Status = false, Message = ex.InnerException == null ? ex.Message.ToString() : ex.InnerException.Message });
            }
        }
        #endregion Country Statutory Details

        #region Tax Structure
        [Area("eSyaConfig")]
        [ServiceFilter(typeof(ViewBagActionFilter))]
        public IActionResult V_74_00()
        {
            ViewBag.UserFormRoles = new DO_UserFormRole { IsInsert = true, IsEdit = true, IsDelete = true };

            try
            {
                var serviceResponse = _eSyaConfigAPIServices.HttpClientServices.GetAsync<List<DO_CountryCodes>>("ConfigMasterData/GetISDCodes").Result;
                ViewBag.co_list = serviceResponse.Data;
                return View();
            }
            catch (Exception ex)
            {
                return Json(new { Status = false, Message = ex.ToString() });
            }
        }

        /// <summary>
        ///Get Tax Structure by Country Code for Grid
        /// </summary>
        [HttpPost]
        public JsonResult GetTaxStructureByISDCode(int ISDCode)
        {
            try
            {
                var parameter = "?ISDCode=" + ISDCode;
                var serviceResponse = _eSyaConfigAPIServices.HttpClientServices.GetAsync<List<DO_TaxStructure>>("TaxStructure/GetTaxStructureByISDCode" + parameter).Result;
                return Json(serviceResponse.Data);
            }
            catch (Exception ex)
            {
                return Json(new DO_ReturnParameter() { Status = false, Message = (ex.InnerException != null) ? ex.InnerException.Message : ex.Message });
            }
        }

        /// <summary>
        ///Get Tax Structure by Country Code And Tax Code for Grid
        /// </summary>
        [HttpPost]
        public JsonResult GetTaxStructureByTaxCode(int ISDCode, int TaxCode)
        {
            try
            {
                var parameter = "?ISDCode= " + ISDCode + "&TaxCode=" + TaxCode;
                var serviceResponse = _eSyaConfigAPIServices.HttpClientServices.GetAsync<List<DO_TaxStructure>>("TaxStructure/GetTaxStructureByTaxCode" + parameter).Result;
                return Json(serviceResponse.Data);
            }
            catch (Exception ex)
            {
                return Json(new DO_ReturnParameter() { Status = false, Message = (ex.InnerException != null) ? ex.InnerException.Message : ex.Message });
            }
        }

        /// <summary>
        /// Insert Tax Structure 
        /// </summary>
        [HttpPost]
        public JsonResult InsertOrUpdateTaxStructure(DO_TaxStructure tax_Struc)
        {
            try
            {
                tax_Struc.UserID = AppSessionVariables.GetSessionUserID(HttpContext);
                tax_Struc.TerminalID = AppSessionVariables.GetIPAddress(HttpContext);
                tax_Struc.FormId = AppSessionVariables.GetSessionFormInternalID(HttpContext);
                tax_Struc.ActiveStatus = true;
                if (tax_Struc.TaxCode == 0)
                {
                    var serviceResponse = _eSyaConfigAPIServices.HttpClientServices.PostAsJsonAsync<DO_ReturnParameter>("TaxStructure/InsertIntoTaxStructure", tax_Struc).Result;
                    if (serviceResponse.Status)
                        return Json(serviceResponse.Data);
                    else
                        return Json(new DO_ReturnParameter() { Status = false, Message = serviceResponse.Message });
                }

                else
                {
                    var serviceResponse = _eSyaConfigAPIServices.HttpClientServices.PostAsJsonAsync<DO_ReturnParameter>("TaxStructure/UpdateTaxStructure", tax_Struc).Result;
                    if (serviceResponse.Status)
                        return Json(serviceResponse.Data);
                    else
                        return Json(new DO_ReturnParameter() { Status = false, Message = serviceResponse.Message });
                }
            }
            catch (Exception ex)
            {
                return Json(new { Status = false, Message = ex.InnerException == null ? ex.Message.ToString() : ex.InnerException.Message });
            }
        }
        #endregion Tax Structure Details

        #region Tax Code Rule
        [Area("eSyaConfig")]
        [ServiceFilter(typeof(ViewBagActionFilter))]
        public IActionResult V_75_00()
        {
            ViewBag.UserFormRoles = new DO_UserFormRole { IsInsert = true, IsEdit = true, IsDelete = true };
            try
            {
                var serviceResponse = _eSyaConfigAPIServices.HttpClientServices.GetAsync<List<DO_CountryCodes>>("ConfigMasterData/GetISDCodes").Result;
                ViewBag.co_list = serviceResponse.Data;
                return View();
            }
            catch (Exception ex)
            {
                return Json(new { Status = false, Message = ex.ToString() });
            }
        }

        /// <summary>
        ///Get Tax Codes by ISD Codes
        /// </summary>
        [HttpPost]
        public JsonResult GetTaxCodeByISDCode(int ISDCode)
        {
            try
            {
                var parameter = "?ISDCode=" + ISDCode;
                var serviceResponse = _eSyaConfigAPIServices.HttpClientServices.GetAsync<List<DO_TaxStructure>>("ConfigMasterData/GetTaxCodeByISDCodes" + parameter).Result;
                return Json(serviceResponse.Data);
            }
            catch (Exception ex)
            {
                return Json(new DO_ReturnParameter() { Status = false, Message = (ex.InnerException != null) ? ex.InnerException.Message : ex.Message });
            }
        }

        /// <summary>
        ///Get Tax Rule Details by Country Code And Tax Code for Grid
        /// </summary>
        [HttpPost]
        public JsonResult GetTaxRuleByISDandTaxCode(int ISDCode, int TaxCode)
        {
            try
            {
                var parameter = "?ISDCode= " + ISDCode + "&TaxCode=" + TaxCode;
                var serviceResponse = _eSyaConfigAPIServices.HttpClientServices.GetAsync<List<DO_TaxRule>>("TaxRule/GetTaxRuleByISDandTaxCode" + parameter).Result;
                return Json(serviceResponse.Data);
            }
            catch (Exception ex)
            {
                return Json(new DO_ReturnParameter() { Status = false, Message = (ex.InnerException != null) ? ex.InnerException.Message : ex.Message });
            }
        }

        /// <summary>
        /// Insert Tax Structure 
        /// </summary>
        [HttpPost]
        public JsonResult InsertIntoTaxRule(DO_TaxRule tax_Rule)
        {
            try
            {
                tax_Rule.UserID = AppSessionVariables.GetSessionUserID(HttpContext);
                tax_Rule.TerminalID = AppSessionVariables.GetIPAddress(HttpContext);
                tax_Rule.FormId = AppSessionVariables.GetSessionFormInternalID(HttpContext);
                tax_Rule.ActiveStatus = true;
                if (tax_Rule.SerialNumber == 0)
                {
                    var serviceResponse = _eSyaConfigAPIServices.HttpClientServices.PostAsJsonAsync<DO_ReturnParameter>("TaxRule/InsertIntoTaxRule", tax_Rule).Result;
                    if (serviceResponse.Status)
                        return Json(serviceResponse.Data);
                    else
                        return Json(new DO_ReturnParameter() { Status = false, Message = serviceResponse.Message });
                }

                else
                {
                    var serviceResponse = _eSyaConfigAPIServices.HttpClientServices.PostAsJsonAsync<DO_ReturnParameter>("TaxRule/UpdateTaxRule", tax_Rule).Result;
                    if (serviceResponse.Status)
                        return Json(serviceResponse.Data);
                    else
                        return Json(new DO_ReturnParameter() { Status = false, Message = serviceResponse.Message });
                }
            }
            catch (Exception ex)
            {
                return Json(new { Status = false, Message = ex.InnerException == null ? ex.Message.ToString() : ex.InnerException.Message });
            }
        }
        
        #endregion Tax Code Rule

        #region Tax Identification
        [Area("eSyaConfig")]
        public IActionResult V_76_00()
        {
            ViewBag.formName = "Tax Identification";
            return View();
        }

        #endregion Tax Identification

    }
}

