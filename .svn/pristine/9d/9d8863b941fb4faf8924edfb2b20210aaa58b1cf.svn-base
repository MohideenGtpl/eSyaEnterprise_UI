using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using eSyaEnterprise_UI.ActionFilter;
using eSyaEnterprise_UI.Areas.eSyaClinicalServices.Models;
using eSyaEnterprise_UI.Areas.eSyaClinicalServices.Data;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using Microsoft.AspNetCore.Mvc.Rendering;
using eSyaEnterprise_UI.Utility;
using Newtonsoft.Json;

namespace eSyaEnterprise_UI.Areas.eSyaClinicalServices.Controllers
{
    public class ClinicDoctorLinkController : Controller
    {
        private readonly IeSyaClinicalAPIServices _eSyaClinicalAPIServices;
        private readonly ILogger<ClinicsController> _logger;

        public ClinicDoctorLinkController(IeSyaClinicalAPIServices eSyaClinicalAPIServices, ILogger<ClinicsController> logger)
        {
            _eSyaClinicalAPIServices = eSyaClinicalAPIServices;
            _logger = logger;
        }

        [Area("eSyaClinicalServices")]
        public IActionResult V_312_00()
        {
            try
            {
                //ViewBag.UserFormRoles = new DO_UserFormRole { IsInsert = true, IsEdit = true, IsDelete = true };
                var serviceResponse = _eSyaClinicalAPIServices.HttpClientServices.GetAsync<List<DO_BusinessLocation>>("CommonData/GetBusinessKey").Result;
                ViewBag.BusinessLocation = serviceResponse.Data.Select(a => new SelectListItem
                {
                    Text = a.LocationDescription,
                    Value = a.BusinessKey.ToString()
                });
                return View();
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:GetBusinessLocation");
                throw ex;
            }
        }

        /// <summary>
        /// Get Specialty List By Business Key
        /// </summary>
        [HttpPost]
        public JsonResult GetSpecialtyListForBusinessKey(int businessKey)
        {
            try
            {
                var response = _eSyaClinicalAPIServices.HttpClientServices.GetAsync<List<DO_SpecialtyClinicLink>>("Specialty/GetSpecialtyListForBusinessKey?businessKey=" + businessKey).Result;
                return Json(response.Data);

            }
            catch (Exception ex)
            {
                return Json(new DO_ReturnParameter() { Status = false, Message = (ex.InnerException != null) ? ex.InnerException.Message : ex.Message });
            }
        }

        /// <summary>
        ///Get Doctor Code for Tree View
        /// </summary>
        [Produces("application/json")]
        public IActionResult GetSpecialtyDoctorLinkTree(int businessKey, int specialtyId)
        {
            try
            {
                var response = _eSyaClinicalAPIServices.HttpClientServices.GetAsync<List<DO_SpecialtyDoctorLink>>("Specialty/GetDoctorListByBKeySpecialtyId?businessKey=" + businessKey + "&specialtyId=" + specialtyId).Result;

                List<jsTreeObject> DoctorTree = new List<jsTreeObject>();

                jsTreeObject obj;
                //obj = new jsTreeObject
                //{
                //    id = "H0",
                //    parent = "#",
                //    text = "Doctor Names",
                //    icon = "/images/jsTree/foldergroupicon.png",
                //    state = new stateObject { opened = true, selected = false }
                //};

                //DoctorTree.Add(obj);

                if (response.Data != null)
                {
                    foreach (DO_SpecialtyDoctorLink lst in response.Data)
                    {
                        obj = new jsTreeObject
                        {
                            id = "DR" + lst.DoctorID.ToString(),
                            parent = "#",
                            text = lst.DoctorName,
                            icon = "/images/jsTree/fileIcon.png"
                        };

                        DoctorTree.Add(obj);
                    }
                }
                return Json(DoctorTree);
            }
            catch (Exception ex)
            {
                return Json(new DO_ReturnParameter() { Status = false, Message = (ex.InnerException != null) ? ex.InnerException.Message : ex.Message });
            }
        }

        [Produces("application/json")]
        public IActionResult GetClinicConsultantTreeList(int businessKey, int specialtyId, int doctorId)
        {
            try
            {
                List<jsTreeObject> ClinicConsultantTree = new List<jsTreeObject>();

                jsTreeObject jsObj = new jsTreeObject
                {
                    id = "CL0",
                    parent = "#",
                    text = "Clinics",
                    //icon = "/images/jsTree/foldergroupicon.png",
                    state = new stateObject { opened = true, selected = false }
                };
                ClinicConsultantTree.Add(jsObj);

                var clinicResponse = _eSyaClinicalAPIServices.HttpClientServices.GetAsync<List<DO_DoctorClinic>>("Clinic/GetDoctorClinicLinkList?businessKey=" + businessKey + "&specialtyId=" + specialtyId + "&doctorId=" + doctorId).Result;

                if (clinicResponse.Data != null)
                {
                    List<DO_OPClinic> clinic_list = clinicResponse.Data.Select(x => new DO_OPClinic { ClinicId = x.ClinicId, ClinicDesc = x.ClinicDesc }).GroupBy(y => y.ClinicId, (key, grp) => grp.FirstOrDefault()).ToList();
                    foreach (DO_OPClinic cl in clinic_list)
                    {
                        jsObj = new jsTreeObject
                        {
                            id = cl.ClinicId.ToString(),
                            text = cl.ClinicDesc.ToString(),
                            //icon = "/images/jsTree/openfolder.png",
                            parent = "CL0",
                            state = new stateObject { opened = true, selected = false },
                        };
                        ClinicConsultantTree.Add(jsObj);
                    }

                    var conusltant_list = clinicResponse.Data;
                    foreach (var co in conusltant_list.Where(w => conusltant_list.Any(f => f.ClinicId == w.ClinicId)))
                    {
                        jsObj = new jsTreeObject
                        {
                            text = co.ConsultationDesc,
                            parent = co.ClinicId.ToString()
                        };
                        if (co.BusinessKey > 0)
                        {
                            jsObj.id = co.ClinicId.ToString() + "_" + "Y" + "_" + co.ConsultationId;
                            //jsObj.icon = "/images/jsTree/checkedstate.jpg";
                            if (co.ActiveStatus)
                                jsObj.state = new stateObject { opened = true, selected = true, Checked = true };
                            else
                                jsObj.state = new stateObject { opened = true, selected = false, Checked = false };
                        }
                        else
                        {
                            jsObj.id = co.ClinicId.ToString() + "_" + "N" + "_" + co.ConsultationId;
                            //jsObj.icon = "/images/jsTree/fileIcon.png";
                            jsObj.state = new stateObject { opened = true, selected = false, Checked = false };
                        }

                        ClinicConsultantTree.Add(jsObj);
                    }
                }

                return Json(ClinicConsultantTree);
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// Insert / Update Doctor Clinic
        /// </summary>
        [HttpPost]
        public JsonResult InsertUpdateDoctorClinicLink(List<DO_DoctorClinic> do_cl)
        {
            try
            {
                do_cl.All(c =>
                {
                    c.UserID = AppSessionVariables.GetSessionUserID(HttpContext);
                    c.TerminalID = AppSessionVariables.GetIPAddress(HttpContext);
                    c.FormId = AppSessionVariables.GetSessionFormInternalID(HttpContext);
                    return true;
                });

                var Insertresponse = _eSyaClinicalAPIServices.HttpClientServices.PostAsJsonAsync<DO_ReturnParameter>("Clinic/InsertUpdateDoctorClinicLink", do_cl).Result;
                return Json(Insertresponse.Data);

            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:InsertUpdateDoctorClinicLink:params:" + JsonConvert.SerializeObject(do_cl));
                throw ex;
            }
        }
    }
}