using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using eSyaEnterprise_UI.Areas.eSyaMaterial.Data;
using eSyaEnterprise_UI.Areas.eSyaMaterial.Models;
using eSyaEnterprise_UI.Models;
using eSyaEnterprise_UI.Utility;
using Microsoft.AspNetCore.Mvc;
using eSyaEnterprise_UI.ActionFilter;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json;

namespace eSyaEnterprise_UI.Areas.eSyaMaterial.Controllers
{
    public class ItemControlController : Controller
    {
        private readonly IeSyaMaterialAPIServices _eSyaMaterialAPIServices;
        private readonly ILogger<ItemControlController> _logger;
        public ItemControlController(IeSyaMaterialAPIServices eSyaMaterialAPIServices, ILogger<ItemControlController> logger)
        {
            _eSyaMaterialAPIServices = eSyaMaterialAPIServices;
            _logger = logger;
        }

        /// <summary>
        /// Item Group
        /// </summary>
        /// <returns></returns>

        [Area("eSyaMaterial")]
        [ServiceFilter(typeof(ViewBagActionFilter))]
        public IActionResult V_1001_00()
        {
            return View();
        }


        /// <summary>
        /// Item Category
        /// </summary>
        /// <returns></returns>
        [Area("eSyaMaterial")]
        [ServiceFilter(typeof(ViewBagActionFilter))]
        public IActionResult V_1002_00()
        {
            return View();
        }

        /// <summary>
        /// Item Sub Category
        /// </summary>
        /// <returns></returns>
        [Area("eSyaMaterial")]
        [ServiceFilter(typeof(ViewBagActionFilter))]
        public IActionResult V_1003_00()
        {
            return View();
        }

        /// <summary>
        /// Item Group Category Link
        /// </summary>
        /// <returns></returns>
        [Area("eSyaMaterial")]
        [ServiceFilter(typeof(ViewBagActionFilter))]
        public IActionResult V_1004_00()
        {
            var serviceResponse = _eSyaMaterialAPIServices.HttpClientServices.GetAsync<List<DO_ItemCategory>>("ItemControl/GetItemCategory").Result;
            var ic_list = serviceResponse.Data.FindAll(w => w.ActiveStatus == true);   
            ViewBag.ItemCategories = ic_list;
            var serviceResponse1 = _eSyaMaterialAPIServices.HttpClientServices.GetAsync<List<DO_ItemGroup>>("ItemControl/GetItemGroup").Result;
            var ig_list = serviceResponse1.Data.FindAll(w => w.ActiveStatus == true);
            ViewBag.ItemGroups = ig_list;
           // ViewBag.UserFormRoles = new DO_UserFormRole { IsInsert = true, IsEdit = true, IsDelete = true };
            return View();
            
        }


        #region ItemGroup
        [Produces("application/json")]
        [HttpGet]
        public async Task<ActionResult> GetItemGroup()
        {
            try
            {
                List<jsTreeObject> treeView = new List<jsTreeObject>();

                jsTreeObject jsObj = new jsTreeObject();
                jsObj.id = "IG";
                jsObj.parent = "#";
                jsObj.text = "Item Groups";
                jsObj.icon = "/images/jsTree/foldergroupicon.png";
                jsObj.state = new stateObject { opened = true, selected = false };
                treeView.Add(jsObj);

                var serviceResponse = await _eSyaMaterialAPIServices.HttpClientServices.GetAsync<List<DO_ItemGroup>>("ItemControl/GetItemGroup");
                var ig_list = serviceResponse.Data;
                if (ig_list != null)
                {
                    foreach (var ig in ig_list)
                    {
                        jsObj = new jsTreeObject();
                        jsObj.id = ig.ItemGroupId.ToString();
                        jsObj.text = ig.ItemGroupDesc;
                        jsObj.icon = "/images/jsTree/openfolder.png";
                        jsObj.parent = "IG";
                        treeView.Add(jsObj);
                    }
                }
                return Json(treeView);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:GetItemGroup");
                throw ex;
            }
        }
        public async Task<ActionResult> GetItemGroupByID(int ItemGroupID)
        {
            try
            {
                var serviceResponse = await _eSyaMaterialAPIServices.HttpClientServices.GetAsync<DO_ItemGroup>("ItemControl/GetItemGroupByID?ItemGroupID=" + ItemGroupID);
                var data = serviceResponse.Data;
                return Json(data);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:GetItemGroupByID:For ItemGroupID {0}", ItemGroupID);
                return Json(new { Status = false, Message = ex.ToString() });
            }
        }
        public async Task<ActionResult> AddOrUpdateItemGroup(DO_ItemGroup obj)
        {
            try
            {
                obj.FormID = AppSessionVariables.GetSessionFormInternalID(HttpContext);
                obj.CreatedOn = DateTime.Now;
                obj.UserID = AppSessionVariables.GetSessionUserID(HttpContext);
                obj.TerminalID = AppSessionVariables.GetIPAddress(HttpContext);

                var serviceResponse = await _eSyaMaterialAPIServices.HttpClientServices.PostAsJsonAsync<DO_ReturnParameter>("ItemControl/AddOrUpdateItemGroup", obj);
                if (serviceResponse.Status == true)
                {
                    return Json(serviceResponse.Data);
                }
                return Json(new DO_ReturnParameter() { Status = false, Message = serviceResponse.Message });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:AddOrUpdateItemGroup:params:" + JsonConvert.SerializeObject(obj));
                return Json(new { Status = false, Message = ex.ToString() });
            }
        }
        #endregion
        #region ItemCategory
        public async Task<ActionResult> LoadItemCategoryTree()
        {
            try
            {
                List<jsTreeObject> treeView = new List<jsTreeObject>();

                jsTreeObject jsObj = new jsTreeObject();
                jsObj.id = "IC";
                jsObj.parent = "#";
                jsObj.text = "Item Categories";
                jsObj.icon = "/images/jsTree/foldergroupicon.png";
                jsObj.state = new stateObject { opened = true, selected = false };
                treeView.Add(jsObj);
                var serviceResponse = await _eSyaMaterialAPIServices.HttpClientServices.GetAsync<List<DO_ItemCategory>>("ItemControl/GetItemCategory");
                var ic_list = serviceResponse.Data;

                foreach (var ic in ic_list)
                {
                    jsObj = new jsTreeObject();
                    jsObj.id = ic.ItemCategory.ToString();
                    jsObj.text = ic.ItemCategoryDesc;
                    jsObj.icon = "/images/jsTree/openfolder.png";
                    jsObj.parent = "IC";
                    jsObj.state = new stateObject { opened = false, selected = false };
                    treeView.Add(jsObj);
                }

                return Json(treeView);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:LoadItemCategoryTree");
                throw ex;
            }
            

        }
        public async Task<ActionResult> GetItemCategoryByID(int ItemCategory)
        {
            try
            {
                var serviceResponse = await _eSyaMaterialAPIServices.HttpClientServices.GetAsync<DO_ItemCategory>("ItemControl/GetItemCategoryByID?ItemCategory=" + ItemCategory);
                var data = serviceResponse.Data;

                return Json(data);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:GetItemCategoryByID:For ItemCategory {0}", ItemCategory);
                return Json(new { Status = false, Message = ex.ToString() });
            }
        }
        public async Task<ActionResult> AddOrUpdateItemCategory(DO_ItemCategory obj)
        {
            try
            {
                obj.FormID = AppSessionVariables.GetSessionFormInternalID(HttpContext);
                obj.CreatedOn = DateTime.Now;
                obj.UserID = AppSessionVariables.GetSessionUserID(HttpContext);
                obj.TerminalID = AppSessionVariables.GetIPAddress(HttpContext);
                var serviceResponse = await _eSyaMaterialAPIServices.HttpClientServices.PostAsJsonAsync<DO_ReturnParameter>("ItemControl/AddOrUpdateItemCategory", obj);
                if (serviceResponse.Status == true)
                {
                    return Json(serviceResponse.Data);
                }
                return Json(new DO_ReturnParameter() { Status = false, Message = serviceResponse.Message });

            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:AddOrUpdateItemCategory:params:" + JsonConvert.SerializeObject(obj));
                return Json(new { Status = false, Message = ex.ToString() });
            }
        }
        #endregion
        #region ItemSubCategory
        public async Task<ActionResult> LoadItemSubCategoryTree()
        {
            try
            {
                List<jsTreeObject> treeView = new List<jsTreeObject>();

                jsTreeObject jsObj = new jsTreeObject();
                var serviceResponse = await _eSyaMaterialAPIServices.HttpClientServices.GetAsync<List<DO_ItemCategory>>("ItemControl/GetItemCategory");
                var ic_list = serviceResponse.Data;

                foreach (var ic in ic_list)
                {
                    jsObj = new jsTreeObject();
                    jsObj.id = ic.ItemCategory.ToString();
                    jsObj.text = ic.ItemCategoryDesc;
                    jsObj.icon = "/images/jsTree/openfolder.png";
                    jsObj.parent = "#";
                    jsObj.state = new stateObject { opened = false, selected = false };
                    treeView.Add(jsObj);

                    var serviceResponse1 = await _eSyaMaterialAPIServices.HttpClientServices.GetAsync<List<DO_ItemSubCategory>>("ItemControl/GetItemSubCategoryByCateID?ItemCategory=" + ic.ItemCategory);
                    var isc_list = serviceResponse1.Data;

                    foreach (var isc in isc_list)
                    {
                        jsObj = new jsTreeObject();
                        jsObj.id = "S" + isc.ItemSubCategory.ToString();
                        jsObj.text = isc.ItemSubCategoryDesc;
                        jsObj.icon = "/images/jsTree/fileIcon.png";
                        jsObj.parent = ic.ItemCategory.ToString();
                        treeView.Add(jsObj);

                    }

                }

                return Json(treeView);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:LoadItemSubCategoryTree");
                throw ex;
            }
            

        }
        public async Task<ActionResult> GetItemSubCategoryByID(int ItemSubCategory)
        {
            try
            {
                var serviceResponse = await _eSyaMaterialAPIServices.HttpClientServices.GetAsync<DO_ItemSubCategory>("ItemControl/GetItemSubCategoryByID?ItemSubCategory=" + ItemSubCategory);
                var data = serviceResponse.Data;

                return Json(data);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:GetItemSubCategoryByID:For ItemSubCategory {0}", ItemSubCategory);
                return Json(new
                {
                    Status = false,
                    Message = ex.ToString()
                });
            }
        }
        public async Task<ActionResult>AddOrUpdateItemSubCategory(DO_ItemSubCategory obj)
        {
            try
            {
                obj.FormID = AppSessionVariables.GetSessionFormInternalID(HttpContext);
                obj.CreatedOn = DateTime.Now;
                obj.UserID = AppSessionVariables.GetSessionUserID(HttpContext);
                obj.TerminalID = AppSessionVariables.GetIPAddress(HttpContext);

                var serviceResponse = await _eSyaMaterialAPIServices.HttpClientServices.PostAsJsonAsync<DO_ReturnParameter>("ItemControl/AddOrUpdateItemSubCategory", obj);
                if (serviceResponse.Status == true)
                {
                    return Json(serviceResponse.Data);
                }
                return Json(new DO_ReturnParameter() { Status = false, Message = serviceResponse.Message });

            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:AddOrUpdateItemSubCategory:params:" + JsonConvert.SerializeObject(obj));
                return Json(new { Status = false, Message = ex.ToString() });
            }
        }
        public async Task<ActionResult> GetItemSubCategoryByCateID(int ItemCategory)
        {
            try
            {
                var serviceResponse = await _eSyaMaterialAPIServices.HttpClientServices.GetAsync<List<DO_ItemSubCategory>>("ItemControl/GetItemSubCategoryByCateID?ItemCategory=" + ItemCategory);
                var data = serviceResponse.Data;
                return Json(data);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:GetItemSubCategoryByCateID:For ItemCategory {0}", ItemCategory);
                return Json(new { Status = false, Message = ex.ToString() });
            }
        }
        #endregion
        #region ItemGroupCategoryMapping
        public async Task<ActionResult> LoadItemGroupCateSubCateTree()
        {
            try
            {
                List<jsTreeObject> treeView = new List<jsTreeObject>();
                jsTreeObject jsObj = new jsTreeObject();
                var serviceResponse = await _eSyaMaterialAPIServices.HttpClientServices.GetAsync<List<DO_ItemGroup>>("ItemControl/GetItemGroup");
                var ig_list = serviceResponse.Data.FindAll(w => w.ActiveStatus == true);
                if(ig_list != null) {
                    foreach (var ig in ig_list)
                    {

                        jsObj = new jsTreeObject();
                        jsObj.id = "G" + ig.ItemGroupId.ToString();
                        jsObj.text = ig.ItemGroupDesc;
                        jsObj.icon = "/images/jsTree/openfolder.png";
                        jsObj.parent = "#";
                        treeView.Add(jsObj);

                        var serviceResponse1 = await _eSyaMaterialAPIServices.HttpClientServices.GetAsync<List<DO_ItemCategory>>("ItemControl/GetItemCategoryByItemGroupID?ItemGroup=" + ig.ItemGroupId);
                        var ic_list = serviceResponse1.Data.FindAll(w => w.ActiveStatus == true);
                        if (ic_list != null)
                        {
                            foreach (var ic in ic_list)
                            {

                                jsObj = new jsTreeObject();
                                jsObj.id = "CG" + ig.ItemGroupId.ToString() + ic.ItemCategory.ToString();
                                jsObj.text = ic.ItemCategoryDesc;
                                jsObj.icon = "/images/jsTree/openfolder.png";
                                jsObj.parent = "G" + ig.ItemGroupId.ToString();
                                treeView.Add(jsObj);

                                var serviceResponse2 = await _eSyaMaterialAPIServices.HttpClientServices.GetAsync<List<DO_ItemSubCategory>>("ItemControl/GetItemCategoryByItemGroupCategory?ItemGroup=" + ig.ItemGroupId + "&ItemCategory=" + ic.ItemCategory);
                                var isc_list = serviceResponse2.Data.FindAll(w => w.ActiveStatus == true);
                                if (isc_list != null)
                                {
                                    foreach (var isc in isc_list)

                                    {
                                        jsObj = new jsTreeObject();
                                        jsObj.id = "SCG" + ig.ItemGroupId.ToString() + ic.ItemCategory.ToString() + isc.ItemSubCategory.ToString();
                                        jsObj.text = isc.ItemSubCategoryDesc;
                                        jsObj.icon = "/images/jsTree/fileIcon.png";
                                        jsObj.parent = "CG" + ig.ItemGroupId.ToString() + ic.ItemCategory.ToString();
                                        treeView.Add(jsObj);


                                    }
                                }
                            }
                        }
                    }
                }


                return Json(treeView);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:LoadItemGroupCateSubCateTree");
                throw ex;
            }
            


        }
        public async Task<ActionResult> ItemGroupCateSubCateMapping(DO_ItemGroupCategory obj)
        {
            try
            {
                obj.FormID = AppSessionVariables.GetSessionFormInternalID(HttpContext);
                obj.CreatedOn = DateTime.Now;
                obj.UserID = AppSessionVariables.GetSessionUserID(HttpContext);
                obj.TerminalID = AppSessionVariables.GetIPAddress(HttpContext);

                var serviceResponse = await _eSyaMaterialAPIServices.HttpClientServices.PostAsJsonAsync<DO_ReturnParameter>("ItemControl/ItemGroupCateSubCateMapping", obj);
                if (serviceResponse.Status == true)
                {
                    return Json(serviceResponse.Data);
                }
                return Json(new DO_ReturnParameter() { Status = false, Message = serviceResponse.Message });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:ItemGroupCateSubCateMapping:params:" + JsonConvert.SerializeObject(obj));
                return Json(new { Status = false, Message = ex.ToString() });
            }
        }
        public async Task<ActionResult> GetMappingRecord(int ItemGroupID, int ItemCategory, int ItemSubCategory)
        {
            try
            {
                var serviceResponse = await _eSyaMaterialAPIServices.HttpClientServices.GetAsync<DO_ItemGroupCategory>("ItemControl/GetMappinRecord?ItemGroupID=" + ItemGroupID + "&ItemCategory=" + ItemCategory + "&ItemSubCategory=" + ItemSubCategory);
                var data = serviceResponse.Data;
                return Json(data);


            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:GetMappingRecord:For ItemGroupID {0}, ItemCategory {1},ItemSubCategory {2}", ItemGroupID, ItemCategory, ItemSubCategory);
                return Json(new { Status = false, Message = ex.ToString() });
            }
        }
        #endregion
    }
}