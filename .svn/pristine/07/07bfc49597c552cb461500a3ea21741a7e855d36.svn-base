using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using eSyaEnterprise_UI.Areas.PatientManagement.Data;
using eSyaEnterprise_UI.Areas.PatientManagement.Models;
using eSyaEnterprise_UI.Utility;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;

namespace eSyaEnterprise_UI.Areas.PatientManagement.Controllers
{
    public class RegistrationController : Controller
    {
        private readonly IPatientManagementAPIServices _patientManagementAPIServices;
        private readonly ILogger<RegistrationController> _logger;

        public RegistrationController(IPatientManagementAPIServices patientManagementAPIServices, ILogger<RegistrationController> logger)
        {
            _patientManagementAPIServices = patientManagementAPIServices;
            _logger = logger;
        }

        [Area("PatientManagement")]
        public IActionResult EPM_03_00()
        {
            return View();
        }

        //public PartialViewResult _address()
        //{
        //    return PartialView();
        //}



        public async Task<IActionResult> GetPatientFODeskListByMobile(string mobileNumber)
        {
            try
            {
                var parameter = "?mobileNumber=" + mobileNumber;
                var serviceResponse = await _patientManagementAPIServices.HttpClientServices.GetAsync<DO_PatientFODeskList>("OpClinicDetails/GetPatientFODeskListByMobile" + parameter);
                if (serviceResponse.Status)
                    return Json(serviceResponse.Data);
                else
                {
                    _logger.LogError(new Exception(serviceResponse.Message), "UD:GetPatientInfoRegistrationByMobileNo:params:mobileNumber:{0}" + mobileNumber);
                    return Json(new DO_ResponseParameter() { Status = false, Message = serviceResponse.Message });
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:GetPatientInfoRegistrationByMobileNo:params:mobileNumber:{0}" + mobileNumber);
                throw ex;
            }
        }

        public async Task<IActionResult> GetClinictype()
        {
            try
            {
                var parameter = "?businessKey=" + AppSessionVariables.GetSessionBusinessKey(HttpContext);
                var serviceResponse = await _patientManagementAPIServices.HttpClientServices.GetAsync<List<DO_ClinicType>>("OpClinicDetails/GetClinicTypes"+ parameter);
                if (serviceResponse.Status)
                    return Json(serviceResponse.Data);
                else
                {
                    _logger.LogError(new Exception(serviceResponse.Message), "UD:GetClinicTypes");
                    return Json(new DO_ResponseParameter() { Status = false, Message = serviceResponse.Message });
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:GetClinicTypes");
                throw ex;
            }
        }

        public async Task<IActionResult> GetSpecialty()
        {
            try
            {
                var parameter = "?businessKey=" + AppSessionVariables.GetSessionBusinessKey(HttpContext);
                var serviceResponse = await _patientManagementAPIServices.HttpClientServices.GetAsync<List<DO_Specialty>>("OpClinicDetails/GetSpecialty"+ parameter);
                if (serviceResponse.Status)
                    return Json(serviceResponse.Data);
                else
                {
                    _logger.LogError(new Exception(serviceResponse.Message), "UD:GetSpecialty");
                    return Json(new DO_ResponseParameter() { Status = false, Message = serviceResponse.Message });
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:GetSpecialty");
                throw ex;
            }
        }

        public async Task<IActionResult> GetDoctorScheduleListByClinicTypeSpecialtyDate(int clinicTypeId, int consultationTypeId,
           int specialtyId)
        {
            try
            {
                var parameter = "?businessKey=" + AppSessionVariables.GetSessionBusinessKey(HttpContext);
                parameter += "&clinicTypeId=" + clinicTypeId.ToString();
                parameter += "&consultationTypeId=" + consultationTypeId.ToString();
                parameter += "&specialtyID=" + specialtyId.ToString();
                parameter += "&scheduleDate=" + DateTime.Now.ToString("dd-MMM-yyyy");

                var serviceResponse = await _patientManagementAPIServices.HttpClientServices.GetAsync<List<DO_DoctorClinicSchedule>>("OpClinicDetails/GetDoctorScheduleListByClinicTypeSpecialtyDate"+parameter);
                if (serviceResponse.Status)
                    return Json(serviceResponse.Data);
                else
                {
                    _logger.LogError(new Exception(serviceResponse.Message), "UD:GetDoctorScheduleListByClinicTypeSpecialtyDate");
                    return Json(new DO_ResponseParameter() { Status = false, Message = serviceResponse.Message });
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:GetDoctorScheduleListByClinicTypeSpecialtyDate");
                throw ex;
            }
        }

    }
}