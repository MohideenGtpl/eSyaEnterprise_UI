using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using eSyaEnterprise_UI.ActionFilter;
using eSyaEnterprise_UI.Areas.eSyaServices.Data;
using eSyaEnterprise_UI.Areas.eSyaServices.Models;
using eSyaEnterprise_UI.Models;
using eSyaEnterprise_UI.Utility;
using Microsoft.AspNetCore.Mvc;

namespace eSyaEnterprise_UI.Areas.eSyaServices.Controllers
{
    public class ServiceManagementController : Controller
    {
        private readonly IeSyaServicesAPIServices _eSyaServicesAPIServices;
        public ServiceManagementController(IeSyaServicesAPIServices eSyaServicesAPIServices)
        {
            _eSyaServicesAPIServices = eSyaServicesAPIServices;

        }

        /// <summary>
        /// Service Type
        /// </summary>
        /// <returns></returns>

        [Area("eSyaServices")]
        [ServiceFilter(typeof(ViewBagActionFilter))]
        public IActionResult V_1501_00()
        {
            ViewBag.formName = "Service Type";
            //ViewBag.UserFormRoles = new DO_UserFormRole { IsInsert = true, IsEdit = true, IsDelete = true };
            return View();
        }

        /// <summary>
        /// Service Group
        /// </summary>
        /// <returns></returns>

        [Area("eSyaServices")]
        [ServiceFilter(typeof(ViewBagActionFilter))]
        public IActionResult V_1502_00()
        {
            ViewBag.formName = "Service Group";
            //ViewBag.UserFormRoles = new DO_UserFormRole { IsInsert = true, IsEdit = true, IsDelete = true };
            return View();
        }

        /// <summary>
        /// Service Class
        /// </summary>
        /// <returns></returns>

        [Area("eSyaServices")]
        [ServiceFilter(typeof(ViewBagActionFilter))]
        public IActionResult V_1503_00()
        {
            ViewBag.formName = "Service Class";
            //ViewBag.UserFormRoles = new DO_UserFormRole { IsInsert = true, IsEdit = true, IsDelete = true };
            return View();
        }

        /// <summary>
        /// Service Master
        /// </summary>
        /// <returns></returns>

        [Area("eSyaServices")]
        [ServiceFilter(typeof(ViewBagActionFilter))]
        public IActionResult V_1510_00()
        {
            ViewBag.formName = "Service Master";
           // ViewBag.UserFormRoles = new DO_UserFormRole { IsInsert = true, IsEdit = true, IsDelete = true };
            return View();
        }


        #region ServiceType
        [Produces("application/json")]
        [HttpGet]
        public ActionResult GetServiceTypes()
        {
            try
            {
                List<jsTreeObject> treeView = new List<jsTreeObject>();

                jsTreeObject jsObj = new jsTreeObject();
                jsObj.id = "ST";
                jsObj.parent = "#";
                jsObj.text = "Service Types";
                jsObj.icon = "/images/jsTree/foldergroupicon.png";
                jsObj.state = new stateObject { opened = true, selected = false };
                treeView.Add(jsObj);

                var serviceResponse = _eSyaServicesAPIServices.HttpClientServices.GetAsync<List<DO_ServiceType>>("ServiceManagement/GetServiceTypes").Result;
                var st_list = serviceResponse.Data;
                if (st_list != null)
                {
                    foreach (var ig in st_list)
                    {
                        jsObj = new jsTreeObject();
                        jsObj.id = ig.ServiceTypeId.ToString();
                        jsObj.text = ig.ServiceTypeDesc;
                        jsObj.icon = "/images/jsTree/openfolder.png";
                        jsObj.parent = "ST";
                        treeView.Add(jsObj);
                    }
                }
                return Json(treeView);
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public ActionResult GetServiceTypeByID(int ServiceTypeID)
        {
            try
            {
                var serviceResponse = _eSyaServicesAPIServices.HttpClientServices.GetAsync<DO_ServiceType>("ServiceManagement/GetServiceTypeByID?ServiceTypeID=" + ServiceTypeID).Result;
                var data = serviceResponse.Data;
                return Json(data);
            }
            catch (Exception ex)
            {
                return Json(new { Status = false, Message = ex.ToString() });
            }
        }
        public ActionResult AddOrUpdateServiceType(DO_ServiceType obj)
        {
            try
            {
                //obj.FormID = AppSessionVariables.GetSessionFormInternalID(HttpContext);
                obj.FormID = "V_1501_00";
                obj.CreatedOn = DateTime.Now;
                obj.UserID = AppSessionVariables.GetSessionUserID(HttpContext);
                obj.TerminalID = AppSessionVariables.GetIPAddress(HttpContext);

                var serviceResponse = _eSyaServicesAPIServices.HttpClientServices.PostAsJsonAsync<DO_ReturnParameter>("ServiceManagement/AddOrUpdateServiceType", obj).Result;
                if (serviceResponse.Status == true)
                {
                    return Json(serviceResponse.Data);
                }
                return Json(new DO_ReturnParameter() { Status = false, Message = serviceResponse.Message });
            }
            catch (Exception ex)
            {
                return Json(new { Status = false, Message = ex.ToString() });
            }
        }
        #endregion
        #region ServiceGroup
        public ActionResult GetServiceGroups()
        {
            List<jsTreeObject> treeView = new List<jsTreeObject>();
            jsTreeObject jsObj = new jsTreeObject();

            var serviceResponse = _eSyaServicesAPIServices.HttpClientServices.GetAsync<List<DO_ServiceType>>("ServiceManagement/GetServiceTypes").Result;
            var st_list = serviceResponse.Data;
            var serviceResponse1 = _eSyaServicesAPIServices.HttpClientServices.GetAsync<List<DO_ServiceGroup>>("ServiceManagement/GetServiceGroups").Result;
            var sg_list = serviceResponse1.Data;
            foreach (var st in st_list)
            {
                jsObj = new jsTreeObject();
                jsObj.id = st.ServiceTypeId.ToString();
                jsObj.text = st.ServiceTypeDesc;
                jsObj.icon = "/images/jsTree/openfolder.png";
                jsObj.parent = "#";
                jsObj.state = new stateObject { opened = false, selected = false };
                treeView.Add(jsObj);

                foreach (var sg in sg_list)
                {
                    if (st.ServiceTypeId == sg.ServiceTypeId)
                    {
                        jsObj = new jsTreeObject();
                        jsObj.id = "G" + sg.ServiceGroupId.ToString();
                        jsObj.text = sg.ServiceGroupDesc;
                        jsObj.icon = "/images/jsTree/fileIcon.png";
                        jsObj.parent = st.ServiceTypeId.ToString();
                        treeView.Add(jsObj);
                    }
                }

            }

            return Json(treeView);

        }
        public ActionResult GetServiceGroupByID(int ServiceGroupID)
        {
            try
            {
                var serviceResponse = _eSyaServicesAPIServices.HttpClientServices.GetAsync<DO_ServiceGroup>("ServiceManagement/GetServiceGroupByID?ServiceGroupID=" + ServiceGroupID).Result;
                var data = serviceResponse.Data;
                return Json(data);
            }
            catch (Exception ex)
            {
                return Json(new { Status = false, Message = ex.ToString() });
            }
        }
        public ActionResult AddOrUpdateServiceGroup(DO_ServiceGroup obj)
        {
            try
            {
                obj.FormId = AppSessionVariables.GetSessionFormInternalID(HttpContext);
                obj.CreatedOn = DateTime.Now;
                obj.UserID = AppSessionVariables.GetSessionUserID(HttpContext);
                obj.TerminalID = AppSessionVariables.GetIPAddress(HttpContext);

                var serviceResponse = _eSyaServicesAPIServices.HttpClientServices.PostAsJsonAsync<DO_ReturnParameter>("ServiceManagement/AddOrUpdateServiceGroup", obj).Result;
                if (serviceResponse.Status == true)
                {
                    return Json(serviceResponse.Data);
                }
                return Json(new DO_ReturnParameter() { Status = false, Message = serviceResponse.Message });
            }
            catch (Exception ex)
            {
                return Json(new { Status = false, Message = ex.ToString() });
            }
        }
        public ActionResult UpdateServiceGroupIndex(int serviceTypeId, int serviceGroupId, bool isMoveUp, bool isMoveDown) {
            try
            {
                var serviceResponse = _eSyaServicesAPIServices.HttpClientServices.GetAsync<DO_ReturnParameter>("ServiceManagement/UpdateServiceGroupIndex?serviceTypeId=" + serviceTypeId + "&serviceGroupId=" + serviceGroupId + "&isMoveUp=" + isMoveUp + "&isMoveDown=" + isMoveDown).Result;
                if (serviceResponse.Status == true)
                {
                    return Json(serviceResponse.Data);
                }
                return Json(new DO_ReturnParameter() { Status = false, Message = serviceResponse.Message });
            }
            catch (Exception ex)
            {
                return Json(new { Status = false, Message = ex.ToString() });
            }
        }
        #endregion
        #region ServiceClass
        public ActionResult GetServiceClasses()
        {
            List<jsTreeObject> treeView = new List<jsTreeObject>();
            jsTreeObject jsObj = new jsTreeObject();

            var serviceResponse = _eSyaServicesAPIServices.HttpClientServices.GetAsync<List<DO_ServiceType>>("ServiceManagement/GetServiceTypes").Result;
            var st_list = serviceResponse.Data;
            var serviceResponse1 = _eSyaServicesAPIServices.HttpClientServices.GetAsync<List<DO_ServiceGroup>>("ServiceManagement/GetServiceGroups").Result;
            var sg_list = serviceResponse1.Data;
            var serviceResponse2 = _eSyaServicesAPIServices.HttpClientServices.GetAsync<List<DO_ServiceClass>>("ServiceManagement/GetServiceClasses").Result;
            var sc_list = serviceResponse2.Data;

            foreach (var st in st_list)
            {
                jsObj = new jsTreeObject();
                jsObj.id = "T" + st.ServiceTypeId.ToString();
                jsObj.text = st.ServiceTypeDesc;
                jsObj.icon = "/images/jsTree/openfolder.png";
                jsObj.parent = "#";
                jsObj.state = new stateObject { opened = false, selected = false };
                treeView.Add(jsObj);

                foreach (var sg in sg_list)
                {
                    if (st.ServiceTypeId == sg.ServiceTypeId)
                    {
                        jsObj = new jsTreeObject();
                        jsObj.id = sg.ServiceGroupId.ToString();
                        jsObj.text = sg.ServiceGroupDesc;
                        jsObj.icon = "/images/jsTree/openfolder.png";
                        jsObj.parent = "T" + st.ServiceTypeId.ToString();
                        jsObj.state = new stateObject { opened = false, selected = false };
                        treeView.Add(jsObj);



                        foreach (var sc in sc_list)
                        {
                            if (sg.ServiceGroupId == sc.ServiceGroupId)
                            {
                                if (sc.ServiceClassId == sc.ParentId)
                                {
                                    jsObj = new jsTreeObject();
                                    jsObj.id = "C" + sc.ServiceClassId.ToString();
                                    jsObj.text = sc.ServiceClassDesc;
                                    jsObj.icon = "/images/jsTree/fileIcon.png";
                                    jsObj.parent = sg.ServiceGroupId.ToString();
                                    treeView.Add(jsObj);
                                }
                                else
                                {
                                    jsObj = new jsTreeObject();
                                    jsObj.id = "C" + sc.ServiceClassId.ToString();
                                    jsObj.text = sc.ServiceClassDesc;
                                    jsObj.icon = "/images/jsTree/fileIcon.png";
                                    jsObj.parent = "C" + sc.ParentId.ToString();
                                    treeView.Add(jsObj);
                                }

                            }
                        }
                    }
                }
            }

            return Json(treeView);

        }
        public ActionResult GetServiceClassByID(int ServiceClassID)
        {
            try
            {
                var serviceResponse = _eSyaServicesAPIServices.HttpClientServices.GetAsync<DO_ServiceClass>("ServiceManagement/GetServiceClassByID?ServiceClassID=" + ServiceClassID).Result;
                var data = serviceResponse.Data;
                return Json(data);
            }
            catch (Exception ex)
            {
                return Json(new { Status = false, Message = ex.ToString() });
            }
        }
        public ActionResult AddOrUpdateServiceClass(DO_ServiceClass obj)
        {
            try
            {
                obj.FormId = AppSessionVariables.GetSessionFormInternalID(HttpContext);
                obj.CreatedOn = DateTime.Now;
                obj.UserID = AppSessionVariables.GetSessionUserID(HttpContext);
                obj.TerminalID = AppSessionVariables.GetIPAddress(HttpContext);


                var serviceResponse = _eSyaServicesAPIServices.HttpClientServices.PostAsJsonAsync<DO_ReturnParameter>("ServiceManagement/AddOrUpdateServiceClass", obj).Result;
                if (serviceResponse.Status == true)
                {
                    return Json(serviceResponse.Data);
                }
                return Json(new DO_ReturnParameter() { Status = false, Message = serviceResponse.Message });
            }
            catch (Exception ex)
            {
                return Json(new { Status = false, Message = ex.ToString() });
            }
        }
        public ActionResult UpdateServiceClassIndex(int serviceGroupId, int serviceClassId, bool isMoveUp, bool isMoveDown)
        {
            try
            {
                var serviceResponse = _eSyaServicesAPIServices.HttpClientServices.GetAsync<DO_ReturnParameter>("ServiceManagement/UpdateServiceClassIndex?serviceGroupId=" + serviceGroupId + "&serviceClassId=" + serviceClassId + "&isMoveUp=" + isMoveUp + "&isMoveDown=" + isMoveDown).Result;
                if (serviceResponse.Status == true)
                {
                    return Json(serviceResponse.Data);
                }
                return Json(new DO_ReturnParameter() { Status = false, Message = serviceResponse.Message });
            }
            catch (Exception ex)
            {
                return Json(new { Status = false, Message = ex.ToString() });
            }
        }
        #endregion
        #region ServiceMaster
        public ActionResult GetServiceMaster()
        {
            List<jsTreeObject> treeView = new List<jsTreeObject>();
            jsTreeObject jsObj = new jsTreeObject();

            var serviceResponse = _eSyaServicesAPIServices.HttpClientServices.GetAsync<List<DO_ServiceType>>("ServiceManagement/GetServiceTypes").Result;
            var st_list = serviceResponse.Data;
            var serviceResponse1 = _eSyaServicesAPIServices.HttpClientServices.GetAsync<List<DO_ServiceGroup>>("ServiceManagement/GetServiceGroups").Result;
            var sg_list = serviceResponse1.Data;
            var serviceResponse2 = _eSyaServicesAPIServices.HttpClientServices.GetAsync<List<DO_ServiceClass>>("ServiceManagement/GetServiceClasses").Result;
            var sc_list = serviceResponse2.Data;
            var serviceResponse3 = _eSyaServicesAPIServices.HttpClientServices.GetAsync<List<DO_ServiceMaster>>("ServiceManagement/GetServiceMaster").Result;
            var sm_list = serviceResponse3.Data;

            foreach (var st in st_list)
            {
                jsObj = new jsTreeObject();
                jsObj.id = "T" + st.ServiceTypeId.ToString();
                jsObj.text = st.ServiceTypeDesc;
                jsObj.icon = "/images/jsTree/openfolder.png";
                jsObj.parent = "#";
                jsObj.state = new stateObject { opened = false, selected = false };
                treeView.Add(jsObj);

                foreach (var sg in sg_list)
                {
                    if (st.ServiceTypeId == sg.ServiceTypeId)
                    {
                        jsObj = new jsTreeObject();
                        jsObj.id = "G" + sg.ServiceGroupId.ToString();
                        jsObj.text = sg.ServiceGroupDesc;
                        jsObj.icon = "/images/jsTree/openfolder.png";
                        jsObj.parent = "T" + st.ServiceTypeId.ToString();
                        jsObj.state = new stateObject { opened = false, selected = false };
                        treeView.Add(jsObj);



                        foreach (var sc in sc_list)
                        {
                            if (sg.ServiceGroupId == sc.ServiceGroupId)
                            {
                                if (sc.ServiceClassId == sc.ParentId)
                                {
                                    jsObj = new jsTreeObject();
                                    jsObj.id = "C" + sc.ServiceClassId.ToString();
                                    jsObj.text = sc.ServiceClassDesc;
                                    jsObj.icon = "/images/jsTree/openfolder.png";
                                    jsObj.parent = "G" + sg.ServiceGroupId.ToString();
                                    treeView.Add(jsObj);
                                }
                                else
                                {
                                    jsObj = new jsTreeObject();
                                    jsObj.id = "C" + sc.ServiceClassId.ToString();
                                    jsObj.text = sc.ServiceClassDesc;
                                    jsObj.icon = "/images/jsTree/openfolder.png";
                                    jsObj.parent = "C" + sc.ParentId.ToString();
                                    treeView.Add(jsObj);
                                }

                                foreach(var sm in sm_list)
                                {
                                    if(sc.ServiceClassId==sm.ServiceClassId)
                                    {
                                        jsObj = new jsTreeObject();
                                        jsObj.id = sm.ServiceId.ToString();
                                        jsObj.text = sm.ServiceDesc;
                                        jsObj.icon = "/images/jsTree/fileIcon.png";
                                        jsObj.parent = "C" + sc.ServiceClassId.ToString();
                                        treeView.Add(jsObj);
                                    }
                                }

                            }
                        }
                    }
                }
            }

            return Json(treeView);

        }
        public ActionResult GetServiceMasterByID(int ServiceID)
        {
            try
            {
                var serviceResponse = _eSyaServicesAPIServices.HttpClientServices.GetAsync<DO_ServiceMaster>("ServiceManagement/GetServiceMasterByID?ServiceID=" + ServiceID).Result;
                var data = serviceResponse.Data;
                return Json(data);
            }
            catch (Exception ex)
            {
                return Json(new { Status = false, Message = ex.ToString() });
            }
        }
        public ActionResult AddOrUpdateServiceMaster(DO_ServiceMaster obj)
        {
            try
            {
                obj.FormId = AppSessionVariables.GetSessionFormInternalID(HttpContext);
                obj.CreatedOn = DateTime.Now;
                obj.UserID = AppSessionVariables.GetSessionUserID(HttpContext);
                obj.TerminalID = AppSessionVariables.GetIPAddress(HttpContext);

                var serviceResponse = _eSyaServicesAPIServices.HttpClientServices.PostAsJsonAsync<DO_ReturnParameter>("ServiceManagement/AddOrUpdateServiceMaster", obj).Result;
                if (serviceResponse.Status == true)
                {
                    return Json(serviceResponse.Data);
                }
                return Json(new DO_ReturnParameter() { Status = false, Message = serviceResponse.Message });
            }
            catch (Exception ex)
            {
                return Json(new { Status = false, Message = ex.ToString() });
            }
        }
        #endregion
    }
}