using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using System.Net.Http;
using eSyaEnterprise_UI.Areas.Config.Models;
using eSyaEnterprise_UI.Models;
using eSyaEnterprise_UI.Utility;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Newtonsoft.Json;
using eSyaEnterprise_UI.Areas.Config.Data;

namespace eSyaEnterprise_UI.Areas.Config.Controllers
{
    public class ApplicationCodesController : Controller
    {
        private readonly IeSyaConfigAPIServices _eSyaConfigAPIServices;
        public ApplicationCodesController(IeSyaConfigAPIServices eSyaConfigAPIServices)
        {
            _eSyaConfigAPIServices = eSyaConfigAPIServices;
        }
        ESyaWebAPI _eSyaWebAPI = new ESyaWebAPI();
        #region Code Type
        /// <summary>
        /// Code Type
        /// </summary>
        /// <returns></returns>

        [Area("Config")]
        public IActionResult V_19_00()
        {
            ViewBag.formName = "Code Type";
            return View();
        }
        /// <summary>
        ///Get Code Types for Grid
        /// </summary>
        [HttpPost]
        public JsonResult GetCodeTypes()
        {

            try
            {
                var serviceResponse = _eSyaConfigAPIServices.HttpClientServices.GetAsync<List<DO_CodeTypes>>("CodeTypes/GetCodeTypes").Result;
                return Json(serviceResponse.Data);
            }
            catch (Exception ex)
            {
                return Json(new DO_ReturnParameter() { Status = false, Message = (ex.InnerException != null) ? ex.InnerException.Message : ex.Message });
            }

        }

        /// <summary>
        /// Insert or Update Code Types
        /// </summary>
        [HttpPost]
        public JsonResult InsertOrUpdateCodeTypes(DO_CodeTypes ct_type)
        {

            try
            {
                ct_type.UserID = AppSessionVariables.GetSessionUserID(HttpContext);
                ct_type.TerminalID = AppSessionVariables.GetIPAddress(HttpContext);
                if (ct_type.CodeType == 0)
                {
                    var serviceResponse = _eSyaConfigAPIServices.HttpClientServices.PostAsJsonAsync<DO_ReturnParameter>("CodeTypes/InsertIntoCodeType", ct_type).Result;
                    if (serviceResponse.Status)
                        return Json(serviceResponse.Data);
                    else
                        return Json(new DO_ReturnParameter() { Status = false, Message = serviceResponse.Message });
                }
                else
                {
                    var serviceResponse = _eSyaConfigAPIServices.HttpClientServices.PostAsJsonAsync<DO_ReturnParameter>("CodeTypes/UpdateCodeType", ct_type).Result;
                    if (serviceResponse.Status)
                        return Json(serviceResponse.Data);
                    else
                        return Json(new DO_ReturnParameter() { Status = false, Message = serviceResponse.Message });
                }
            }
            catch (Exception ex)
            {
                return Json(new { Status = false, Message = ex.InnerException == null ? ex.Message.ToString() : ex.InnerException.Message });
            }
        }
        #endregion

        #region Application Codes
        /// <summary>
        /// Application Codes
        /// </summary>
        /// <returns></returns>

        [Area("Config")]
        public IActionResult V_20_00()
        {
            ViewBag.formName = "Application Codes";
            try
            {
                var serviceResponse = _eSyaConfigAPIServices.HttpClientServices.GetAsync<List<DO_CodeTypes>>("CodeTypes/GetActiveCodeTypes").Result;
                ViewBag.ct_list = serviceResponse.Data;
               
                return View();
            }
            catch (Exception ex)
            {
                return Json(new { Status = false, Message = ex.ToString() });
            }
        }

        /// <summary>
        ///Get Application Codes by code Type for Grid
        /// </summary>
        [HttpPost]
        public JsonResult GetApplicationCodesByCodeType(int codeType)
        {

            try
            {
                var serviceResponse = _eSyaConfigAPIServices.HttpClientServices.GetAsync<List<DO_ApplicationCodes>>("ApplicationCodes/GetApplicationCodesByCodeType?codeType=" + codeType).Result;
                return Json(serviceResponse.Data);
            }
            catch (Exception ex)
            {
                return Json(new DO_ReturnParameter() { Status = false, Message = (ex.InnerException != null) ? ex.InnerException.Message : ex.Message });
            }

        }
        /// <summary>
        /// Insert or Update Application Codes 
        /// </summary>
        [HttpPost]
        public JsonResult InsertOrAudateApplicationCodes(DO_ApplicationCodes app_codes)
        {

            try
            {
                app_codes.UserID = AppSessionVariables.GetSessionUserID(HttpContext);
                app_codes.TerminalID = AppSessionVariables.GetIPAddress(HttpContext);

                if (app_codes.ApplicationCode == 0)
                {
                    var serviceResponse = _eSyaConfigAPIServices.HttpClientServices.PostAsJsonAsync<DO_ReturnParameter>("ApplicationCodes/InsertIntoApplicationCodes", app_codes).Result;
                    if (serviceResponse.Status)
                        return Json(serviceResponse.Data);
                    else
                        return Json(new DO_ReturnParameter() { Status = false, Message = serviceResponse.Message });
                }

                else
                {
                    var serviceResponse = _eSyaConfigAPIServices.HttpClientServices.PostAsJsonAsync<DO_ReturnParameter>("ApplicationCodes/UpdateApplicationCodes", app_codes).Result;
                    if (serviceResponse.Status)
                        return Json(serviceResponse.Data);
                    else
                        return Json(new DO_ReturnParameter() { Status = false, Message = serviceResponse.Message });
                }
            }
            catch (Exception ex)
            {
                return Json(new { Status = false, Message = ex.InnerException == null ? ex.Message.ToString() : ex.InnerException.Message });
            }
        }
        #endregion
    }
}