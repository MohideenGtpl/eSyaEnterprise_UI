using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using System.Net.Http;
using eSyaEnterprise_UI.Areas.Config.Models;
using eSyaEnterprise_UI.Models;
using eSyaEnterprise_UI.Utility;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Newtonsoft.Json;
namespace eSyaEnterprise_UI.Areas.Config.Controllers
{
   
    public class LocalizationController : Controller
    {
        ESyaWebAPI _eSyaWebAPI = new ESyaWebAPI();

        #region Localization Table Mapping
        /// <summary>
        /// Localization Master
        /// </summary>
        /// <returns></returns>
        /// 
        [Area("Config")]
        public IActionResult V_23_00()
        {
            ViewBag.formName = "Localization Table Mapping";
            return View();
        }
       
        /// <summary>
        /// Getting Localization Master Table List for Grid
        /// </summary>
        [HttpPost]
        public JsonResult GetLocalizationTableMaster()
        {
            try
            {
                var client = _eSyaWebAPI.InitializeClient(HttpContext.RequestServices.GetRequiredService<IConfiguration>());
                HttpResponseMessage response = client.GetAsync("Localization/GetLocalizationTableMaster").Result;
                string stringData = response.Content.ReadAsStringAsync().Result;
                var data = JsonConvert.DeserializeObject<List<DO_LocalizationMaster>>(stringData);
                return Json(data);
            }
            catch (Exception ex)
            {
                return Json(new DO_ReturnParameter() { Status = false, Message = (ex.InnerException != null) ? ex.InnerException.Message : ex.Message });
            }
        }

        /// <summary>
        /// Insert or Update Localization Master
        /// </summary>
        [HttpPost]
        public JsonResult InsertOrUpdateLocalizationTableMaster(DO_LocalizationMaster obj)
        {

            try
            {
                obj.UserID = AppSessionVariables.GetSessionUserID(HttpContext);
                obj.TerminalID = AppSessionVariables.GetIPAddress(HttpContext);

                var client = _eSyaWebAPI.InitializeClient(HttpContext.RequestServices.GetRequiredService<IConfiguration>());
                HttpResponseMessage response = client.PostAsJsonAsync<DO_LocalizationMaster>("Localization/InsertOrUpdateLocalizationTableMaster", obj).Result;
                string respData = response.Content.ReadAsStringAsync().Result;
                var result = JsonConvert.DeserializeObject<DO_ReturnParameter>(respData);

                return Json(result);
            }
            catch (Exception ex)
            {
                return Json(new { Status = false, Message = ex.InnerException == null ? ex.Message.ToString() : ex.InnerException.Message });
            }
        }

        #endregion


        /// <summary>
        /// Localization Language Mapping
        /// </summary>
        /// 
        [Area("Config")]
        public IActionResult V_24_00()
        {
            ViewBag.formName = "Localization Language Mapping";
            try
            {
                var client = _eSyaWebAPI.InitializeClient(HttpContext.RequestServices.GetRequiredService<IConfiguration>());

                HttpResponseMessage resp = client.GetAsync("ConfigMasterData/GetLanguage").Result;
                string respData = resp.Content.ReadAsStringAsync().Result;
                ViewBag.LangList = JsonConvert.DeserializeObject<List<DO_Language>>(respData);

                resp = client.GetAsync("Localization/GetLocalizationMaster").Result;
                respData = resp.Content.ReadAsStringAsync().Result;
                ViewBag.TableList = JsonConvert.DeserializeObject<List<DO_LocalizationMaster>>(respData);

                return View();
            }
            catch (Exception ex)
            {
                return Json(new { Status = false, Message = ex.ToString() });
            }
        }

        /// <summary>
        /// Insert or Update Localization Language Mapping
        /// </summary>
        [HttpPost]
        public JsonResult InsertOrUpdateLocalizationLanguageMapping(List<DO_LocalizationLanguageMapping> l_obj)
        {

            try
            {
                l_obj.All(c =>
                {
                    c.UserID = AppSessionVariables.GetSessionUserID(HttpContext);
                    c.TerminalID = AppSessionVariables.GetIPAddress(HttpContext);
                    return true;
                });

                var client = _eSyaWebAPI.InitializeClient(HttpContext.RequestServices.GetRequiredService<IConfiguration>());
                HttpResponseMessage Insertresponse = client.PostAsJsonAsync<List<DO_LocalizationLanguageMapping>>("Localization/InsertOrUpdateLocalizationLanguageMapping", l_obj).Result;
                string response = Insertresponse.Content.ReadAsStringAsync().Result;
                var result = JsonConvert.DeserializeObject<DO_ReturnParameter>(response);
                return Json(result);    
            }
            catch (Exception ex)
            {
                return Json(new { Status = false, Message = ex.InnerException == null ? ex.Message.ToString() : ex.InnerException.Message });
            }
        }

        /// <summary>
        /// Get Localization Language Mapping Grid
        /// </summary>
        [HttpGet]
        public JsonResult GetLocalizationLanguageMapping(string languageCode, int tableCode)
        {
            try
            {
                if (tableCode > 0)
                {
                    var client = _eSyaWebAPI.InitializeClient(HttpContext.RequestServices.GetRequiredService<IConfiguration>());
                    var parameter = "languageCode=" + languageCode + "&tableCode=" + tableCode.ToString();
                    HttpResponseMessage response = client.GetAsync("Localization/GetLocalizationLanguageMapping?" + parameter).Result;
                    string stringData = response.Content.ReadAsStringAsync().Result;
                    var data = JsonConvert.DeserializeObject<List<DO_LocalizationLanguageMapping>>(stringData);
                    return Json(data);
                }
                else
                    return Json(null);
            }
            catch (Exception ex)
            {
                return Json(new DO_ReturnParameter() { Status = false, Message = (ex.InnerException != null) ? ex.InnerException.Message : ex.Message });
            }
        }
        
    }
}