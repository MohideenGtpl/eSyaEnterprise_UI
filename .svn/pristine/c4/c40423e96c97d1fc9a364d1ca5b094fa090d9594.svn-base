using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using System.Net.Http;
using eSyaEnterprise_UI.Areas.Config.Models;
using eSyaEnterprise_UI.Models;
using eSyaEnterprise_UI.Utility;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Newtonsoft.Json;
using eSyaEnterprise_UI.Areas.Config.Data;
using eSyaEnterprise_UI.ActionFilter;
using Microsoft.Extensions.Logging;
namespace eSyaEnterprise_UI.Areas.Config.Controllers
{
    public class DocumentControlController : Controller
    {
        private readonly IeSyaConfigAPIServices _eSyaConfigAPIServices;
        private readonly ILogger<DocumentControlController> _logger;
        public DocumentControlController(IeSyaConfigAPIServices eSyaConfigAPIServices, ILogger<DocumentControlController> logger)
        {
            _eSyaConfigAPIServices = eSyaConfigAPIServices;
            _logger = logger;
        }
        #region Calendar Definition
        [Area("eSyaConfig")]
        [ServiceFilter(typeof(ViewBagActionFilter))]
        public IActionResult V_18_00()
        {
            return View();
        }


        /// <summary>
        /// Getting Calendar Header for Grid
        /// </summary>

        [HttpPost]
        public async Task<JsonResult> GetCalendarHeaders()
        {
            try
            {
                var serviceResponse = await _eSyaConfigAPIServices.HttpClientServices.GetAsync<List<DO_CalendarDefinition>>("DocumentControl/GetCalendarHeaders");
                if (serviceResponse.Status)
                {
                   return Json(serviceResponse.Data);
                   
                }
                else
                {
                    _logger.LogError(new Exception(serviceResponse.Message), "UD:GetCalendarHeaders");
                    return Json(new { Status = false, StatusCode = "500" });
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:GetCalendarHeaders");
                return Json(new DO_ReturnParameter() { Status = false, Message = (ex.InnerException != null) ? ex.InnerException.Message : ex.Message });
            }
        }

        /// <summary>
        /// Insert Calendar Header & Details
        /// </summary>
        [HttpPost]
        public async Task<JsonResult> InsertCalendarHeaderAndDetails([FromBody] DO_CalendarDefinition calendarheadar)
        {

            try
            {
                calendarheadar.UserID = AppSessionVariables.GetSessionUserID(HttpContext);
                calendarheadar.TerminalID = AppSessionVariables.GetIPAddress(HttpContext);
                calendarheadar.FormId = AppSessionVariables.GetSessionFormInternalID(HttpContext);
                var serviceResponse = await _eSyaConfigAPIServices.HttpClientServices.PostAsJsonAsync<DO_ReturnParameter>("DocumentControl/InsertCalendarHeaderAndDetails", calendarheadar);
                if (serviceResponse.Status)
                    return Json(serviceResponse.Data);
                else
                    return Json(new DO_ReturnParameter() { Status = false, Message = serviceResponse.Message });

            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:InsertCalendarHeaderAndDetails:params:" + JsonConvert.SerializeObject(calendarheadar));
                return Json(new { Status = false, Message = ex.InnerException == null ? ex.Message.ToString() : ex.InnerException.Message });
            }
        }

        #endregion Calendar Definition


        #region Calendar Details
        [Area("eSyaConfig")]
        [ServiceFilter(typeof(ViewBagActionFilter))]
        public async Task<IActionResult> V_221_00()
        {
            try
            {
                var serviceResponse = await _eSyaConfigAPIServices.HttpClientServices.GetAsync<List<DO_BusinessLocation>>("BusinessStructure/GetBusinessKey");
                if (serviceResponse.Status)
                {
                    ViewBag.BusikessKeys = serviceResponse.Data;
                    return View();
                  
                }
                else
                {
                    _logger.LogError(new Exception(serviceResponse.Message), "UD:GetBusinessKey");
                    return Json(new { Status = false, StatusCode = "500" });
                }

            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:GetBusinessKey");
                return Json(new DO_ReturnParameter() { Status = false, Message = (ex.InnerException != null) ? ex.InnerException.Message : ex.Message });
            }
        }
        /// <summary>
        /// Getting cbo Financial Year by Business key
        /// </summary>

        [HttpPost]
        public async Task<JsonResult> GetFinancialYearbyBusinessKey(int Businesskey)
        {
            try
            {
                var parameter = "?Businesskey=" + Businesskey;
                var serviceResponse =await _eSyaConfigAPIServices.HttpClientServices.GetAsync<List<DO_CalendarDetails>>("DocumentControl/GetFinancialYearbyBusinessKey" + parameter);
                if (serviceResponse.Status)
                {
                    return Json(serviceResponse.Data);
                   
                }
                else
                {
                    _logger.LogError(new Exception(serviceResponse.Message), "UD:GetFinancialYearbyBusinessKey:For Businesskey {0}", Businesskey);
                    return Json(new { Status = false, StatusCode = "500" });
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:GetFinancialYearbyBusinessKey:For Businesskey {0}", Businesskey);
                return Json(new DO_ReturnParameter() { Status = false, Message = (ex.InnerException != null) ? ex.InnerException.Message : ex.Message });
            }
        }
        /// <summary>
        /// Getting Calendar Details by Business Key && Financial Year for Grid
        /// </summary>

        [HttpPost]
        public async Task<JsonResult> GetCalendarDetailsbyBusinessKeyAndFinancialYear(int Businesskey, decimal FinancialYear)
        {
            try
            {
                var parameter = "?Businesskey=" + Businesskey + "&FinancialYear=" + FinancialYear;
                var serviceResponse =await _eSyaConfigAPIServices.HttpClientServices.GetAsync<List<DO_CalendarDetails>>("DocumentControl/GetCalendarDetailsbyBusinessKeyAndFinancialYear" + parameter);
                if (serviceResponse.Status)
                {
                   return Json(serviceResponse.Data);
                   
                }
                else
                {
                    _logger.LogError(new Exception(serviceResponse.Message), "UD:GetCalendarDetailsbyBusinessKeyAndFinancialYear:For Businesskey {0} with FinancialYear entered {1}", Businesskey, FinancialYear);
                    return Json(new { Status = false, StatusCode = "500" });
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:GetCalendarDetailsbyBusinessKeyAndFinancialYear:For Businesskey {0} with FinancialYear entered {1}", Businesskey, FinancialYear);
                return Json(new DO_ReturnParameter() { Status = false, Message = (ex.InnerException != null) ? ex.InnerException.Message : ex.Message });
            }
        }
        /// <summary>
        /// Update Calendar Details
        /// </summary>
        [HttpPost]
        public async Task<JsonResult> UpdateCalendardetails(DO_CalendarDetails postData)
        {

            try
            {
                postData.UserID = AppSessionVariables.GetSessionUserID(HttpContext);
                postData.TerminalID = AppSessionVariables.GetIPAddress(HttpContext);
                var serviceResponse =await _eSyaConfigAPIServices.HttpClientServices.PostAsJsonAsync<DO_ReturnParameter>("DocumentControl/UpdateCalendardetails", postData);
                if (serviceResponse.Status)
                    return Json(serviceResponse.Data);
                else
                    return Json(new DO_ReturnParameter() { Status = false, Message = serviceResponse.Message });

            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:UpdateCalendardetails:params:" + JsonConvert.SerializeObject(postData));
                return Json(new DO_ReturnParameter() { Status = false, Message = (ex.InnerException != null) ? ex.InnerException.Message : ex.Message });
            }
        }
        #endregion Calendar detail

        #region Document Control
        [Area("eSyaConfig")]
        [ServiceFilter(typeof(ViewBagActionFilter))]
        public async Task<IActionResult> V_19_00()
        {
            try
            {
                var serviceResponse = await _eSyaConfigAPIServices.HttpClientServices.GetAsync<List<DO_Forms>>("Forms/GetFormDetails");
                if (serviceResponse.Status)
                {
                     ViewBag.formMasterlist = serviceResponse.Data;
                      return View();
                }
                else
                {
                    _logger.LogError(new Exception(serviceResponse.Message), "UD:GetFormDetails");
                    return Json(new { Status = false, StatusCode = "500" });
                }

            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:GetFormDetails");
                return Json(new DO_ReturnParameter() { Status = false, Message = (ex.InnerException != null) ? ex.InnerException.Message : ex.Message });
            }
            

        }
        /// <summary>
        /// Getting Document Controls for Grid
        /// </summary>

        [HttpPost]
        public async Task<JsonResult> GetDocumentControls()
        {
            try
            {
                var serviceResponse =await _eSyaConfigAPIServices.HttpClientServices.GetAsync<List<DO_DocumentControl>>("DocumentControl/GetDocumentControls");
                if (serviceResponse.Status)
                {
                   return Json(serviceResponse.Data);
                   
                }
                else
                {
                    _logger.LogError(new Exception(serviceResponse.Message), "UD:GetDocumentControls");
                    return Json(new { Status = false, StatusCode = "500" });
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:GetDocumentControls");
                return Json(new DO_ReturnParameter() { Status = false, Message = (ex.InnerException != null) ? ex.InnerException.Message : ex.Message });
            }
        }

        /// <summary>
        /// Insert or Update Document Control
        /// </summary>
        [HttpPost]
        public async Task<JsonResult> InsertOrUpdateDocumentControl(DO_DocumentControl control)
        {

            try
            {
                control.UserID = AppSessionVariables.GetSessionUserID(HttpContext);
                control.TerminalID = AppSessionVariables.GetIPAddress(HttpContext);
                if (control.Isadd == 1)
                {
                    var serviceResponse =await _eSyaConfigAPIServices.HttpClientServices.PostAsJsonAsync<DO_ReturnParameter>("DocumentControl/InsertDocumentControl", control);
                    if (serviceResponse.Status)
                        return Json(serviceResponse.Data);
                    else
                        return Json(new DO_ReturnParameter() { Status = false, Message = serviceResponse.Message });
                }

                else
                {
                    var serviceResponse =await _eSyaConfigAPIServices.HttpClientServices.PostAsJsonAsync<DO_ReturnParameter>("DocumentControl/UpdateDocumentControl", control);
                    if (serviceResponse.Status)
                        return Json(serviceResponse.Data);
                    else
                        return Json(new DO_ReturnParameter() { Status = false, Message = serviceResponse.Message });
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:InsertOrUpdateDocumentControl:params:" + JsonConvert.SerializeObject(control));
                return Json(new DO_ReturnParameter() { Status = false, Message = (ex.InnerException != null) ? ex.InnerException.Message : ex.Message });
            }
        }
        #endregion Document Control
    }
}