using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using System.Net.Http;
using eSyaEnterprise_UI.Areas.Config.Models;
using eSyaEnterprise_UI.Models;
using eSyaEnterprise_UI.Utility;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Newtonsoft.Json;
using eSyaEnterprise_UI.Areas.Config.Data;
using eSyaEnterprise_UI.ActionFilter;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.Extensions.Logging;

namespace eSyaEnterprise_UI.Areas.Config.Controllers
{
    [SessionTimeout]
    public class ApplicationCodesController : Controller
    {
        private readonly IeSyaConfigAPIServices _eSyaConfigAPIServices;
        private readonly ILogger<ApplicationCodesController> _logger;
        public ApplicationCodesController(IeSyaConfigAPIServices eSyaConfigAPIServices, ILogger<ApplicationCodesController> logger)
        {
            _eSyaConfigAPIServices = eSyaConfigAPIServices;
            _logger = logger;
        }
        #region Code Type
        /// <summary>
        /// Code Type
        /// </summary>
        /// <returns></returns>

        [Area("eSyaConfig")]
        [ServiceFilter(typeof(ViewBagActionFilter))]
        public IActionResult V_15_00()
        {
            return View();
        }
        /// <summary>
        ///Get Code Types for Grid
        /// </summary>
        [HttpPost]
        public async Task<JsonResult> GetCodeTypes()
        {

            try
            {
                var serviceResponse = await _eSyaConfigAPIServices.HttpClientServices.GetAsync<List<DO_CodeTypes>>("CodeTypes/GetCodeTypes");
                if (serviceResponse.Status)
                {
                     return Json(serviceResponse.Data);
                }
                else
                {
                    _logger.LogError(new Exception(serviceResponse.Message), "UD:GetCodeTypes");
                    return Json(new { Status = false, StatusCode = "500" });
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:GetCodeTypes");
                return Json(new DO_ReturnParameter() { Status = false, Message = (ex.InnerException != null) ? ex.InnerException.Message : ex.Message });
            }

        }

        /// <summary>
        /// Insert or Update Code Types
        /// </summary>
        [HttpPost]
        public async Task <JsonResult> InsertOrUpdateCodeTypes(bool isInsert, DO_CodeTypes ct_type)
        {

            try
            {
                ct_type.UserID = AppSessionVariables.GetSessionUserID(HttpContext);
                ct_type.TerminalID = AppSessionVariables.GetIPAddress(HttpContext);
                ct_type.FormID = AppSessionVariables.GetSessionFormInternalID(HttpContext);
                if (isInsert)
                {
                    var serviceResponse = await _eSyaConfigAPIServices.HttpClientServices.PostAsJsonAsync<DO_ReturnParameter>("CodeTypes/InsertIntoCodeType", ct_type);
                    if (serviceResponse.Status)
                        return Json(serviceResponse.Data);
                    else
                        return Json(new DO_ReturnParameter() { Status = false, Message = serviceResponse.Message });
                }
                else
                {
                    var serviceResponse = await _eSyaConfigAPIServices.HttpClientServices.PostAsJsonAsync<DO_ReturnParameter>("CodeTypes/UpdateCodeType", ct_type);
                    if (serviceResponse.Status)
                        return Json(serviceResponse.Data);
                    else
                        return Json(new DO_ReturnParameter() { Status = false, Message = serviceResponse.Message });
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:InsertOrUpdateCodeTypes:params:" + JsonConvert.SerializeObject(ct_type));
                return Json(new DO_ReturnParameter() { Status = false, Message = (ex.InnerException != null) ? ex.InnerException.Message : ex.Message });
            }
        }
        #endregion

        #region Application Codes
        /// <summary>
        /// Application Codes
        /// </summary>
        /// <returns></returns>

        [Area("eSyaConfig")]
        [ServiceFilter(typeof(ViewBagActionFilter))]
        public async Task<IActionResult> V_16_00()
        {
            try
            {
                var serviceResponse = await _eSyaConfigAPIServices.HttpClientServices.GetAsync<List<DO_CodeTypes>>("CodeTypes/GetActiveCodeTypes");
                if (serviceResponse.Status)
                {
                        ViewBag.CodeTypeList = serviceResponse.Data.Select(b => new SelectListItem
                        {
                            Value = b.CodeType.ToString(),
                            Text = b.CodeTypeDesc,
                        }).ToList();

                        return View();
                }
                else
                {
                    _logger.LogError(new Exception(serviceResponse.Message), "UD:ActiveCodeTypes");
                    return Json(new { Status = false, StatusCode = "500" });
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:ActiveCodeTypes");
                return Json(new DO_ReturnParameter() { Status = false, Message = (ex.InnerException != null) ? ex.InnerException.Message : ex.Message });
            }
        }

        /// <summary>
        ///Get Application Codes by code Type for Grid
        /// </summary>
        [HttpPost]
        public async Task<JsonResult> GetApplicationCodesByCodeType(int codeType)
        {

            try
            {
                var parameter = "?codeType=" + codeType;
                var serviceResponse = await _eSyaConfigAPIServices.HttpClientServices.GetAsync<List<DO_ApplicationCodes>>("ApplicationCodes/GetApplicationCodesByCodeType" + parameter);
                if (serviceResponse.Status)
                {
                    return Json(serviceResponse.Data);
                }
                else
                {
                    _logger.LogError(new Exception(serviceResponse.Message), "UD:GetApplicationCodesByCodeType:For codeType {0}", codeType);
                    return Json(new { Status = false, StatusCode = "500" });
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:GetApplicationCodesByCodeType:For codeType {0} ", codeType);
                return Json(new DO_ReturnParameter() { Status = false, Message = (ex.InnerException != null) ? ex.InnerException.Message : ex.Message });
            }

        }
        /// <summary>
        /// Insert or Update Application Codes 
        /// </summary>
        [HttpPost]
        public async Task<JsonResult> InsertOrAudateApplicationCodes(DO_ApplicationCodes app_codes)
        {

            try
            {
                app_codes.FormID = AppSessionVariables.GetSessionFormInternalID(HttpContext);
                app_codes.UserID = AppSessionVariables.GetSessionUserID(HttpContext);
                app_codes.TerminalID = AppSessionVariables.GetIPAddress(HttpContext);

                if (app_codes.ApplicationCode == 0)
                {
                    var serviceResponse =await _eSyaConfigAPIServices.HttpClientServices.PostAsJsonAsync<DO_ReturnParameter>("ApplicationCodes/InsertIntoApplicationCodes", app_codes);
                    if (serviceResponse.Status)
                        return Json(serviceResponse.Data);
                    else
                        return Json(new DO_ReturnParameter() { Status = false, Message = serviceResponse.Message });
                }

                else
                {
                    var serviceResponse =await _eSyaConfigAPIServices.HttpClientServices.PostAsJsonAsync<DO_ReturnParameter>("ApplicationCodes/UpdateApplicationCodes", app_codes);
                    if (serviceResponse.Status)
                        return Json(serviceResponse.Data);
                    else
                        return Json(new DO_ReturnParameter() { Status = false, Message = serviceResponse.Message });
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "UD:InsertOrAudateApplicationCodes:params:" + JsonConvert.SerializeObject(app_codes));
                return Json(new DO_ReturnParameter() { Status = false, Message = (ex.InnerException != null) ? ex.InnerException.Message : ex.Message });
            }
        }
        #endregion
    }
}